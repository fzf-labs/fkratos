// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fkratos/app/bff_admin/internal/biz"
	"fkratos/app/bff_admin/internal/server"
	"fkratos/app/bff_admin/internal/service"
	"fkratos/internal/rpc"
	"github.com/fzf-labs/fkratos-contrib/api/conf/v1"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *v1.Bootstrap, logger log.Logger, registrar registry.Registrar, discovery registry.Discovery) (*kratos.App, func(), error) {
	sysGrpc := rpc.NewRPCSysGrpc(bootstrap, logger, discovery)
	sysAuthClient := rpc.NewSysAuthServiceClient(sysGrpc)
	sysAdminClient := rpc.NewSysAdminServiceClient(sysGrpc)
	sysRoleClient := rpc.NewSysRoleServiceClient(sysGrpc)
	sysPermissionClient := rpc.NewSysPermissionServiceClient(sysGrpc)
	sysJobClient := rpc.NewSysJobServiceClient(sysGrpc)
	sysDeptClient := rpc.NewSysDeptServiceClient(sysGrpc)
	sysAPIClient := rpc.NewSysAPIServiceClient(sysGrpc)
	sysLogClient := rpc.NewSysLogServiceClient(sysGrpc)
	dashboardClient := rpc.NewSysDashboardServiceClient(sysGrpc)
	sysUseCase := biz.NewSysUseCase(logger, sysAuthClient, sysAdminClient, sysRoleClient, sysPermissionClient, sysJobClient, sysDeptClient, sysAPIClient, sysLogClient, dashboardClient)
	sysService := service.NewSysService(logger, sysUseCase)
	httpServer := server.NewHTTPServer(bootstrap, logger, sysAuthClient, sysService)
	app := newApp(logger, registrar, httpServer)
	return app, func() {
	}, nil
}
