// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fkratos/app/bff_admin/internal/data"
	"fkratos/app/bff_admin/internal/server"
	"fkratos/app/bff_admin/internal/service"
	"fkratos/internal/bootstrap/conf"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger, registrar registry.Registrar, discovery registry.Discovery) (*kratos.App, func(), error) {
	rpcSysGrpc := data.NewRpcSysGrpc(bootstrap, discovery)
	authClient := data.NewSysAuthServiceClient(rpcSysGrpc)
	adminClient := data.NewSysAdminServiceClient(rpcSysGrpc)
	roleClient := data.NewSysRoleServiceClient(rpcSysGrpc)
	permissionClient := data.NewSysPermissionServiceClient(rpcSysGrpc)
	jobClient := data.NewSysJobServiceClient(rpcSysGrpc)
	deptClient := data.NewSysDeptServiceClient(rpcSysGrpc)
	apiClient := data.NewSysApiServiceClient(rpcSysGrpc)
	logClient := data.NewSysLogServiceClient(rpcSysGrpc)
	dashboardClient := data.NewSysDashboardServiceClient(rpcSysGrpc)
	sysService := service.NewSysService(logger, authClient, adminClient, roleClient, permissionClient, jobClient, deptClient, apiClient, logClient, dashboardClient)
	httpServer := server.NewHTTPServer(bootstrap, logger, sysService)
	app := newApp(logger, registrar, httpServer)
	return app, func() {
	}, nil
}
