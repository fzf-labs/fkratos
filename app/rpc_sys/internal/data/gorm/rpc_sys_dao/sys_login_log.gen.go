// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package rpc_sys_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_sys/internal/data/gorm/rpc_sys_model"
)

func newSysLoginLog(db *gorm.DB, opts ...gen.DOOption) sysLoginLog {
	_sysLoginLog := sysLoginLog{}

	_sysLoginLog.sysLoginLogDo.UseDB(db, opts...)
	_sysLoginLog.sysLoginLogDo.UseModel(&rpc_sys_model.SysLoginLog{})

	tableName := _sysLoginLog.sysLoginLogDo.TableName()
	_sysLoginLog.ALL = field.NewAsterisk(tableName)
	_sysLoginLog.ID = field.NewString(tableName, "id")
	_sysLoginLog.TenantID = field.NewString(tableName, "tenant_id")
	_sysLoginLog.AdminID = field.NewString(tableName, "admin_id")
	_sysLoginLog.IP = field.NewString(tableName, "ip")
	_sysLoginLog.Useragent = field.NewString(tableName, "useragent")
	_sysLoginLog.LoginTime = field.NewField(tableName, "login_time")

	_sysLoginLog.fillFieldMap()

	return _sysLoginLog
}

type sysLoginLog struct {
	sysLoginLogDo sysLoginLogDo

	ALL       field.Asterisk
	ID        field.String
	TenantID  field.String // 组织ID
	AdminID   field.String // 用户ID
	IP        field.String // ip
	Useragent field.String // 浏览器标识
	LoginTime field.Field  // 登录时间

	fieldMap map[string]field.Expr
}

func (s sysLoginLog) Table(newTableName string) *sysLoginLog {
	s.sysLoginLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLoginLog) As(alias string) *sysLoginLog {
	s.sysLoginLogDo.DO = *(s.sysLoginLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLoginLog) updateTableName(table string) *sysLoginLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.TenantID = field.NewString(table, "tenant_id")
	s.AdminID = field.NewString(table, "admin_id")
	s.IP = field.NewString(table, "ip")
	s.Useragent = field.NewString(table, "useragent")
	s.LoginTime = field.NewField(table, "login_time")

	s.fillFieldMap()

	return s
}

func (s *sysLoginLog) WithContext(ctx context.Context) *sysLoginLogDo {
	return s.sysLoginLogDo.WithContext(ctx)
}

func (s sysLoginLog) TableName() string { return s.sysLoginLogDo.TableName() }

func (s sysLoginLog) Alias() string { return s.sysLoginLogDo.Alias() }

func (s *sysLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLoginLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["admin_id"] = s.AdminID
	s.fieldMap["ip"] = s.IP
	s.fieldMap["useragent"] = s.Useragent
	s.fieldMap["login_time"] = s.LoginTime
}

func (s sysLoginLog) clone(db *gorm.DB) sysLoginLog {
	s.sysLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLoginLog) replaceDB(db *gorm.DB) sysLoginLog {
	s.sysLoginLogDo.ReplaceDB(db)
	return s
}

type sysLoginLogDo struct{ gen.DO }

func (s sysLoginLogDo) Debug() *sysLoginLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLoginLogDo) WithContext(ctx context.Context) *sysLoginLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLoginLogDo) ReadDB() *sysLoginLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLoginLogDo) WriteDB() *sysLoginLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLoginLogDo) Session(config *gorm.Session) *sysLoginLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLoginLogDo) Clauses(conds ...clause.Expression) *sysLoginLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLoginLogDo) Returning(value interface{}, columns ...string) *sysLoginLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLoginLogDo) Not(conds ...gen.Condition) *sysLoginLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLoginLogDo) Or(conds ...gen.Condition) *sysLoginLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLoginLogDo) Select(conds ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLoginLogDo) Where(conds ...gen.Condition) *sysLoginLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLoginLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysLoginLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysLoginLogDo) Order(conds ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLoginLogDo) Distinct(cols ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLoginLogDo) Omit(cols ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLoginLogDo) Join(table schema.Tabler, on ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLoginLogDo) Group(cols ...field.Expr) *sysLoginLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLoginLogDo) Having(conds ...gen.Condition) *sysLoginLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLoginLogDo) Limit(limit int) *sysLoginLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLoginLogDo) Offset(offset int) *sysLoginLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysLoginLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLoginLogDo) Unscoped() *sysLoginLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLoginLogDo) Create(values ...*rpc_sys_model.SysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLoginLogDo) CreateInBatches(values []*rpc_sys_model.SysLoginLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLoginLogDo) Save(values ...*rpc_sys_model.SysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLoginLogDo) First() (*rpc_sys_model.SysLoginLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_sys_model.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Take() (*rpc_sys_model.SysLoginLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_sys_model.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Last() (*rpc_sys_model.SysLoginLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_sys_model.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Find() ([]*rpc_sys_model.SysLoginLog, error) {
	result, err := s.DO.Find()
	return result.([]*rpc_sys_model.SysLoginLog), err
}

func (s sysLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rpc_sys_model.SysLoginLog, err error) {
	buf := make([]*rpc_sys_model.SysLoginLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLoginLogDo) FindInBatches(result *[]*rpc_sys_model.SysLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLoginLogDo) Attrs(attrs ...field.AssignExpr) *sysLoginLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLoginLogDo) Assign(attrs ...field.AssignExpr) *sysLoginLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLoginLogDo) Joins(fields ...field.RelationField) *sysLoginLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLoginLogDo) Preload(fields ...field.RelationField) *sysLoginLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLoginLogDo) FirstOrInit() (*rpc_sys_model.SysLoginLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_sys_model.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) FirstOrCreate() (*rpc_sys_model.SysLoginLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_sys_model.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) FindByPage(offset int, limit int) (result []*rpc_sys_model.SysLoginLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLoginLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLoginLogDo) Delete(models ...*rpc_sys_model.SysLoginLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLoginLogDo) withDO(do gen.Dao) *sysLoginLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
