// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fkratos/app/rpc_sys/internal/biz"
	"fkratos/app/rpc_sys/internal/data"
	"fkratos/app/rpc_sys/internal/data/gorm/fkratos_sys_repo"
	"fkratos/app/rpc_sys/internal/server"
	"fkratos/app/rpc_sys/internal/service"
	"github.com/fzf-labs/fkratos-contrib/api/conf/v1"
	"github.com/fzf-labs/fkratos-contrib/bootstrap"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(v1Bootstrap *v1.Bootstrap, logger log.Logger, registrar registry.Registrar, discovery registry.Discovery) (*kratos.App, func(), error) {
	db := bootstrap.NewGorm(v1Bootstrap, logger)
	client := bootstrap.NewRueidis(v1Bootstrap, logger)
	idbCache := data.NewDBCache(client)
	asynqClient := bootstrap.NewAysnqClient(v1Bootstrap)
	dataData, cleanup, err := data.NewData(v1Bootstrap, logger, db, idbCache, client, asynqClient)
	if err != nil {
		return nil, nil, err
	}
	sysAdminRepo := fkratos_sys_repo.NewSysAdminRepo(db, idbCache)
	bizSysAdminRepo := data.NewSysAdminRepo(logger, dataData, v1Bootstrap, sysAdminRepo)
	sysAuthUseCase := biz.NewSysAuthUseCase(logger, bizSysAdminRepo)
	sysAuthService := service.NewSysAuthService(logger, sysAuthUseCase)
	sysRoleRepo := fkratos_sys_repo.NewSysRoleRepo(db, idbCache)
	bizSysRoleRepo := data.NewSysRoleRepo(dataData, logger, sysRoleRepo)
	sysJobRepo := fkratos_sys_repo.NewSysJobRepo(db, idbCache)
	bizSysJobRepo := data.NewSysJobRepo(dataData, logger, sysJobRepo)
	sysDeptRepo := fkratos_sys_repo.NewSysDeptRepo(db, idbCache)
	bizSysDeptRepo := data.NewSysDeptRepo(dataData, logger, sysDeptRepo)
	sysPermissionRepo := fkratos_sys_repo.NewSysPermissionRepo(db, idbCache)
	bizSysPermissionRepo := data.NewSysPermissionRepo(dataData, logger, sysPermissionRepo)
	sysAdminUseCase := biz.NewSysAdminUseCase(logger, bizSysAdminRepo, bizSysRoleRepo, bizSysJobRepo, bizSysDeptRepo, bizSysPermissionRepo)
	sysAdminService := service.NewSysAdminService(logger, sysAdminUseCase)
	sysRoleUseCase := biz.NewSysRoleUseCase(logger, bizSysRoleRepo)
	sysRoleService := service.NewSysRoleService(logger, sysRoleUseCase)
	sysPermissionUseCase := biz.NewSysPermissionUseCase(logger, bizSysPermissionRepo)
	sysPermissionService := service.NewSysPermissionService(logger, sysPermissionUseCase)
	sysJobUseCase := biz.NewSysJobUseCase(logger, bizSysJobRepo)
	sysJobService := service.NewSysJobService(logger, sysJobUseCase)
	sysDeptUseCase := biz.NewSysDeptUseCase(logger, bizSysDeptRepo)
	sysDeptService := service.NewSysDeptService(logger, sysDeptUseCase)
	sysAPIRepo := fkratos_sys_repo.NewSysAPIRepo(db, idbCache)
	bizSysAPIRepo := data.NewSysAPIRepo(dataData, logger, sysAPIRepo)
	sysAPIUseCase := biz.NewSysAPIUseCase(logger, bizSysAPIRepo)
	sysAPIService := service.NewSysAPIService(logger, sysAPIUseCase)
	sysLogRepo := fkratos_sys_repo.NewSysLogRepo(db, idbCache)
	bizSysLogRepo := data.NewSysLogRepo(dataData, logger, sysLogRepo)
	sysLogUseCase := biz.NewSysLogUseCase(logger, bizSysLogRepo, bizSysAdminRepo, bizSysAPIRepo)
	sysLogService := service.NewSysLogService(logger, sysLogUseCase)
	dashboardUseCase := biz.NewDashboardUseCase(logger)
	dashboardService := service.NewDashboardService(logger, dashboardUseCase)
	grpcServer := server.NewGRPCServer(v1Bootstrap, logger, sysAuthService, sysAdminService, sysRoleService, sysPermissionService, sysJobService, sysDeptService, sysAPIService, sysLogService, dashboardService)
	app := newApp(logger, registrar, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
