// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fkratos_common_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_common/internal/data/gorm/fkratos_common_model"
)

func newDictType(db *gorm.DB, opts ...gen.DOOption) dictType {
	_dictType := dictType{}

	_dictType.dictTypeDo.UseDB(db, opts...)
	_dictType.dictTypeDo.UseModel(&fkratos_common_model.DictType{})

	tableName := _dictType.dictTypeDo.TableName()
	_dictType.ALL = field.NewAsterisk(tableName)
	_dictType.ID = field.NewString(tableName, "id")
	_dictType.Name = field.NewString(tableName, "name")
	_dictType.Type = field.NewString(tableName, "type")
	_dictType.Status = field.NewInt16(tableName, "status")
	_dictType.Remark = field.NewString(tableName, "remark")
	_dictType.CreatedAt = field.NewTime(tableName, "created_at")
	_dictType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dictType.DeletedAt = field.NewField(tableName, "deleted_at")

	_dictType.fillFieldMap()

	return _dictType
}

type dictType struct {
	dictTypeDo dictTypeDo

	ALL       field.Asterisk
	ID        field.String // id
	Name      field.String // 字典名称
	Type      field.String // 字典类型
	Status    field.Int16  // 状态（0正常 1停用）
	Remark    field.String // 备注
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (d dictType) Table(newTableName string) *dictType {
	d.dictTypeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictType) As(alias string) *dictType {
	d.dictTypeDo.DO = *(d.dictTypeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictType) updateTableName(table string) *dictType {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Name = field.NewString(table, "name")
	d.Type = field.NewString(table, "type")
	d.Status = field.NewInt16(table, "status")
	d.Remark = field.NewString(table, "remark")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *dictType) WithContext(ctx context.Context) *dictTypeDo { return d.dictTypeDo.WithContext(ctx) }

func (d dictType) TableName() string { return d.dictTypeDo.TableName() }

func (d dictType) Alias() string { return d.dictTypeDo.Alias() }

func (d dictType) Columns(cols ...field.Expr) gen.Columns { return d.dictTypeDo.Columns(cols...) }

func (d *dictType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictType) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["type"] = d.Type
	d.fieldMap["status"] = d.Status
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d dictType) clone(db *gorm.DB) dictType {
	d.dictTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictType) replaceDB(db *gorm.DB) dictType {
	d.dictTypeDo.ReplaceDB(db)
	return d
}

type dictTypeDo struct{ gen.DO }

func (d dictTypeDo) Debug() *dictTypeDo {
	return d.withDO(d.DO.Debug())
}

func (d dictTypeDo) WithContext(ctx context.Context) *dictTypeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictTypeDo) ReadDB() *dictTypeDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictTypeDo) WriteDB() *dictTypeDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictTypeDo) Session(config *gorm.Session) *dictTypeDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictTypeDo) Clauses(conds ...clause.Expression) *dictTypeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictTypeDo) Returning(value interface{}, columns ...string) *dictTypeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictTypeDo) Not(conds ...gen.Condition) *dictTypeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictTypeDo) Or(conds ...gen.Condition) *dictTypeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictTypeDo) Select(conds ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictTypeDo) Where(conds ...gen.Condition) *dictTypeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictTypeDo) Order(conds ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictTypeDo) Distinct(cols ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictTypeDo) Omit(cols ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictTypeDo) Join(table schema.Tabler, on ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictTypeDo) Group(cols ...field.Expr) *dictTypeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictTypeDo) Having(conds ...gen.Condition) *dictTypeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictTypeDo) Limit(limit int) *dictTypeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictTypeDo) Offset(offset int) *dictTypeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dictTypeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictTypeDo) Unscoped() *dictTypeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictTypeDo) Create(values ...*fkratos_common_model.DictType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictTypeDo) CreateInBatches(values []*fkratos_common_model.DictType, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictTypeDo) Save(values ...*fkratos_common_model.DictType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictTypeDo) First() (*fkratos_common_model.DictType, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictType), nil
	}
}

func (d dictTypeDo) Take() (*fkratos_common_model.DictType, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictType), nil
	}
}

func (d dictTypeDo) Last() (*fkratos_common_model.DictType, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictType), nil
	}
}

func (d dictTypeDo) Find() ([]*fkratos_common_model.DictType, error) {
	result, err := d.DO.Find()
	return result.([]*fkratos_common_model.DictType), err
}

func (d dictTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fkratos_common_model.DictType, err error) {
	buf := make([]*fkratos_common_model.DictType, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictTypeDo) FindInBatches(result *[]*fkratos_common_model.DictType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictTypeDo) Attrs(attrs ...field.AssignExpr) *dictTypeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictTypeDo) Assign(attrs ...field.AssignExpr) *dictTypeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictTypeDo) Joins(fields ...field.RelationField) *dictTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictTypeDo) Preload(fields ...field.RelationField) *dictTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictTypeDo) FirstOrInit() (*fkratos_common_model.DictType, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictType), nil
	}
}

func (d dictTypeDo) FirstOrCreate() (*fkratos_common_model.DictType, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictType), nil
	}
}

func (d dictTypeDo) FindByPage(offset int, limit int) (result []*fkratos_common_model.DictType, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictTypeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictTypeDo) Delete(models ...*fkratos_common_model.DictType) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictTypeDo) withDO(do gen.Dao) *dictTypeDo {
	d.DO = *do.(*gen.DO)
	return d
}
