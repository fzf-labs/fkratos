// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fkratos_common_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_common/internal/data/gorm/fkratos_common_model"
)

func newDictDatum(db *gorm.DB, opts ...gen.DOOption) dictDatum {
	_dictDatum := dictDatum{}

	_dictDatum.dictDatumDo.UseDB(db, opts...)
	_dictDatum.dictDatumDo.UseModel(&fkratos_common_model.DictDatum{})

	tableName := _dictDatum.dictDatumDo.TableName()
	_dictDatum.ALL = field.NewAsterisk(tableName)
	_dictDatum.ID = field.NewString(tableName, "id")
	_dictDatum.Type = field.NewString(tableName, "type")
	_dictDatum.Label = field.NewString(tableName, "label")
	_dictDatum.Value = field.NewString(tableName, "value")
	_dictDatum.Remark = field.NewString(tableName, "remark")
	_dictDatum.CSSColor = field.NewString(tableName, "css_color")
	_dictDatum.CSSClass = field.NewString(tableName, "css_class")
	_dictDatum.Status = field.NewInt16(tableName, "status")
	_dictDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_dictDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dictDatum.DeletedAt = field.NewField(tableName, "deleted_at")

	_dictDatum.fillFieldMap()

	return _dictDatum
}

type dictDatum struct {
	dictDatumDo dictDatumDo

	ALL       field.Asterisk
	ID        field.String // id
	Type      field.String // 字典类型
	Label     field.String // 字典标签
	Value     field.String // 字典键值
	Remark    field.String // 备注
	CSSColor  field.String // css 颜色
	CSSClass  field.String // css 样式
	Status    field.Int16  // 状态（0正常 1停用）
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (d dictDatum) Table(newTableName string) *dictDatum {
	d.dictDatumDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictDatum) As(alias string) *dictDatum {
	d.dictDatumDo.DO = *(d.dictDatumDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictDatum) updateTableName(table string) *dictDatum {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Type = field.NewString(table, "type")
	d.Label = field.NewString(table, "label")
	d.Value = field.NewString(table, "value")
	d.Remark = field.NewString(table, "remark")
	d.CSSColor = field.NewString(table, "css_color")
	d.CSSClass = field.NewString(table, "css_class")
	d.Status = field.NewInt16(table, "status")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *dictDatum) WithContext(ctx context.Context) *dictDatumDo {
	return d.dictDatumDo.WithContext(ctx)
}

func (d dictDatum) TableName() string { return d.dictDatumDo.TableName() }

func (d dictDatum) Alias() string { return d.dictDatumDo.Alias() }

func (d dictDatum) Columns(cols ...field.Expr) gen.Columns { return d.dictDatumDo.Columns(cols...) }

func (d *dictDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictDatum) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["type"] = d.Type
	d.fieldMap["label"] = d.Label
	d.fieldMap["value"] = d.Value
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["css_color"] = d.CSSColor
	d.fieldMap["css_class"] = d.CSSClass
	d.fieldMap["status"] = d.Status
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d dictDatum) clone(db *gorm.DB) dictDatum {
	d.dictDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictDatum) replaceDB(db *gorm.DB) dictDatum {
	d.dictDatumDo.ReplaceDB(db)
	return d
}

type dictDatumDo struct{ gen.DO }

func (d dictDatumDo) Debug() *dictDatumDo {
	return d.withDO(d.DO.Debug())
}

func (d dictDatumDo) WithContext(ctx context.Context) *dictDatumDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictDatumDo) ReadDB() *dictDatumDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictDatumDo) WriteDB() *dictDatumDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictDatumDo) Session(config *gorm.Session) *dictDatumDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictDatumDo) Clauses(conds ...clause.Expression) *dictDatumDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictDatumDo) Returning(value interface{}, columns ...string) *dictDatumDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictDatumDo) Not(conds ...gen.Condition) *dictDatumDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictDatumDo) Or(conds ...gen.Condition) *dictDatumDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictDatumDo) Select(conds ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictDatumDo) Where(conds ...gen.Condition) *dictDatumDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictDatumDo) Order(conds ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictDatumDo) Distinct(cols ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictDatumDo) Omit(cols ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictDatumDo) Join(table schema.Tabler, on ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictDatumDo) Group(cols ...field.Expr) *dictDatumDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictDatumDo) Having(conds ...gen.Condition) *dictDatumDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictDatumDo) Limit(limit int) *dictDatumDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictDatumDo) Offset(offset int) *dictDatumDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dictDatumDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictDatumDo) Unscoped() *dictDatumDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictDatumDo) Create(values ...*fkratos_common_model.DictDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictDatumDo) CreateInBatches(values []*fkratos_common_model.DictDatum, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictDatumDo) Save(values ...*fkratos_common_model.DictDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictDatumDo) First() (*fkratos_common_model.DictDatum, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictDatum), nil
	}
}

func (d dictDatumDo) Take() (*fkratos_common_model.DictDatum, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictDatum), nil
	}
}

func (d dictDatumDo) Last() (*fkratos_common_model.DictDatum, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictDatum), nil
	}
}

func (d dictDatumDo) Find() ([]*fkratos_common_model.DictDatum, error) {
	result, err := d.DO.Find()
	return result.([]*fkratos_common_model.DictDatum), err
}

func (d dictDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fkratos_common_model.DictDatum, err error) {
	buf := make([]*fkratos_common_model.DictDatum, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictDatumDo) FindInBatches(result *[]*fkratos_common_model.DictDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictDatumDo) Attrs(attrs ...field.AssignExpr) *dictDatumDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictDatumDo) Assign(attrs ...field.AssignExpr) *dictDatumDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictDatumDo) Joins(fields ...field.RelationField) *dictDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictDatumDo) Preload(fields ...field.RelationField) *dictDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictDatumDo) FirstOrInit() (*fkratos_common_model.DictDatum, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictDatum), nil
	}
}

func (d dictDatumDo) FirstOrCreate() (*fkratos_common_model.DictDatum, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_common_model.DictDatum), nil
	}
}

func (d dictDatumDo) FindByPage(offset int, limit int) (result []*fkratos_common_model.DictDatum, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictDatumDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictDatumDo) Delete(models ...*fkratos_common_model.DictDatum) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictDatumDo) withDO(do gen.Dao) *dictDatumDo {
	d.DO = *do.(*gen.DO)
	return d
}
