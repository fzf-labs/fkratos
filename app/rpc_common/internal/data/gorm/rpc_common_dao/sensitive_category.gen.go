// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package rpc_common_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_common/internal/data/gorm/rpc_common_model"
)

func newSensitiveCategory(db *gorm.DB, opts ...gen.DOOption) sensitiveCategory {
	_sensitiveCategory := sensitiveCategory{}

	_sensitiveCategory.sensitiveCategoryDo.UseDB(db, opts...)
	_sensitiveCategory.sensitiveCategoryDo.UseModel(&rpc_common_model.SensitiveCategory{})

	tableName := _sensitiveCategory.sensitiveCategoryDo.TableName()
	_sensitiveCategory.ALL = field.NewAsterisk(tableName)
	_sensitiveCategory.ID = field.NewString(tableName, "id")
	_sensitiveCategory.Label = field.NewString(tableName, "label")
	_sensitiveCategory.Name = field.NewString(tableName, "name")
	_sensitiveCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_sensitiveCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sensitiveCategory.DeletedAt = field.NewField(tableName, "deleted_at")

	_sensitiveCategory.fillFieldMap()

	return _sensitiveCategory
}

type sensitiveCategory struct {
	sensitiveCategoryDo sensitiveCategoryDo

	ALL       field.Asterisk
	ID        field.String
	Label     field.String // 标签
	Name      field.String // 名称
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sensitiveCategory) Table(newTableName string) *sensitiveCategory {
	s.sensitiveCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensitiveCategory) As(alias string) *sensitiveCategory {
	s.sensitiveCategoryDo.DO = *(s.sensitiveCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensitiveCategory) updateTableName(table string) *sensitiveCategory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Label = field.NewString(table, "label")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sensitiveCategory) WithContext(ctx context.Context) *sensitiveCategoryDo {
	return s.sensitiveCategoryDo.WithContext(ctx)
}

func (s sensitiveCategory) TableName() string { return s.sensitiveCategoryDo.TableName() }

func (s sensitiveCategory) Alias() string { return s.sensitiveCategoryDo.Alias() }

func (s *sensitiveCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensitiveCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["label"] = s.Label
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sensitiveCategory) clone(db *gorm.DB) sensitiveCategory {
	s.sensitiveCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sensitiveCategory) replaceDB(db *gorm.DB) sensitiveCategory {
	s.sensitiveCategoryDo.ReplaceDB(db)
	return s
}

type sensitiveCategoryDo struct{ gen.DO }

func (s sensitiveCategoryDo) Debug() *sensitiveCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s sensitiveCategoryDo) WithContext(ctx context.Context) *sensitiveCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensitiveCategoryDo) ReadDB() *sensitiveCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensitiveCategoryDo) WriteDB() *sensitiveCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensitiveCategoryDo) Session(config *gorm.Session) *sensitiveCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensitiveCategoryDo) Clauses(conds ...clause.Expression) *sensitiveCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensitiveCategoryDo) Returning(value interface{}, columns ...string) *sensitiveCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensitiveCategoryDo) Not(conds ...gen.Condition) *sensitiveCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensitiveCategoryDo) Or(conds ...gen.Condition) *sensitiveCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensitiveCategoryDo) Select(conds ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensitiveCategoryDo) Where(conds ...gen.Condition) *sensitiveCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensitiveCategoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sensitiveCategoryDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sensitiveCategoryDo) Order(conds ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensitiveCategoryDo) Distinct(cols ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensitiveCategoryDo) Omit(cols ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensitiveCategoryDo) Join(table schema.Tabler, on ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensitiveCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensitiveCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensitiveCategoryDo) Group(cols ...field.Expr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensitiveCategoryDo) Having(conds ...gen.Condition) *sensitiveCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensitiveCategoryDo) Limit(limit int) *sensitiveCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensitiveCategoryDo) Offset(offset int) *sensitiveCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensitiveCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sensitiveCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensitiveCategoryDo) Unscoped() *sensitiveCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensitiveCategoryDo) Create(values ...*rpc_common_model.SensitiveCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensitiveCategoryDo) CreateInBatches(values []*rpc_common_model.SensitiveCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensitiveCategoryDo) Save(values ...*rpc_common_model.SensitiveCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensitiveCategoryDo) First() (*rpc_common_model.SensitiveCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_common_model.SensitiveCategory), nil
	}
}

func (s sensitiveCategoryDo) Take() (*rpc_common_model.SensitiveCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_common_model.SensitiveCategory), nil
	}
}

func (s sensitiveCategoryDo) Last() (*rpc_common_model.SensitiveCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_common_model.SensitiveCategory), nil
	}
}

func (s sensitiveCategoryDo) Find() ([]*rpc_common_model.SensitiveCategory, error) {
	result, err := s.DO.Find()
	return result.([]*rpc_common_model.SensitiveCategory), err
}

func (s sensitiveCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*rpc_common_model.SensitiveCategory, err error) {
	buf := make([]*rpc_common_model.SensitiveCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensitiveCategoryDo) FindInBatches(result *[]*rpc_common_model.SensitiveCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensitiveCategoryDo) Attrs(attrs ...field.AssignExpr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensitiveCategoryDo) Assign(attrs ...field.AssignExpr) *sensitiveCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensitiveCategoryDo) Joins(fields ...field.RelationField) *sensitiveCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensitiveCategoryDo) Preload(fields ...field.RelationField) *sensitiveCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensitiveCategoryDo) FirstOrInit() (*rpc_common_model.SensitiveCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_common_model.SensitiveCategory), nil
	}
}

func (s sensitiveCategoryDo) FirstOrCreate() (*rpc_common_model.SensitiveCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*rpc_common_model.SensitiveCategory), nil
	}
}

func (s sensitiveCategoryDo) FindByPage(offset int, limit int) (result []*rpc_common_model.SensitiveCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensitiveCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensitiveCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensitiveCategoryDo) Delete(models ...*rpc_common_model.SensitiveCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensitiveCategoryDo) withDO(do gen.Dao) *sensitiveCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
