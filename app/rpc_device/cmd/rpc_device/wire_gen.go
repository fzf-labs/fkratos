// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fkratos/app/rpc_device/internal/biz"
	"fkratos/app/rpc_device/internal/data"
	"fkratos/app/rpc_device/internal/data/gorm/fkratos_device_repo"
	"fkratos/app/rpc_device/internal/server"
	"fkratos/app/rpc_device/internal/service"
	"fkratos/internal/bootstrap"
	"fkratos/internal/bootstrap/conf"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confBootstrap *conf.Bootstrap, logger log.Logger, registrar registry.Registrar, discovery registry.Discovery) (*kratos.App, func(), error) {
	db := bootstrap.NewGorm(confBootstrap, logger)
	client := bootstrap.NewRueidis(confBootstrap, logger)
	dataData, cleanup, err := data.NewData(confBootstrap, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	idbCache := data.NewDBCache(client)
	deviceRepo := fkratos_device_repo.NewDeviceRepo(db, idbCache)
	bizDeviceRepo := data.NewDeviceRepo(logger, dataData, deviceRepo)
	deviceUseCase := biz.NewDeviceUseCase(logger, bizDeviceRepo)
	deviceService := service.NewDeviceService(logger, deviceUseCase)
	grpcServer := server.NewGRPCServer(confBootstrap, logger, deviceService)
	app := newApp(logger, registrar, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
