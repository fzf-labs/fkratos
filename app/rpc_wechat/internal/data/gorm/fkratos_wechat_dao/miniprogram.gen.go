// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fkratos_wechat_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_wechat/internal/data/gorm/fkratos_wechat_model"
)

func newMiniprogram(db *gorm.DB, opts ...gen.DOOption) miniprogram {
	_miniprogram := miniprogram{}

	_miniprogram.miniprogramDo.UseDB(db, opts...)
	_miniprogram.miniprogramDo.UseModel(&fkratos_wechat_model.Miniprogram{})

	tableName := _miniprogram.miniprogramDo.TableName()
	_miniprogram.ALL = field.NewAsterisk(tableName)
	_miniprogram.ID = field.NewString(tableName, "id")
	_miniprogram.AppID = field.NewString(tableName, "app_id")
	_miniprogram.AppSecret = field.NewString(tableName, "app_secret")
	_miniprogram.AccountID = field.NewString(tableName, "account_id")
	_miniprogram.BusinessID = field.NewString(tableName, "business_id")
	_miniprogram.Name = field.NewString(tableName, "name")
	_miniprogram.ExpiresAccessToken = field.NewString(tableName, "expires_access_token")
	_miniprogram.ExpiresJsapiTicket = field.NewString(tableName, "expires_jsapi_ticket")
	_miniprogram.Qrcode = field.NewString(tableName, "qrcode")
	_miniprogram.Token = field.NewString(tableName, "token")
	_miniprogram.EncodingAseKey = field.NewString(tableName, "encoding_ase_key")
	_miniprogram.Remark = field.NewString(tableName, "remark")
	_miniprogram.CreatedAt = field.NewTime(tableName, "created_at")
	_miniprogram.UpdatedAt = field.NewTime(tableName, "updated_at")
	_miniprogram.DeletedAt = field.NewField(tableName, "deleted_at")

	_miniprogram.fillFieldMap()

	return _miniprogram
}

type miniprogram struct {
	miniprogramDo miniprogramDo

	ALL                field.Asterisk
	ID                 field.String // ID
	AppID              field.String // 开发者ID(AppID)
	AppSecret          field.String // 开发者密码(AppSecret)
	AccountID          field.String // 账号id
	BusinessID         field.String // 业务主账号id
	Name               field.String // 小程序名称
	ExpiresAccessToken field.String // 获取access_token时间
	ExpiresJsapiTicket field.String // 获取jsapi_ticket时间
	Qrcode             field.String // 二维码
	Token              field.String // Token 长度为3-32字符
	EncodingAseKey     field.String // 消息加密密钥由43位字符组成
	Remark             field.String // 备注
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m miniprogram) Table(newTableName string) *miniprogram {
	m.miniprogramDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m miniprogram) As(alias string) *miniprogram {
	m.miniprogramDo.DO = *(m.miniprogramDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *miniprogram) updateTableName(table string) *miniprogram {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.AppID = field.NewString(table, "app_id")
	m.AppSecret = field.NewString(table, "app_secret")
	m.AccountID = field.NewString(table, "account_id")
	m.BusinessID = field.NewString(table, "business_id")
	m.Name = field.NewString(table, "name")
	m.ExpiresAccessToken = field.NewString(table, "expires_access_token")
	m.ExpiresJsapiTicket = field.NewString(table, "expires_jsapi_ticket")
	m.Qrcode = field.NewString(table, "qrcode")
	m.Token = field.NewString(table, "token")
	m.EncodingAseKey = field.NewString(table, "encoding_ase_key")
	m.Remark = field.NewString(table, "remark")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *miniprogram) WithContext(ctx context.Context) *miniprogramDo {
	return m.miniprogramDo.WithContext(ctx)
}

func (m miniprogram) TableName() string { return m.miniprogramDo.TableName() }

func (m miniprogram) Alias() string { return m.miniprogramDo.Alias() }

func (m miniprogram) Columns(cols ...field.Expr) gen.Columns { return m.miniprogramDo.Columns(cols...) }

func (m *miniprogram) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *miniprogram) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.ID
	m.fieldMap["app_id"] = m.AppID
	m.fieldMap["app_secret"] = m.AppSecret
	m.fieldMap["account_id"] = m.AccountID
	m.fieldMap["business_id"] = m.BusinessID
	m.fieldMap["name"] = m.Name
	m.fieldMap["expires_access_token"] = m.ExpiresAccessToken
	m.fieldMap["expires_jsapi_ticket"] = m.ExpiresJsapiTicket
	m.fieldMap["qrcode"] = m.Qrcode
	m.fieldMap["token"] = m.Token
	m.fieldMap["encoding_ase_key"] = m.EncodingAseKey
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m miniprogram) clone(db *gorm.DB) miniprogram {
	m.miniprogramDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m miniprogram) replaceDB(db *gorm.DB) miniprogram {
	m.miniprogramDo.ReplaceDB(db)
	return m
}

type miniprogramDo struct{ gen.DO }

func (m miniprogramDo) Debug() *miniprogramDo {
	return m.withDO(m.DO.Debug())
}

func (m miniprogramDo) WithContext(ctx context.Context) *miniprogramDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m miniprogramDo) ReadDB() *miniprogramDo {
	return m.Clauses(dbresolver.Read)
}

func (m miniprogramDo) WriteDB() *miniprogramDo {
	return m.Clauses(dbresolver.Write)
}

func (m miniprogramDo) Session(config *gorm.Session) *miniprogramDo {
	return m.withDO(m.DO.Session(config))
}

func (m miniprogramDo) Clauses(conds ...clause.Expression) *miniprogramDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m miniprogramDo) Returning(value interface{}, columns ...string) *miniprogramDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m miniprogramDo) Not(conds ...gen.Condition) *miniprogramDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m miniprogramDo) Or(conds ...gen.Condition) *miniprogramDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m miniprogramDo) Select(conds ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m miniprogramDo) Where(conds ...gen.Condition) *miniprogramDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m miniprogramDo) Order(conds ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m miniprogramDo) Distinct(cols ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m miniprogramDo) Omit(cols ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m miniprogramDo) Join(table schema.Tabler, on ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m miniprogramDo) LeftJoin(table schema.Tabler, on ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m miniprogramDo) RightJoin(table schema.Tabler, on ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m miniprogramDo) Group(cols ...field.Expr) *miniprogramDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m miniprogramDo) Having(conds ...gen.Condition) *miniprogramDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m miniprogramDo) Limit(limit int) *miniprogramDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m miniprogramDo) Offset(offset int) *miniprogramDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m miniprogramDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *miniprogramDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m miniprogramDo) Unscoped() *miniprogramDo {
	return m.withDO(m.DO.Unscoped())
}

func (m miniprogramDo) Create(values ...*fkratos_wechat_model.Miniprogram) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m miniprogramDo) CreateInBatches(values []*fkratos_wechat_model.Miniprogram, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m miniprogramDo) Save(values ...*fkratos_wechat_model.Miniprogram) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m miniprogramDo) First() (*fkratos_wechat_model.Miniprogram, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Miniprogram), nil
	}
}

func (m miniprogramDo) Take() (*fkratos_wechat_model.Miniprogram, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Miniprogram), nil
	}
}

func (m miniprogramDo) Last() (*fkratos_wechat_model.Miniprogram, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Miniprogram), nil
	}
}

func (m miniprogramDo) Find() ([]*fkratos_wechat_model.Miniprogram, error) {
	result, err := m.DO.Find()
	return result.([]*fkratos_wechat_model.Miniprogram), err
}

func (m miniprogramDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fkratos_wechat_model.Miniprogram, err error) {
	buf := make([]*fkratos_wechat_model.Miniprogram, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m miniprogramDo) FindInBatches(result *[]*fkratos_wechat_model.Miniprogram, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m miniprogramDo) Attrs(attrs ...field.AssignExpr) *miniprogramDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m miniprogramDo) Assign(attrs ...field.AssignExpr) *miniprogramDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m miniprogramDo) Joins(fields ...field.RelationField) *miniprogramDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m miniprogramDo) Preload(fields ...field.RelationField) *miniprogramDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m miniprogramDo) FirstOrInit() (*fkratos_wechat_model.Miniprogram, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Miniprogram), nil
	}
}

func (m miniprogramDo) FirstOrCreate() (*fkratos_wechat_model.Miniprogram, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Miniprogram), nil
	}
}

func (m miniprogramDo) FindByPage(offset int, limit int) (result []*fkratos_wechat_model.Miniprogram, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m miniprogramDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m miniprogramDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m miniprogramDo) Delete(models ...*fkratos_wechat_model.Miniprogram) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *miniprogramDo) withDO(do gen.Dao) *miniprogramDo {
	m.DO = *do.(*gen.DO)
	return m
}
