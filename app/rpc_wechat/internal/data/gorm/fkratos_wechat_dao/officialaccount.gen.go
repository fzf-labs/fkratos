// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fkratos_wechat_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_wechat/internal/data/gorm/fkratos_wechat_model"
)

func newOfficialaccount(db *gorm.DB, opts ...gen.DOOption) officialaccount {
	_officialaccount := officialaccount{}

	_officialaccount.officialaccountDo.UseDB(db, opts...)
	_officialaccount.officialaccountDo.UseModel(&fkratos_wechat_model.Officialaccount{})

	tableName := _officialaccount.officialaccountDo.TableName()
	_officialaccount.ALL = field.NewAsterisk(tableName)
	_officialaccount.ID = field.NewString(tableName, "id")
	_officialaccount.AppID = field.NewString(tableName, "app_id")
	_officialaccount.AppSecret = field.NewString(tableName, "app_secret")
	_officialaccount.AccountID = field.NewString(tableName, "account_id")
	_officialaccount.BusinessID = field.NewString(tableName, "business_id")
	_officialaccount.Name = field.NewString(tableName, "name")
	_officialaccount.ExpiresAccessToken = field.NewString(tableName, "expires_access_token")
	_officialaccount.ExpiresJsapiTicket = field.NewString(tableName, "expires_jsapi_ticket")
	_officialaccount.AccessToken = field.NewString(tableName, "access_token")
	_officialaccount.JsapiTicket = field.NewString(tableName, "jsapi_ticket")
	_officialaccount.Qrcode = field.NewString(tableName, "qrcode")
	_officialaccount.Token = field.NewString(tableName, "token")
	_officialaccount.EncodingAseKey = field.NewString(tableName, "encoding_ase_key")
	_officialaccount.Remark = field.NewString(tableName, "remark")
	_officialaccount.CreatedAt = field.NewTime(tableName, "created_at")
	_officialaccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_officialaccount.DeletedAt = field.NewField(tableName, "deleted_at")

	_officialaccount.fillFieldMap()

	return _officialaccount
}

type officialaccount struct {
	officialaccountDo officialaccountDo

	ALL                field.Asterisk
	ID                 field.String // ID
	AppID              field.String // 开发者ID(AppID)
	AppSecret          field.String // 开发者密码(AppSecret)
	AccountID          field.String // 账号id
	BusinessID         field.String // 业务主账号id
	Name               field.String // 公众号名称
	ExpiresAccessToken field.String // 获取access_token时间
	ExpiresJsapiTicket field.String // 获取jsapi_ticket时间
	AccessToken        field.String // access_token
	JsapiTicket        field.String // jsapi_ticket
	Qrcode             field.String // 二维码
	Token              field.String // Token 长度为3-32字符
	EncodingAseKey     field.String // 消息加密密钥由43位字符组成
	Remark             field.String // 备注
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (o officialaccount) Table(newTableName string) *officialaccount {
	o.officialaccountDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o officialaccount) As(alias string) *officialaccount {
	o.officialaccountDo.DO = *(o.officialaccountDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *officialaccount) updateTableName(table string) *officialaccount {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.AppID = field.NewString(table, "app_id")
	o.AppSecret = field.NewString(table, "app_secret")
	o.AccountID = field.NewString(table, "account_id")
	o.BusinessID = field.NewString(table, "business_id")
	o.Name = field.NewString(table, "name")
	o.ExpiresAccessToken = field.NewString(table, "expires_access_token")
	o.ExpiresJsapiTicket = field.NewString(table, "expires_jsapi_ticket")
	o.AccessToken = field.NewString(table, "access_token")
	o.JsapiTicket = field.NewString(table, "jsapi_ticket")
	o.Qrcode = field.NewString(table, "qrcode")
	o.Token = field.NewString(table, "token")
	o.EncodingAseKey = field.NewString(table, "encoding_ase_key")
	o.Remark = field.NewString(table, "remark")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")

	o.fillFieldMap()

	return o
}

func (o *officialaccount) WithContext(ctx context.Context) *officialaccountDo {
	return o.officialaccountDo.WithContext(ctx)
}

func (o officialaccount) TableName() string { return o.officialaccountDo.TableName() }

func (o officialaccount) Alias() string { return o.officialaccountDo.Alias() }

func (o officialaccount) Columns(cols ...field.Expr) gen.Columns {
	return o.officialaccountDo.Columns(cols...)
}

func (o *officialaccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *officialaccount) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 17)
	o.fieldMap["id"] = o.ID
	o.fieldMap["app_id"] = o.AppID
	o.fieldMap["app_secret"] = o.AppSecret
	o.fieldMap["account_id"] = o.AccountID
	o.fieldMap["business_id"] = o.BusinessID
	o.fieldMap["name"] = o.Name
	o.fieldMap["expires_access_token"] = o.ExpiresAccessToken
	o.fieldMap["expires_jsapi_ticket"] = o.ExpiresJsapiTicket
	o.fieldMap["access_token"] = o.AccessToken
	o.fieldMap["jsapi_ticket"] = o.JsapiTicket
	o.fieldMap["qrcode"] = o.Qrcode
	o.fieldMap["token"] = o.Token
	o.fieldMap["encoding_ase_key"] = o.EncodingAseKey
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
}

func (o officialaccount) clone(db *gorm.DB) officialaccount {
	o.officialaccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o officialaccount) replaceDB(db *gorm.DB) officialaccount {
	o.officialaccountDo.ReplaceDB(db)
	return o
}

type officialaccountDo struct{ gen.DO }

func (o officialaccountDo) Debug() *officialaccountDo {
	return o.withDO(o.DO.Debug())
}

func (o officialaccountDo) WithContext(ctx context.Context) *officialaccountDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o officialaccountDo) ReadDB() *officialaccountDo {
	return o.Clauses(dbresolver.Read)
}

func (o officialaccountDo) WriteDB() *officialaccountDo {
	return o.Clauses(dbresolver.Write)
}

func (o officialaccountDo) Session(config *gorm.Session) *officialaccountDo {
	return o.withDO(o.DO.Session(config))
}

func (o officialaccountDo) Clauses(conds ...clause.Expression) *officialaccountDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o officialaccountDo) Returning(value interface{}, columns ...string) *officialaccountDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o officialaccountDo) Not(conds ...gen.Condition) *officialaccountDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o officialaccountDo) Or(conds ...gen.Condition) *officialaccountDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o officialaccountDo) Select(conds ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o officialaccountDo) Where(conds ...gen.Condition) *officialaccountDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o officialaccountDo) Order(conds ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o officialaccountDo) Distinct(cols ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o officialaccountDo) Omit(cols ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o officialaccountDo) Join(table schema.Tabler, on ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o officialaccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o officialaccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o officialaccountDo) Group(cols ...field.Expr) *officialaccountDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o officialaccountDo) Having(conds ...gen.Condition) *officialaccountDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o officialaccountDo) Limit(limit int) *officialaccountDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o officialaccountDo) Offset(offset int) *officialaccountDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o officialaccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *officialaccountDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o officialaccountDo) Unscoped() *officialaccountDo {
	return o.withDO(o.DO.Unscoped())
}

func (o officialaccountDo) Create(values ...*fkratos_wechat_model.Officialaccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o officialaccountDo) CreateInBatches(values []*fkratos_wechat_model.Officialaccount, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o officialaccountDo) Save(values ...*fkratos_wechat_model.Officialaccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o officialaccountDo) First() (*fkratos_wechat_model.Officialaccount, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Officialaccount), nil
	}
}

func (o officialaccountDo) Take() (*fkratos_wechat_model.Officialaccount, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Officialaccount), nil
	}
}

func (o officialaccountDo) Last() (*fkratos_wechat_model.Officialaccount, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Officialaccount), nil
	}
}

func (o officialaccountDo) Find() ([]*fkratos_wechat_model.Officialaccount, error) {
	result, err := o.DO.Find()
	return result.([]*fkratos_wechat_model.Officialaccount), err
}

func (o officialaccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fkratos_wechat_model.Officialaccount, err error) {
	buf := make([]*fkratos_wechat_model.Officialaccount, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o officialaccountDo) FindInBatches(result *[]*fkratos_wechat_model.Officialaccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o officialaccountDo) Attrs(attrs ...field.AssignExpr) *officialaccountDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o officialaccountDo) Assign(attrs ...field.AssignExpr) *officialaccountDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o officialaccountDo) Joins(fields ...field.RelationField) *officialaccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o officialaccountDo) Preload(fields ...field.RelationField) *officialaccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o officialaccountDo) FirstOrInit() (*fkratos_wechat_model.Officialaccount, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Officialaccount), nil
	}
}

func (o officialaccountDo) FirstOrCreate() (*fkratos_wechat_model.Officialaccount, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wechat_model.Officialaccount), nil
	}
}

func (o officialaccountDo) FindByPage(offset int, limit int) (result []*fkratos_wechat_model.Officialaccount, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o officialaccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o officialaccountDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o officialaccountDo) Delete(models ...*fkratos_wechat_model.Officialaccount) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *officialaccountDo) withDO(do gen.Dao) *officialaccountDo {
	o.DO = *do.(*gen.DO)
	return o
}
