// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fkratos_wallet_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fkratos/app/rpc_wallet/internal/data/gorm/fkratos_wallet_model"
)

func newPay(db *gorm.DB, opts ...gen.DOOption) pay {
	_pay := pay{}

	_pay.payDo.UseDB(db, opts...)
	_pay.payDo.UseModel(&fkratos_wallet_model.Pay{})

	tableName := _pay.payDo.TableName()
	_pay.ALL = field.NewAsterisk(tableName)
	_pay.ID = field.NewString(tableName, "id")
	_pay.UID = field.NewString(tableName, "uid")
	_pay.Status = field.NewInt16(tableName, "status")
	_pay.CreatedAt = field.NewTime(tableName, "created_at")
	_pay.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pay.DeletedAt = field.NewField(tableName, "deleted_at")

	_pay.fillFieldMap()

	return _pay
}

type pay struct {
	payDo payDo

	ALL       field.Asterisk
	ID        field.String // Id
	UID       field.String // uid
	Status    field.Int16  // 状态
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p pay) Table(newTableName string) *pay {
	p.payDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pay) As(alias string) *pay {
	p.payDo.DO = *(p.payDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pay) updateTableName(table string) *pay {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.UID = field.NewString(table, "uid")
	p.Status = field.NewInt16(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *pay) WithContext(ctx context.Context) *payDo { return p.payDo.WithContext(ctx) }

func (p pay) TableName() string { return p.payDo.TableName() }

func (p pay) Alias() string { return p.payDo.Alias() }

func (p pay) Columns(cols ...field.Expr) gen.Columns { return p.payDo.Columns(cols...) }

func (p *pay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pay) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["uid"] = p.UID
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p pay) clone(db *gorm.DB) pay {
	p.payDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pay) replaceDB(db *gorm.DB) pay {
	p.payDo.ReplaceDB(db)
	return p
}

type payDo struct{ gen.DO }

func (p payDo) Debug() *payDo {
	return p.withDO(p.DO.Debug())
}

func (p payDo) WithContext(ctx context.Context) *payDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p payDo) ReadDB() *payDo {
	return p.Clauses(dbresolver.Read)
}

func (p payDo) WriteDB() *payDo {
	return p.Clauses(dbresolver.Write)
}

func (p payDo) Session(config *gorm.Session) *payDo {
	return p.withDO(p.DO.Session(config))
}

func (p payDo) Clauses(conds ...clause.Expression) *payDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p payDo) Returning(value interface{}, columns ...string) *payDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p payDo) Not(conds ...gen.Condition) *payDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p payDo) Or(conds ...gen.Condition) *payDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p payDo) Select(conds ...field.Expr) *payDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p payDo) Where(conds ...gen.Condition) *payDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p payDo) Order(conds ...field.Expr) *payDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p payDo) Distinct(cols ...field.Expr) *payDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p payDo) Omit(cols ...field.Expr) *payDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p payDo) Join(table schema.Tabler, on ...field.Expr) *payDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p payDo) LeftJoin(table schema.Tabler, on ...field.Expr) *payDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p payDo) RightJoin(table schema.Tabler, on ...field.Expr) *payDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p payDo) Group(cols ...field.Expr) *payDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p payDo) Having(conds ...gen.Condition) *payDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p payDo) Limit(limit int) *payDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p payDo) Offset(offset int) *payDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p payDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *payDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p payDo) Unscoped() *payDo {
	return p.withDO(p.DO.Unscoped())
}

func (p payDo) Create(values ...*fkratos_wallet_model.Pay) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p payDo) CreateInBatches(values []*fkratos_wallet_model.Pay, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p payDo) Save(values ...*fkratos_wallet_model.Pay) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p payDo) First() (*fkratos_wallet_model.Pay, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wallet_model.Pay), nil
	}
}

func (p payDo) Take() (*fkratos_wallet_model.Pay, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wallet_model.Pay), nil
	}
}

func (p payDo) Last() (*fkratos_wallet_model.Pay, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wallet_model.Pay), nil
	}
}

func (p payDo) Find() ([]*fkratos_wallet_model.Pay, error) {
	result, err := p.DO.Find()
	return result.([]*fkratos_wallet_model.Pay), err
}

func (p payDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fkratos_wallet_model.Pay, err error) {
	buf := make([]*fkratos_wallet_model.Pay, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p payDo) FindInBatches(result *[]*fkratos_wallet_model.Pay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p payDo) Attrs(attrs ...field.AssignExpr) *payDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p payDo) Assign(attrs ...field.AssignExpr) *payDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p payDo) Joins(fields ...field.RelationField) *payDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p payDo) Preload(fields ...field.RelationField) *payDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p payDo) FirstOrInit() (*fkratos_wallet_model.Pay, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wallet_model.Pay), nil
	}
}

func (p payDo) FirstOrCreate() (*fkratos_wallet_model.Pay, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fkratos_wallet_model.Pay), nil
	}
}

func (p payDo) FindByPage(offset int, limit int) (result []*fkratos_wallet_model.Pay, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p payDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p payDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p payDo) Delete(models ...*fkratos_wallet_model.Pay) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *payDo) withDO(do gen.Dao) *payDo {
	p.DO = *do.(*gen.DO)
	return p
}
