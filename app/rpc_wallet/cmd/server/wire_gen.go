// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fkratos/app/rpc_wallet/internal/biz"
	"fkratos/app/rpc_wallet/internal/data"
	"fkratos/app/rpc_wallet/internal/server"
	"fkratos/app/rpc_wallet/internal/service"
	"github.com/fzf-labs/fkratos-contrib/api/conf/v1"
	"github.com/fzf-labs/fkratos-contrib/cache"
	"github.com/fzf-labs/fkratos-contrib/db"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *v1.Bootstrap, logger log.Logger, registrar registry.Registrar, discovery registry.Discovery) (*kratos.App, func(), error) {
	gormDB := db.NewGorm(bootstrap, logger)
	client := cache.NewRueidis(bootstrap, logger)
	idbCache := data.NewDBCache(client)
	dataData, cleanup, err := data.NewData(bootstrap, logger, gormDB, client, idbCache)
	if err != nil {
		return nil, nil, err
	}
	payRepo := data.NewPayRepo(logger, dataData)
	payUseCase := biz.NewPayUseCase(logger, payRepo)
	payService := service.NewPayService(logger, payUseCase)
	walletRepo := data.NewWalletRepo(logger, dataData)
	walletUseCase := biz.NewWalletUseCase(logger, walletRepo)
	walletService := service.NewWalletService(logger, walletUseCase)
	grpcServer := server.NewGRPCServer(bootstrap, logger, payService, walletService)
	app := newApp(logger, registrar, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
