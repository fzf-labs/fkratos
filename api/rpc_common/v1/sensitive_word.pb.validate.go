// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_common/v1/sensitive_word.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SensitiveCategoryInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryInfoMultiError, or nil if none found.
func (m *SensitiveCategoryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Label

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SensitiveCategoryInfoMultiError(errors)
	}

	return nil
}

// SensitiveCategoryInfoMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryInfo.ValidateAll() if the designated
// constraints aren't met.
type SensitiveCategoryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryInfoMultiError) AllErrors() []error { return m }

// SensitiveCategoryInfoValidationError is the validation error returned by
// SensitiveCategoryInfo.Validate if the designated constraints aren't met.
type SensitiveCategoryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryInfoValidationError) ErrorName() string {
	return "SensitiveCategoryInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryInfoValidationError{}

// Validate checks the field values on SensitiveCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryListReqMultiError, or nil if none found.
func (m *SensitiveCategoryListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveCategoryListReqMultiError(errors)
	}

	return nil
}

// SensitiveCategoryListReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryListReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveCategoryListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryListReqMultiError) AllErrors() []error { return m }

// SensitiveCategoryListReqValidationError is the validation error returned by
// SensitiveCategoryListReq.Validate if the designated constraints aren't met.
type SensitiveCategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryListReqValidationError) ErrorName() string {
	return "SensitiveCategoryListReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryListReqValidationError{}

// Validate checks the field values on SensitiveCategoryListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryListReplyMultiError, or nil if none found.
func (m *SensitiveCategoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SensitiveCategoryListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SensitiveCategoryListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SensitiveCategoryListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SensitiveCategoryListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SensitiveCategoryListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SensitiveCategoryListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SensitiveCategoryListReplyMultiError(errors)
	}

	return nil
}

// SensitiveCategoryListReplyMultiError is an error wrapping multiple
// validation errors returned by SensitiveCategoryListReply.ValidateAll() if
// the designated constraints aren't met.
type SensitiveCategoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryListReplyMultiError) AllErrors() []error { return m }

// SensitiveCategoryListReplyValidationError is the validation error returned
// by SensitiveCategoryListReply.Validate if the designated constraints aren't met.
type SensitiveCategoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryListReplyValidationError) ErrorName() string {
	return "SensitiveCategoryListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryListReplyValidationError{}

// Validate checks the field values on SensitiveCategoryInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryInfoReqMultiError, or nil if none found.
func (m *SensitiveCategoryInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SensitiveCategoryInfoReqMultiError(errors)
	}

	return nil
}

// SensitiveCategoryInfoReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveCategoryInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryInfoReqMultiError) AllErrors() []error { return m }

// SensitiveCategoryInfoReqValidationError is the validation error returned by
// SensitiveCategoryInfoReq.Validate if the designated constraints aren't met.
type SensitiveCategoryInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryInfoReqValidationError) ErrorName() string {
	return "SensitiveCategoryInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryInfoReqValidationError{}

// Validate checks the field values on SensitiveCategoryInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryInfoReplyMultiError, or nil if none found.
func (m *SensitiveCategoryInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SensitiveCategoryInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SensitiveCategoryInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SensitiveCategoryInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SensitiveCategoryInfoReplyMultiError(errors)
	}

	return nil
}

// SensitiveCategoryInfoReplyMultiError is an error wrapping multiple
// validation errors returned by SensitiveCategoryInfoReply.ValidateAll() if
// the designated constraints aren't met.
type SensitiveCategoryInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryInfoReplyMultiError) AllErrors() []error { return m }

// SensitiveCategoryInfoReplyValidationError is the validation error returned
// by SensitiveCategoryInfoReply.Validate if the designated constraints aren't met.
type SensitiveCategoryInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryInfoReplyValidationError) ErrorName() string {
	return "SensitiveCategoryInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryInfoReplyValidationError{}

// Validate checks the field values on SensitiveCategoryStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryStoreReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryStoreReqMultiError, or nil if none found.
func (m *SensitiveCategoryStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Label

	// no validation rules for Name

	if len(errors) > 0 {
		return SensitiveCategoryStoreReqMultiError(errors)
	}

	return nil
}

// SensitiveCategoryStoreReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryStoreReq.ValidateAll() if the
// designated constraints aren't met.
type SensitiveCategoryStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryStoreReqMultiError) AllErrors() []error { return m }

// SensitiveCategoryStoreReqValidationError is the validation error returned by
// SensitiveCategoryStoreReq.Validate if the designated constraints aren't met.
type SensitiveCategoryStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryStoreReqValidationError) ErrorName() string {
	return "SensitiveCategoryStoreReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryStoreReqValidationError{}

// Validate checks the field values on SensitiveCategoryStoreReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryStoreReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryStoreReplyMultiError, or nil if none found.
func (m *SensitiveCategoryStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveCategoryStoreReplyMultiError(errors)
	}

	return nil
}

// SensitiveCategoryStoreReplyMultiError is an error wrapping multiple
// validation errors returned by SensitiveCategoryStoreReply.ValidateAll() if
// the designated constraints aren't met.
type SensitiveCategoryStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryStoreReplyMultiError) AllErrors() []error { return m }

// SensitiveCategoryStoreReplyValidationError is the validation error returned
// by SensitiveCategoryStoreReply.Validate if the designated constraints
// aren't met.
type SensitiveCategoryStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryStoreReplyValidationError) ErrorName() string {
	return "SensitiveCategoryStoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryStoreReplyValidationError{}

// Validate checks the field values on SensitiveCategoryDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryDelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryDelReqMultiError, or nil if none found.
func (m *SensitiveCategoryDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveCategoryDelReqMultiError(errors)
	}

	return nil
}

// SensitiveCategoryDelReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryDelReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveCategoryDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryDelReqMultiError) AllErrors() []error { return m }

// SensitiveCategoryDelReqValidationError is the validation error returned by
// SensitiveCategoryDelReq.Validate if the designated constraints aren't met.
type SensitiveCategoryDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryDelReqValidationError) ErrorName() string {
	return "SensitiveCategoryDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryDelReqValidationError{}

// Validate checks the field values on SensitiveCategoryDelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveCategoryDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveCategoryDelReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveCategoryDelReplyMultiError, or nil if none found.
func (m *SensitiveCategoryDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveCategoryDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveCategoryDelReplyMultiError(errors)
	}

	return nil
}

// SensitiveCategoryDelReplyMultiError is an error wrapping multiple validation
// errors returned by SensitiveCategoryDelReply.ValidateAll() if the
// designated constraints aren't met.
type SensitiveCategoryDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveCategoryDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveCategoryDelReplyMultiError) AllErrors() []error { return m }

// SensitiveCategoryDelReplyValidationError is the validation error returned by
// SensitiveCategoryDelReply.Validate if the designated constraints aren't met.
type SensitiveCategoryDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveCategoryDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveCategoryDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveCategoryDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveCategoryDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveCategoryDelReplyValidationError) ErrorName() string {
	return "SensitiveCategoryDelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveCategoryDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveCategoryDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveCategoryDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveCategoryDelReplyValidationError{}

// Validate checks the field values on SensitiveWordInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordInfoMultiError, or nil if none found.
func (m *SensitiveWordInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CategoryID

	// no validation rules for Word

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SensitiveWordInfoMultiError(errors)
	}

	return nil
}

// SensitiveWordInfoMultiError is an error wrapping multiple validation errors
// returned by SensitiveWordInfo.ValidateAll() if the designated constraints
// aren't met.
type SensitiveWordInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordInfoMultiError) AllErrors() []error { return m }

// SensitiveWordInfoValidationError is the validation error returned by
// SensitiveWordInfo.Validate if the designated constraints aren't met.
type SensitiveWordInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordInfoValidationError) ErrorName() string {
	return "SensitiveWordInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordInfoValidationError{}

// Validate checks the field values on SensitiveWordListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordListReqMultiError, or nil if none found.
func (m *SensitiveWordListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordListReqMultiError(errors)
	}

	return nil
}

// SensitiveWordListReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordListReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordListReqMultiError) AllErrors() []error { return m }

// SensitiveWordListReqValidationError is the validation error returned by
// SensitiveWordListReq.Validate if the designated constraints aren't met.
type SensitiveWordListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordListReqValidationError) ErrorName() string {
	return "SensitiveWordListReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordListReqValidationError{}

// Validate checks the field values on SensitiveWordListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordListReplyMultiError, or nil if none found.
func (m *SensitiveWordListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SensitiveWordListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SensitiveWordListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SensitiveWordListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SensitiveWordListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SensitiveWordListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SensitiveWordListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SensitiveWordListReplyMultiError(errors)
	}

	return nil
}

// SensitiveWordListReplyMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordListReply.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordListReplyMultiError) AllErrors() []error { return m }

// SensitiveWordListReplyValidationError is the validation error returned by
// SensitiveWordListReply.Validate if the designated constraints aren't met.
type SensitiveWordListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordListReplyValidationError) ErrorName() string {
	return "SensitiveWordListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordListReplyValidationError{}

// Validate checks the field values on SensitiveWordInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordInfoReqMultiError, or nil if none found.
func (m *SensitiveWordInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SensitiveWordInfoReqMultiError(errors)
	}

	return nil
}

// SensitiveWordInfoReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordInfoReqMultiError) AllErrors() []error { return m }

// SensitiveWordInfoReqValidationError is the validation error returned by
// SensitiveWordInfoReq.Validate if the designated constraints aren't met.
type SensitiveWordInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordInfoReqValidationError) ErrorName() string {
	return "SensitiveWordInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordInfoReqValidationError{}

// Validate checks the field values on SensitiveWordInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordInfoReplyMultiError, or nil if none found.
func (m *SensitiveWordInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SensitiveWordInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SensitiveWordInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SensitiveWordInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SensitiveWordInfoReplyMultiError(errors)
	}

	return nil
}

// SensitiveWordInfoReplyMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordInfoReply.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordInfoReplyMultiError) AllErrors() []error { return m }

// SensitiveWordInfoReplyValidationError is the validation error returned by
// SensitiveWordInfoReply.Validate if the designated constraints aren't met.
type SensitiveWordInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordInfoReplyValidationError) ErrorName() string {
	return "SensitiveWordInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordInfoReplyValidationError{}

// Validate checks the field values on SensitiveWordStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordStoreReqMultiError, or nil if none found.
func (m *SensitiveWordStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CategoryID

	// no validation rules for Word

	if len(errors) > 0 {
		return SensitiveWordStoreReqMultiError(errors)
	}

	return nil
}

// SensitiveWordStoreReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordStoreReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordStoreReqMultiError) AllErrors() []error { return m }

// SensitiveWordStoreReqValidationError is the validation error returned by
// SensitiveWordStoreReq.Validate if the designated constraints aren't met.
type SensitiveWordStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordStoreReqValidationError) ErrorName() string {
	return "SensitiveWordStoreReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordStoreReqValidationError{}

// Validate checks the field values on SensitiveWordStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordStoreReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordStoreReplyMultiError, or nil if none found.
func (m *SensitiveWordStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordStoreReplyMultiError(errors)
	}

	return nil
}

// SensitiveWordStoreReplyMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordStoreReply.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordStoreReplyMultiError) AllErrors() []error { return m }

// SensitiveWordStoreReplyValidationError is the validation error returned by
// SensitiveWordStoreReply.Validate if the designated constraints aren't met.
type SensitiveWordStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordStoreReplyValidationError) ErrorName() string {
	return "SensitiveWordStoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordStoreReplyValidationError{}

// Validate checks the field values on SensitiveWordDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordDelReqMultiError, or nil if none found.
func (m *SensitiveWordDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordDelReqMultiError(errors)
	}

	return nil
}

// SensitiveWordDelReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordDelReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordDelReqMultiError) AllErrors() []error { return m }

// SensitiveWordDelReqValidationError is the validation error returned by
// SensitiveWordDelReq.Validate if the designated constraints aren't met.
type SensitiveWordDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordDelReqValidationError) ErrorName() string {
	return "SensitiveWordDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordDelReqValidationError{}

// Validate checks the field values on SensitiveWordDelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordDelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordDelReplyMultiError, or nil if none found.
func (m *SensitiveWordDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordDelReplyMultiError(errors)
	}

	return nil
}

// SensitiveWordDelReplyMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordDelReply.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordDelReplyMultiError) AllErrors() []error { return m }

// SensitiveWordDelReplyValidationError is the validation error returned by
// SensitiveWordDelReply.Validate if the designated constraints aren't met.
type SensitiveWordDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordDelReplyValidationError) ErrorName() string {
	return "SensitiveWordDelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordDelReplyValidationError{}
