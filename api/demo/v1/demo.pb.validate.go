// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: demo/v1/demo.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DemoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DemoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DemoInfoMultiError, or nil
// if none found.
func (m *DemoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DemoInfoMultiError(errors)
	}

	return nil
}

// DemoInfoMultiError is an error wrapping multiple validation errors returned
// by DemoInfo.ValidateAll() if the designated constraints aren't met.
type DemoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoInfoMultiError) AllErrors() []error { return m }

// DemoInfoValidationError is the validation error returned by
// DemoInfo.Validate if the designated constraints aren't met.
type DemoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoInfoValidationError) ErrorName() string { return "DemoInfoValidationError" }

// Error satisfies the builtin error interface
func (e DemoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoInfoValidationError{}

// Validate checks the field values on CreateDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDemoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDemoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateDemoReqMultiError, or
// nil if none found.
func (m *CreateDemoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDemoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDemoReqMultiError(errors)
	}

	return nil
}

// CreateDemoReqMultiError is an error wrapping multiple validation errors
// returned by CreateDemoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDemoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDemoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDemoReqMultiError) AllErrors() []error { return m }

// CreateDemoReqValidationError is the validation error returned by
// CreateDemoReq.Validate if the designated constraints aren't met.
type CreateDemoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDemoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDemoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDemoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDemoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDemoReqValidationError) ErrorName() string { return "CreateDemoReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDemoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDemoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDemoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDemoReqValidationError{}

// Validate checks the field values on CreateDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDemoReplyMultiError, or nil if none found.
func (m *CreateDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDemoReplyMultiError(errors)
	}

	return nil
}

// CreateDemoReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDemoReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDemoReplyMultiError) AllErrors() []error { return m }

// CreateDemoReplyValidationError is the validation error returned by
// CreateDemoReply.Validate if the designated constraints aren't met.
type CreateDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDemoReplyValidationError) ErrorName() string { return "CreateDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDemoReplyValidationError{}

// Validate checks the field values on UpdateDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDemoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDemoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateDemoReqMultiError, or
// nil if none found.
func (m *UpdateDemoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDemoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDemoReqValidationError{
					field:  "Demo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDemoReqValidationError{
					field:  "Demo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDemoReqValidationError{
				field:  "Demo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDemoReqMultiError(errors)
	}

	return nil
}

// UpdateDemoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDemoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDemoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDemoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDemoReqMultiError) AllErrors() []error { return m }

// UpdateDemoReqValidationError is the validation error returned by
// UpdateDemoReq.Validate if the designated constraints aren't met.
type UpdateDemoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDemoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDemoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDemoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDemoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDemoReqValidationError) ErrorName() string { return "UpdateDemoReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDemoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDemoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDemoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDemoReqValidationError{}

// Validate checks the field values on UpdateDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDemoReplyMultiError, or nil if none found.
func (m *UpdateDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDemoReplyMultiError(errors)
	}

	return nil
}

// UpdateDemoReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDemoReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDemoReplyMultiError) AllErrors() []error { return m }

// UpdateDemoReplyValidationError is the validation error returned by
// UpdateDemoReply.Validate if the designated constraints aren't met.
type UpdateDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDemoReplyValidationError) ErrorName() string { return "UpdateDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDemoReplyValidationError{}

// Validate checks the field values on DeleteDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteDemoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDemoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteDemoReqMultiError, or
// nil if none found.
func (m *DeleteDemoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDemoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDemoReqMultiError(errors)
	}

	return nil
}

// DeleteDemoReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDemoReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDemoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDemoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDemoReqMultiError) AllErrors() []error { return m }

// DeleteDemoReqValidationError is the validation error returned by
// DeleteDemoReq.Validate if the designated constraints aren't met.
type DeleteDemoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDemoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDemoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDemoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDemoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDemoReqValidationError) ErrorName() string { return "DeleteDemoReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDemoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDemoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDemoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDemoReqValidationError{}

// Validate checks the field values on DeleteDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDemoReplyMultiError, or nil if none found.
func (m *DeleteDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDemoReplyMultiError(errors)
	}

	return nil
}

// DeleteDemoReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDemoReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDemoReplyMultiError) AllErrors() []error { return m }

// DeleteDemoReplyValidationError is the validation error returned by
// DeleteDemoReply.Validate if the designated constraints aren't met.
type DeleteDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDemoReplyValidationError) ErrorName() string { return "DeleteDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDemoReplyValidationError{}

// Validate checks the field values on GetDemoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDemoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDemoReqMultiError, or
// nil if none found.
func (m *GetDemoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDemoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDemoReqMultiError(errors)
	}

	return nil
}

// GetDemoReqMultiError is an error wrapping multiple validation errors
// returned by GetDemoReq.ValidateAll() if the designated constraints aren't met.
type GetDemoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDemoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDemoReqMultiError) AllErrors() []error { return m }

// GetDemoReqValidationError is the validation error returned by
// GetDemoReq.Validate if the designated constraints aren't met.
type GetDemoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDemoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDemoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDemoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDemoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDemoReqValidationError) ErrorName() string { return "GetDemoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDemoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDemoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDemoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDemoReqValidationError{}

// Validate checks the field values on GetDemoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDemoReplyMultiError, or
// nil if none found.
func (m *GetDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDemoReplyMultiError(errors)
	}

	return nil
}

// GetDemoReplyMultiError is an error wrapping multiple validation errors
// returned by GetDemoReply.ValidateAll() if the designated constraints aren't met.
type GetDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDemoReplyMultiError) AllErrors() []error { return m }

// GetDemoReplyValidationError is the validation error returned by
// GetDemoReply.Validate if the designated constraints aren't met.
type GetDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDemoReplyValidationError) ErrorName() string { return "GetDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDemoReplyValidationError{}

// Validate checks the field values on ListDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDemoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDemoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDemoReqMultiError, or
// nil if none found.
func (m *ListDemoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDemoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDemoReqMultiError(errors)
	}

	return nil
}

// ListDemoReqMultiError is an error wrapping multiple validation errors
// returned by ListDemoReq.ValidateAll() if the designated constraints aren't met.
type ListDemoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDemoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDemoReqMultiError) AllErrors() []error { return m }

// ListDemoReqValidationError is the validation error returned by
// ListDemoReq.Validate if the designated constraints aren't met.
type ListDemoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDemoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDemoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDemoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDemoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDemoReqValidationError) ErrorName() string { return "ListDemoReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDemoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDemoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDemoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDemoReqValidationError{}

// Validate checks the field values on ListDemoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDemoReplyMultiError, or
// nil if none found.
func (m *ListDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDemoReplyMultiError(errors)
	}

	return nil
}

// ListDemoReplyMultiError is an error wrapping multiple validation errors
// returned by ListDemoReply.ValidateAll() if the designated constraints
// aren't met.
type ListDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDemoReplyMultiError) AllErrors() []error { return m }

// ListDemoReplyValidationError is the validation error returned by
// ListDemoReply.Validate if the designated constraints aren't met.
type ListDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDemoReplyValidationError) ErrorName() string { return "ListDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDemoReplyValidationError{}
