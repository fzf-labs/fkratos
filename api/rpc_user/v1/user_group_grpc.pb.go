// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_user/v1/user_group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserGroup_UserGroupList_FullMethodName  = "/api.rpc_user.v1.UserGroup/UserGroupList"
	UserGroup_UserGroupStore_FullMethodName = "/api.rpc_user.v1.UserGroup/UserGroupStore"
	UserGroup_UserGroupDel_FullMethodName   = "/api.rpc_user.v1.UserGroup/UserGroupDel"
)

// UserGroupClient is the client API for UserGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGroupClient interface {
	// 用户分组-列表
	UserGroupList(ctx context.Context, in *UserGroupListReq, opts ...grpc.CallOption) (*UserGroupListReply, error)
	// 用户分组-保存
	UserGroupStore(ctx context.Context, in *UserGroupStoreReq, opts ...grpc.CallOption) (*UserGroupStoreReply, error)
	// 用户分组-删除
	UserGroupDel(ctx context.Context, in *UserGroupDelReq, opts ...grpc.CallOption) (*UserGroupDelReply, error)
}

type userGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGroupClient(cc grpc.ClientConnInterface) UserGroupClient {
	return &userGroupClient{cc}
}

func (c *userGroupClient) UserGroupList(ctx context.Context, in *UserGroupListReq, opts ...grpc.CallOption) (*UserGroupListReply, error) {
	out := new(UserGroupListReply)
	err := c.cc.Invoke(ctx, UserGroup_UserGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupClient) UserGroupStore(ctx context.Context, in *UserGroupStoreReq, opts ...grpc.CallOption) (*UserGroupStoreReply, error) {
	out := new(UserGroupStoreReply)
	err := c.cc.Invoke(ctx, UserGroup_UserGroupStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupClient) UserGroupDel(ctx context.Context, in *UserGroupDelReq, opts ...grpc.CallOption) (*UserGroupDelReply, error) {
	out := new(UserGroupDelReply)
	err := c.cc.Invoke(ctx, UserGroup_UserGroupDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupServer is the server API for UserGroup service.
// All implementations must embed UnimplementedUserGroupServer
// for forward compatibility
type UserGroupServer interface {
	// 用户分组-列表
	UserGroupList(context.Context, *UserGroupListReq) (*UserGroupListReply, error)
	// 用户分组-保存
	UserGroupStore(context.Context, *UserGroupStoreReq) (*UserGroupStoreReply, error)
	// 用户分组-删除
	UserGroupDel(context.Context, *UserGroupDelReq) (*UserGroupDelReply, error)
	mustEmbedUnimplementedUserGroupServer()
}

// UnimplementedUserGroupServer must be embedded to have forward compatible implementations.
type UnimplementedUserGroupServer struct {
}

func (UnimplementedUserGroupServer) UserGroupList(context.Context, *UserGroupListReq) (*UserGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroupList not implemented")
}
func (UnimplementedUserGroupServer) UserGroupStore(context.Context, *UserGroupStoreReq) (*UserGroupStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroupStore not implemented")
}
func (UnimplementedUserGroupServer) UserGroupDel(context.Context, *UserGroupDelReq) (*UserGroupDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroupDel not implemented")
}
func (UnimplementedUserGroupServer) mustEmbedUnimplementedUserGroupServer() {}

// UnsafeUserGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGroupServer will
// result in compilation errors.
type UnsafeUserGroupServer interface {
	mustEmbedUnimplementedUserGroupServer()
}

func RegisterUserGroupServer(s grpc.ServiceRegistrar, srv UserGroupServer) {
	s.RegisterService(&UserGroup_ServiceDesc, srv)
}

func _UserGroup_UserGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServer).UserGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroup_UserGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServer).UserGroupList(ctx, req.(*UserGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroup_UserGroupStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServer).UserGroupStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroup_UserGroupStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServer).UserGroupStore(ctx, req.(*UserGroupStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroup_UserGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServer).UserGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroup_UserGroupDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServer).UserGroupDel(ctx, req.(*UserGroupDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGroup_ServiceDesc is the grpc.ServiceDesc for UserGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_user.v1.UserGroup",
	HandlerType: (*UserGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGroupList",
			Handler:    _UserGroup_UserGroupList_Handler,
		},
		{
			MethodName: "UserGroupStore",
			Handler:    _UserGroup_UserGroupStore_Handler,
		},
		{
			MethodName: "UserGroupDel",
			Handler:    _UserGroup_UserGroupDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_user/v1/user_group.proto",
}
