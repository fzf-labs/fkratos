// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for Username

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for Sex

	// no validation rules for Avatar

	// no validation rules for Profile

	// no validation rules for Other

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListReqMultiError, or
// nil if none found.
func (m *UserListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserListReqMultiError(errors)
	}

	return nil
}

// UserListReqMultiError is an error wrapping multiple validation errors
// returned by UserListReq.ValidateAll() if the designated constraints aren't met.
type UserListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListReqMultiError) AllErrors() []error { return m }

// UserListReqValidationError is the validation error returned by
// UserListReq.Validate if the designated constraints aren't met.
type UserListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListReqValidationError) ErrorName() string { return "UserListReqValidationError" }

// Error satisfies the builtin error interface
func (e UserListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListReqValidationError{}

// Validate checks the field values on UserListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListReplyMultiError, or
// nil if none found.
func (m *UserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserListReplyMultiError(errors)
	}

	return nil
}

// UserListReplyMultiError is an error wrapping multiple validation errors
// returned by UserListReply.ValidateAll() if the designated constraints
// aren't met.
type UserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListReplyMultiError) AllErrors() []error { return m }

// UserListReplyValidationError is the validation error returned by
// UserListReply.Validate if the designated constraints aren't met.
type UserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListReplyValidationError) ErrorName() string { return "UserListReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListReplyValidationError{}

// Validate checks the field values on UserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReqMultiError, or
// nil if none found.
func (m *UserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return UserInfoReqMultiError(errors)
	}

	return nil
}

// UserInfoReqMultiError is an error wrapping multiple validation errors
// returned by UserInfoReq.ValidateAll() if the designated constraints aren't met.
type UserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReqMultiError) AllErrors() []error { return m }

// UserInfoReqValidationError is the validation error returned by
// UserInfoReq.Validate if the designated constraints aren't met.
type UserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReqValidationError) ErrorName() string { return "UserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReqValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on UserStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserStoreReqMultiError, or
// nil if none found.
func (m *UserStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Nickname

	// no validation rules for Sex

	// no validation rules for Avatar

	// no validation rules for Profile

	// no validation rules for Status

	// no validation rules for UserGroupID

	if len(errors) > 0 {
		return UserStoreReqMultiError(errors)
	}

	return nil
}

// UserStoreReqMultiError is an error wrapping multiple validation errors
// returned by UserStoreReq.ValidateAll() if the designated constraints aren't met.
type UserStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStoreReqMultiError) AllErrors() []error { return m }

// UserStoreReqValidationError is the validation error returned by
// UserStoreReq.Validate if the designated constraints aren't met.
type UserStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStoreReqValidationError) ErrorName() string { return "UserStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e UserStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStoreReqValidationError{}

// Validate checks the field values on UserStoreReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserStoreReplyMultiError,
// or nil if none found.
func (m *UserStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserStoreReplyMultiError(errors)
	}

	return nil
}

// UserStoreReplyMultiError is an error wrapping multiple validation errors
// returned by UserStoreReply.ValidateAll() if the designated constraints
// aren't met.
type UserStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStoreReplyMultiError) AllErrors() []error { return m }

// UserStoreReplyValidationError is the validation error returned by
// UserStoreReply.Validate if the designated constraints aren't met.
type UserStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStoreReplyValidationError) ErrorName() string { return "UserStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStoreReplyValidationError{}

// Validate checks the field values on UserDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelReqMultiError, or
// nil if none found.
func (m *UserDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDelReqMultiError(errors)
	}

	return nil
}

// UserDelReqMultiError is an error wrapping multiple validation errors
// returned by UserDelReq.ValidateAll() if the designated constraints aren't met.
type UserDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelReqMultiError) AllErrors() []error { return m }

// UserDelReqValidationError is the validation error returned by
// UserDelReq.Validate if the designated constraints aren't met.
type UserDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelReqValidationError) ErrorName() string { return "UserDelReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelReqValidationError{}

// Validate checks the field values on UserDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelReplyMultiError, or
// nil if none found.
func (m *UserDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDelReplyMultiError(errors)
	}

	return nil
}

// UserDelReplyMultiError is an error wrapping multiple validation errors
// returned by UserDelReply.ValidateAll() if the designated constraints aren't met.
type UserDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelReplyMultiError) AllErrors() []error { return m }

// UserDelReplyValidationError is the validation error returned by
// UserDelReply.Validate if the designated constraints aren't met.
type UserDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelReplyValidationError) ErrorName() string { return "UserDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelReplyValidationError{}
