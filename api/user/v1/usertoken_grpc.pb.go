// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user/v1/usertoken.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Usertoken_CreateUsertoken_FullMethodName = "/api.user.v1.Usertoken/CreateUsertoken"
	Usertoken_UpdateUsertoken_FullMethodName = "/api.user.v1.Usertoken/UpdateUsertoken"
	Usertoken_DeleteUsertoken_FullMethodName = "/api.user.v1.Usertoken/DeleteUsertoken"
	Usertoken_GetUsertoken_FullMethodName    = "/api.user.v1.Usertoken/GetUsertoken"
	Usertoken_ListUsertoken_FullMethodName   = "/api.user.v1.Usertoken/ListUsertoken"
)

// UsertokenClient is the client API for Usertoken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsertokenClient interface {
	CreateUsertoken(ctx context.Context, in *CreateUsertokenRequest, opts ...grpc.CallOption) (*CreateUsertokenReply, error)
	UpdateUsertoken(ctx context.Context, in *UpdateUsertokenRequest, opts ...grpc.CallOption) (*UpdateUsertokenReply, error)
	DeleteUsertoken(ctx context.Context, in *DeleteUsertokenRequest, opts ...grpc.CallOption) (*DeleteUsertokenReply, error)
	GetUsertoken(ctx context.Context, in *GetUsertokenRequest, opts ...grpc.CallOption) (*GetUsertokenReply, error)
	ListUsertoken(ctx context.Context, in *ListUsertokenRequest, opts ...grpc.CallOption) (*ListUsertokenReply, error)
}

type usertokenClient struct {
	cc grpc.ClientConnInterface
}

func NewUsertokenClient(cc grpc.ClientConnInterface) UsertokenClient {
	return &usertokenClient{cc}
}

func (c *usertokenClient) CreateUsertoken(ctx context.Context, in *CreateUsertokenRequest, opts ...grpc.CallOption) (*CreateUsertokenReply, error) {
	out := new(CreateUsertokenReply)
	err := c.cc.Invoke(ctx, Usertoken_CreateUsertoken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usertokenClient) UpdateUsertoken(ctx context.Context, in *UpdateUsertokenRequest, opts ...grpc.CallOption) (*UpdateUsertokenReply, error) {
	out := new(UpdateUsertokenReply)
	err := c.cc.Invoke(ctx, Usertoken_UpdateUsertoken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usertokenClient) DeleteUsertoken(ctx context.Context, in *DeleteUsertokenRequest, opts ...grpc.CallOption) (*DeleteUsertokenReply, error) {
	out := new(DeleteUsertokenReply)
	err := c.cc.Invoke(ctx, Usertoken_DeleteUsertoken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usertokenClient) GetUsertoken(ctx context.Context, in *GetUsertokenRequest, opts ...grpc.CallOption) (*GetUsertokenReply, error) {
	out := new(GetUsertokenReply)
	err := c.cc.Invoke(ctx, Usertoken_GetUsertoken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usertokenClient) ListUsertoken(ctx context.Context, in *ListUsertokenRequest, opts ...grpc.CallOption) (*ListUsertokenReply, error) {
	out := new(ListUsertokenReply)
	err := c.cc.Invoke(ctx, Usertoken_ListUsertoken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsertokenServer is the server API for Usertoken service.
// All implementations must embed UnimplementedUsertokenServer
// for forward compatibility
type UsertokenServer interface {
	CreateUsertoken(context.Context, *CreateUsertokenRequest) (*CreateUsertokenReply, error)
	UpdateUsertoken(context.Context, *UpdateUsertokenRequest) (*UpdateUsertokenReply, error)
	DeleteUsertoken(context.Context, *DeleteUsertokenRequest) (*DeleteUsertokenReply, error)
	GetUsertoken(context.Context, *GetUsertokenRequest) (*GetUsertokenReply, error)
	ListUsertoken(context.Context, *ListUsertokenRequest) (*ListUsertokenReply, error)
	mustEmbedUnimplementedUsertokenServer()
}

// UnimplementedUsertokenServer must be embedded to have forward compatible implementations.
type UnimplementedUsertokenServer struct {
}

func (UnimplementedUsertokenServer) CreateUsertoken(context.Context, *CreateUsertokenRequest) (*CreateUsertokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsertoken not implemented")
}
func (UnimplementedUsertokenServer) UpdateUsertoken(context.Context, *UpdateUsertokenRequest) (*UpdateUsertokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsertoken not implemented")
}
func (UnimplementedUsertokenServer) DeleteUsertoken(context.Context, *DeleteUsertokenRequest) (*DeleteUsertokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsertoken not implemented")
}
func (UnimplementedUsertokenServer) GetUsertoken(context.Context, *GetUsertokenRequest) (*GetUsertokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsertoken not implemented")
}
func (UnimplementedUsertokenServer) ListUsertoken(context.Context, *ListUsertokenRequest) (*ListUsertokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsertoken not implemented")
}
func (UnimplementedUsertokenServer) mustEmbedUnimplementedUsertokenServer() {}

// UnsafeUsertokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsertokenServer will
// result in compilation errors.
type UnsafeUsertokenServer interface {
	mustEmbedUnimplementedUsertokenServer()
}

func RegisterUsertokenServer(s grpc.ServiceRegistrar, srv UsertokenServer) {
	s.RegisterService(&Usertoken_ServiceDesc, srv)
}

func _Usertoken_CreateUsertoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsertokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsertokenServer).CreateUsertoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usertoken_CreateUsertoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsertokenServer).CreateUsertoken(ctx, req.(*CreateUsertokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usertoken_UpdateUsertoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsertokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsertokenServer).UpdateUsertoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usertoken_UpdateUsertoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsertokenServer).UpdateUsertoken(ctx, req.(*UpdateUsertokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usertoken_DeleteUsertoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsertokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsertokenServer).DeleteUsertoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usertoken_DeleteUsertoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsertokenServer).DeleteUsertoken(ctx, req.(*DeleteUsertokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usertoken_GetUsertoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsertokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsertokenServer).GetUsertoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usertoken_GetUsertoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsertokenServer).GetUsertoken(ctx, req.(*GetUsertokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usertoken_ListUsertoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsertokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsertokenServer).ListUsertoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usertoken_ListUsertoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsertokenServer).ListUsertoken(ctx, req.(*ListUsertokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Usertoken_ServiceDesc is the grpc.ServiceDesc for Usertoken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usertoken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.Usertoken",
	HandlerType: (*UsertokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsertoken",
			Handler:    _Usertoken_CreateUsertoken_Handler,
		},
		{
			MethodName: "UpdateUsertoken",
			Handler:    _Usertoken_UpdateUsertoken_Handler,
		},
		{
			MethodName: "DeleteUsertoken",
			Handler:    _Usertoken_DeleteUsertoken_Handler,
		},
		{
			MethodName: "GetUsertoken",
			Handler:    _Usertoken_GetUsertoken_Handler,
		},
		{
			MethodName: "ListUsertoken",
			Handler:    _Usertoken_ListUsertoken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/usertoken.proto",
}
