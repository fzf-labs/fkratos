// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: bff_admin/v1/sys.proto

package v1

import (
	context "context"
	paginator "fkratos/api/paginator"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysDashboardSpeech = "/api.bff_admin.v1.Sys/DashboardSpeech"
const OperationSysSysAdminGenerateAvatar = "/api.bff_admin.v1.Sys/SysAdminGenerateAvatar"
const OperationSysSysAdminInfo = "/api.bff_admin.v1.Sys/SysAdminInfo"
const OperationSysSysAdminInfoUpdate = "/api.bff_admin.v1.Sys/SysAdminInfoUpdate"
const OperationSysSysAdminPermission = "/api.bff_admin.v1.Sys/SysAdminPermission"
const OperationSysSysApiDel = "/api.bff_admin.v1.Sys/SysApiDel"
const OperationSysSysApiList = "/api.bff_admin.v1.Sys/SysApiList"
const OperationSysSysApiStore = "/api.bff_admin.v1.Sys/SysApiStore"
const OperationSysSysAuthLogin = "/api.bff_admin.v1.Sys/SysAuthLogin"
const OperationSysSysAuthLoginCaptcha = "/api.bff_admin.v1.Sys/SysAuthLoginCaptcha"
const OperationSysSysAuthLogout = "/api.bff_admin.v1.Sys/SysAuthLogout"
const OperationSysSysDeptDel = "/api.bff_admin.v1.Sys/SysDeptDel"
const OperationSysSysDeptInfo = "/api.bff_admin.v1.Sys/SysDeptInfo"
const OperationSysSysDeptList = "/api.bff_admin.v1.Sys/SysDeptList"
const OperationSysSysDeptStore = "/api.bff_admin.v1.Sys/SysDeptStore"
const OperationSysSysJobDel = "/api.bff_admin.v1.Sys/SysJobDel"
const OperationSysSysJobInfo = "/api.bff_admin.v1.Sys/SysJobInfo"
const OperationSysSysJobList = "/api.bff_admin.v1.Sys/SysJobList"
const OperationSysSysJobStore = "/api.bff_admin.v1.Sys/SysJobStore"
const OperationSysSysLogInfo = "/api.bff_admin.v1.Sys/SysLogInfo"
const OperationSysSysLogList = "/api.bff_admin.v1.Sys/SysLogList"
const OperationSysSysLogStore = "/api.bff_admin.v1.Sys/SysLogStore"
const OperationSysSysManageDel = "/api.bff_admin.v1.Sys/SysManageDel"
const OperationSysSysManageInfo = "/api.bff_admin.v1.Sys/SysManageInfo"
const OperationSysSysManageList = "/api.bff_admin.v1.Sys/SysManageList"
const OperationSysSysManageStore = "/api.bff_admin.v1.Sys/SysManageStore"
const OperationSysSysPermissionDel = "/api.bff_admin.v1.Sys/SysPermissionDel"
const OperationSysSysPermissionInfo = "/api.bff_admin.v1.Sys/SysPermissionInfo"
const OperationSysSysPermissionList = "/api.bff_admin.v1.Sys/SysPermissionList"
const OperationSysSysPermissionStatus = "/api.bff_admin.v1.Sys/SysPermissionStatus"
const OperationSysSysPermissionStore = "/api.bff_admin.v1.Sys/SysPermissionStore"
const OperationSysSysRoleDel = "/api.bff_admin.v1.Sys/SysRoleDel"
const OperationSysSysRoleInfo = "/api.bff_admin.v1.Sys/SysRoleInfo"
const OperationSysSysRoleList = "/api.bff_admin.v1.Sys/SysRoleList"
const OperationSysSysRoleStore = "/api.bff_admin.v1.Sys/SysRoleStore"

type SysHTTPServer interface {
	// DashboardSpeech仪表盘-一言
	DashboardSpeech(context.Context, *DashboardSpeechReq) (*DashboardSpeechReply, error)
	// SysAdminGenerateAvatar管理员-生成头像
	SysAdminGenerateAvatar(context.Context, *SysAdminGenerateAvatarReq) (*SysAdminGenerateAvatarReply, error)
	// SysAdminInfo管理员-个人信息
	SysAdminInfo(context.Context, *SysAdminInfoReq) (*SysAdminInfoReply, error)
	// SysAdminInfoUpdate管理员-个人信息更新
	SysAdminInfoUpdate(context.Context, *SysAdminInfoUpdateReq) (*SysAdminInfoUpdateReply, error)
	// SysAdminPermission管理员-查询权限
	SysAdminPermission(context.Context, *SysAdminPermissionReq) (*SysAdminPermissionReply, error)
	// SysApiDelApi-删除
	SysApiDel(context.Context, *SysApiDelReq) (*SysApiDelReply, error)
	// SysApiListApi-列表
	SysApiList(context.Context, *SysApiListReq) (*SysApiListReply, error)
	// SysApiStoreApi-保存
	SysApiStore(context.Context, *SysApiStoreReq) (*SysApiStoreReply, error)
	// SysAuthLoginAuth-登录
	SysAuthLogin(context.Context, *SysAuthLoginReq) (*SysAuthLoginReply, error)
	// SysAuthLoginCaptchaAuth-验证码
	SysAuthLoginCaptcha(context.Context, *SysAuthLoginCaptchaReq) (*SysAuthLoginCaptchaReply, error)
	// SysAuthLogoutAuth-退出
	SysAuthLogout(context.Context, *SysAuthLogoutReq) (*SysAuthLogoutReply, error)
	// SysDeptDel部门-删除
	SysDeptDel(context.Context, *SysDeptDelReq) (*SysDeptDelReply, error)
	// SysDeptInfo部门-单个部门信息
	SysDeptInfo(context.Context, *SysDeptInfoReq) (*SysDeptInfoReply, error)
	// SysDeptList部门-列表
	SysDeptList(context.Context, *SysDeptListReq) (*SysDeptListReply, error)
	// SysDeptStore部门-保存
	SysDeptStore(context.Context, *SysDeptStoreReq) (*SysDeptStoreReply, error)
	// SysJobDel岗位-删除
	SysJobDel(context.Context, *SysJobDelReq) (*SysJobDelReply, error)
	// SysJobInfo岗位-单个岗位信息
	SysJobInfo(context.Context, *SysJobInfoReq) (*SysJobInfoReply, error)
	// SysJobList岗位-列表
	SysJobList(context.Context, *paginator.PaginatorReq) (*SysJobListReply, error)
	// SysJobStore岗位-保存
	SysJobStore(context.Context, *SysJobStoreReq) (*SysJobStoreReply, error)
	// SysLogInfo日志-信息
	SysLogInfo(context.Context, *SysLogInfoReq) (*SysLogInfoResp, error)
	// SysLogList日志-列表
	SysLogList(context.Context, *paginator.PaginatorReq) (*SysLogListResp, error)
	// SysLogStore日志-保存
	SysLogStore(context.Context, *SysLogStoreReq) (*SysLogStoreResp, error)
	// SysManageDel管理员-删除
	SysManageDel(context.Context, *SysManageDelReq) (*SysManageDelReply, error)
	// SysManageInfo管理员-信息
	SysManageInfo(context.Context, *SysManageInfoReq) (*SysManageInfoReply, error)
	// SysManageList管理员-列表
	SysManageList(context.Context, *paginator.PaginatorReq) (*SysManageListReply, error)
	// SysManageStore管理员-保存
	SysManageStore(context.Context, *SysManageStoreReq) (*SysManageStoreReply, error)
	// SysPermissionDel权限-删除
	SysPermissionDel(context.Context, *SysPermissionDelReq) (*SysPermissionDelResp, error)
	// SysPermissionInfo权限-单个权限信息
	SysPermissionInfo(context.Context, *SysPermissionInfoReq) (*SysPermissionInfoResp, error)
	// SysPermissionList权限-列表
	SysPermissionList(context.Context, *SysPermissionListReq) (*SysPermissionListResp, error)
	// SysPermissionStatus权限-修改状态
	SysPermissionStatus(context.Context, *SysPermissionStatusReq) (*SysPermissionStatusResp, error)
	// SysPermissionStore权限-保存
	SysPermissionStore(context.Context, *SysPermissionStoreReq) (*SysPermissionStoreResp, error)
	// SysRoleDel角色-删除
	SysRoleDel(context.Context, *SysRoleDelReq) (*SysRoleDelResp, error)
	// SysRoleInfo角色-信息
	SysRoleInfo(context.Context, *SysRoleInfoReq) (*SysRoleInfoResp, error)
	// SysRoleList角色-列表
	SysRoleList(context.Context, *SysRoleListReq) (*SysRoleListResp, error)
	// SysRoleStore角色-保存
	SysRoleStore(context.Context, *SysRoleStoreReq) (*SysRoleStoreResp, error)
}

func RegisterSysHTTPServer(s *http.Server, srv SysHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/sys/dashboard_speech", _Sys_DashboardSpeech0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_auth_login_captcha", _Sys_SysAuthLoginCaptcha0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_auth_login", _Sys_SysAuthLogin0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_auth_logout", _Sys_SysAuthLogout0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_admin_info", _Sys_SysAdminInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_admin_info_update", _Sys_SysAdminInfoUpdate0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_admin_generate_avatar", _Sys_SysAdminGenerateAvatar0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_admin_permission", _Sys_SysAdminPermission0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_manage_list", _Sys_SysManageList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_manage_info", _Sys_SysManageInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_manage_store", _Sys_SysManageStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_manage_del", _Sys_SysManageDel0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_api_list", _Sys_SysApiList0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_api_store", _Sys_SysApiStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_api_del", _Sys_SysApiDel0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_dept_list", _Sys_SysDeptList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_dept_info", _Sys_SysDeptInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_dept_store", _Sys_SysDeptStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_dept_del", _Sys_SysDeptDel0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_job_list", _Sys_SysJobList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_job_info", _Sys_SysJobInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_job_store", _Sys_SysJobStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_job_del", _Sys_SysJobDel0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_log_list", _Sys_SysLogList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_log_info", _Sys_SysLogInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_log_store", _Sys_SysLogStore0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_permission_list", _Sys_SysPermissionList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_permission_info", _Sys_SysPermissionInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_permission_store", _Sys_SysPermissionStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_permission_del", _Sys_SysPermissionDel0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_permission_status", _Sys_SysPermissionStatus0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_role_list", _Sys_SysRoleList0_HTTP_Handler(srv))
	r.GET("/admin/v1/sys/sys_role_info", _Sys_SysRoleInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_role_store", _Sys_SysRoleStore0_HTTP_Handler(srv))
	r.POST("/admin/v1/sys/sys_role_del", _Sys_SysRoleDel0_HTTP_Handler(srv))
}

func _Sys_DashboardSpeech0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardSpeechReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDashboardSpeech)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardSpeech(ctx, req.(*DashboardSpeechReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardSpeechReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAuthLoginCaptcha0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAuthLoginCaptchaReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAuthLoginCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAuthLoginCaptcha(ctx, req.(*SysAuthLoginCaptchaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAuthLoginCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAuthLogin0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAuthLoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAuthLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAuthLogin(ctx, req.(*SysAuthLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAuthLoginReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAuthLogout0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAuthLogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAuthLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAuthLogout(ctx, req.(*SysAuthLogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAuthLogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAdminInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAdminInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAdminInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAdminInfo(ctx, req.(*SysAdminInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAdminInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAdminInfoUpdate0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAdminInfoUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAdminInfoUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAdminInfoUpdate(ctx, req.(*SysAdminInfoUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAdminInfoUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAdminGenerateAvatar0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAdminGenerateAvatarReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAdminGenerateAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAdminGenerateAvatar(ctx, req.(*SysAdminGenerateAvatarReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAdminGenerateAvatarReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysAdminPermission0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysAdminPermissionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysAdminPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysAdminPermission(ctx, req.(*SysAdminPermissionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysAdminPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysManageList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in paginator.PaginatorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysManageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysManageList(ctx, req.(*paginator.PaginatorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysManageListReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysManageInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysManageInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysManageInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysManageInfo(ctx, req.(*SysManageInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysManageInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysManageStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysManageStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysManageStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysManageStore(ctx, req.(*SysManageStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysManageStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysManageDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysManageDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysManageDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysManageDel(ctx, req.(*SysManageDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysManageDelReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysApiList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysApiList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysApiList(ctx, req.(*SysApiListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiListReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysApiStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysApiStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysApiStore(ctx, req.(*SysApiStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysApiDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysApiDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysApiDel(ctx, req.(*SysApiDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiDelReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysDeptList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysDeptList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysDeptList(ctx, req.(*SysDeptListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptListReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysDeptInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysDeptInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysDeptInfo(ctx, req.(*SysDeptInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysDeptStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysDeptStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysDeptStore(ctx, req.(*SysDeptStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysDeptDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysDeptDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysDeptDel(ctx, req.(*SysDeptDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptDelReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysJobList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in paginator.PaginatorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysJobList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysJobList(ctx, req.(*paginator.PaginatorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysJobListReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysJobInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysJobInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysJobInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysJobInfo(ctx, req.(*SysJobInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysJobInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysJobStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysJobStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysJobStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysJobStore(ctx, req.(*SysJobStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysJobStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysJobDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysJobDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysJobDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysJobDel(ctx, req.(*SysJobDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysJobDelReply)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysLogList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in paginator.PaginatorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysLogList(ctx, req.(*paginator.PaginatorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysLogListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysLogInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysLogInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysLogInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysLogInfo(ctx, req.(*SysLogInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysLogInfoResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysLogStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysLogStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysLogStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysLogStore(ctx, req.(*SysLogStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysLogStoreResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysPermissionList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPermissionListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysPermissionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysPermissionList(ctx, req.(*SysPermissionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPermissionListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysPermissionInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPermissionInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysPermissionInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysPermissionInfo(ctx, req.(*SysPermissionInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPermissionInfoResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysPermissionStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPermissionStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysPermissionStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysPermissionStore(ctx, req.(*SysPermissionStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPermissionStoreResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysPermissionDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPermissionDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysPermissionDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysPermissionDel(ctx, req.(*SysPermissionDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPermissionDelResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysPermissionStatus0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPermissionStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysPermissionStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysPermissionStatus(ctx, req.(*SysPermissionStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPermissionStatusResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysRoleList0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysRoleList(ctx, req.(*SysRoleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleListResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysRoleInfo0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysRoleInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysRoleInfo(ctx, req.(*SysRoleInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleInfoResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysRoleStore0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysRoleStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysRoleStore(ctx, req.(*SysRoleStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleStoreResp)
		return ctx.Result(200, reply)
	}
}

func _Sys_SysRoleDel0_HTTP_Handler(srv SysHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysSysRoleDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysRoleDel(ctx, req.(*SysRoleDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleDelResp)
		return ctx.Result(200, reply)
	}
}

type SysHTTPClient interface {
	DashboardSpeech(ctx context.Context, req *DashboardSpeechReq, opts ...http.CallOption) (rsp *DashboardSpeechReply, err error)
	SysAdminGenerateAvatar(ctx context.Context, req *SysAdminGenerateAvatarReq, opts ...http.CallOption) (rsp *SysAdminGenerateAvatarReply, err error)
	SysAdminInfo(ctx context.Context, req *SysAdminInfoReq, opts ...http.CallOption) (rsp *SysAdminInfoReply, err error)
	SysAdminInfoUpdate(ctx context.Context, req *SysAdminInfoUpdateReq, opts ...http.CallOption) (rsp *SysAdminInfoUpdateReply, err error)
	SysAdminPermission(ctx context.Context, req *SysAdminPermissionReq, opts ...http.CallOption) (rsp *SysAdminPermissionReply, err error)
	SysApiDel(ctx context.Context, req *SysApiDelReq, opts ...http.CallOption) (rsp *SysApiDelReply, err error)
	SysApiList(ctx context.Context, req *SysApiListReq, opts ...http.CallOption) (rsp *SysApiListReply, err error)
	SysApiStore(ctx context.Context, req *SysApiStoreReq, opts ...http.CallOption) (rsp *SysApiStoreReply, err error)
	SysAuthLogin(ctx context.Context, req *SysAuthLoginReq, opts ...http.CallOption) (rsp *SysAuthLoginReply, err error)
	SysAuthLoginCaptcha(ctx context.Context, req *SysAuthLoginCaptchaReq, opts ...http.CallOption) (rsp *SysAuthLoginCaptchaReply, err error)
	SysAuthLogout(ctx context.Context, req *SysAuthLogoutReq, opts ...http.CallOption) (rsp *SysAuthLogoutReply, err error)
	SysDeptDel(ctx context.Context, req *SysDeptDelReq, opts ...http.CallOption) (rsp *SysDeptDelReply, err error)
	SysDeptInfo(ctx context.Context, req *SysDeptInfoReq, opts ...http.CallOption) (rsp *SysDeptInfoReply, err error)
	SysDeptList(ctx context.Context, req *SysDeptListReq, opts ...http.CallOption) (rsp *SysDeptListReply, err error)
	SysDeptStore(ctx context.Context, req *SysDeptStoreReq, opts ...http.CallOption) (rsp *SysDeptStoreReply, err error)
	SysJobDel(ctx context.Context, req *SysJobDelReq, opts ...http.CallOption) (rsp *SysJobDelReply, err error)
	SysJobInfo(ctx context.Context, req *SysJobInfoReq, opts ...http.CallOption) (rsp *SysJobInfoReply, err error)
	SysJobList(ctx context.Context, req *paginator.PaginatorReq, opts ...http.CallOption) (rsp *SysJobListReply, err error)
	SysJobStore(ctx context.Context, req *SysJobStoreReq, opts ...http.CallOption) (rsp *SysJobStoreReply, err error)
	SysLogInfo(ctx context.Context, req *SysLogInfoReq, opts ...http.CallOption) (rsp *SysLogInfoResp, err error)
	SysLogList(ctx context.Context, req *paginator.PaginatorReq, opts ...http.CallOption) (rsp *SysLogListResp, err error)
	SysLogStore(ctx context.Context, req *SysLogStoreReq, opts ...http.CallOption) (rsp *SysLogStoreResp, err error)
	SysManageDel(ctx context.Context, req *SysManageDelReq, opts ...http.CallOption) (rsp *SysManageDelReply, err error)
	SysManageInfo(ctx context.Context, req *SysManageInfoReq, opts ...http.CallOption) (rsp *SysManageInfoReply, err error)
	SysManageList(ctx context.Context, req *paginator.PaginatorReq, opts ...http.CallOption) (rsp *SysManageListReply, err error)
	SysManageStore(ctx context.Context, req *SysManageStoreReq, opts ...http.CallOption) (rsp *SysManageStoreReply, err error)
	SysPermissionDel(ctx context.Context, req *SysPermissionDelReq, opts ...http.CallOption) (rsp *SysPermissionDelResp, err error)
	SysPermissionInfo(ctx context.Context, req *SysPermissionInfoReq, opts ...http.CallOption) (rsp *SysPermissionInfoResp, err error)
	SysPermissionList(ctx context.Context, req *SysPermissionListReq, opts ...http.CallOption) (rsp *SysPermissionListResp, err error)
	SysPermissionStatus(ctx context.Context, req *SysPermissionStatusReq, opts ...http.CallOption) (rsp *SysPermissionStatusResp, err error)
	SysPermissionStore(ctx context.Context, req *SysPermissionStoreReq, opts ...http.CallOption) (rsp *SysPermissionStoreResp, err error)
	SysRoleDel(ctx context.Context, req *SysRoleDelReq, opts ...http.CallOption) (rsp *SysRoleDelResp, err error)
	SysRoleInfo(ctx context.Context, req *SysRoleInfoReq, opts ...http.CallOption) (rsp *SysRoleInfoResp, err error)
	SysRoleList(ctx context.Context, req *SysRoleListReq, opts ...http.CallOption) (rsp *SysRoleListResp, err error)
	SysRoleStore(ctx context.Context, req *SysRoleStoreReq, opts ...http.CallOption) (rsp *SysRoleStoreResp, err error)
}

type SysHTTPClientImpl struct {
	cc *http.Client
}

func NewSysHTTPClient(client *http.Client) SysHTTPClient {
	return &SysHTTPClientImpl{client}
}

func (c *SysHTTPClientImpl) DashboardSpeech(ctx context.Context, in *DashboardSpeechReq, opts ...http.CallOption) (*DashboardSpeechReply, error) {
	var out DashboardSpeechReply
	pattern := "/admin/v1/sys/dashboard_speech"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDashboardSpeech))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAdminGenerateAvatar(ctx context.Context, in *SysAdminGenerateAvatarReq, opts ...http.CallOption) (*SysAdminGenerateAvatarReply, error) {
	var out SysAdminGenerateAvatarReply
	pattern := "/admin/v1/sys/sys_admin_generate_avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysAdminGenerateAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAdminInfo(ctx context.Context, in *SysAdminInfoReq, opts ...http.CallOption) (*SysAdminInfoReply, error) {
	var out SysAdminInfoReply
	pattern := "/admin/v1/sys/sys_admin_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysAdminInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAdminInfoUpdate(ctx context.Context, in *SysAdminInfoUpdateReq, opts ...http.CallOption) (*SysAdminInfoUpdateReply, error) {
	var out SysAdminInfoUpdateReply
	pattern := "/admin/v1/sys/sys_admin_info_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysAdminInfoUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAdminPermission(ctx context.Context, in *SysAdminPermissionReq, opts ...http.CallOption) (*SysAdminPermissionReply, error) {
	var out SysAdminPermissionReply
	pattern := "/admin/v1/sys/sys_admin_permission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysAdminPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysApiDel(ctx context.Context, in *SysApiDelReq, opts ...http.CallOption) (*SysApiDelReply, error) {
	var out SysApiDelReply
	pattern := "/admin/v1/sys/sys_api_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysApiDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysApiList(ctx context.Context, in *SysApiListReq, opts ...http.CallOption) (*SysApiListReply, error) {
	var out SysApiListReply
	pattern := "/admin/v1/sys/sys_api_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysApiList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysApiStore(ctx context.Context, in *SysApiStoreReq, opts ...http.CallOption) (*SysApiStoreReply, error) {
	var out SysApiStoreReply
	pattern := "/admin/v1/sys/sys_api_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysApiStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAuthLogin(ctx context.Context, in *SysAuthLoginReq, opts ...http.CallOption) (*SysAuthLoginReply, error) {
	var out SysAuthLoginReply
	pattern := "/admin/v1/sys/sys_auth_login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysAuthLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAuthLoginCaptcha(ctx context.Context, in *SysAuthLoginCaptchaReq, opts ...http.CallOption) (*SysAuthLoginCaptchaReply, error) {
	var out SysAuthLoginCaptchaReply
	pattern := "/admin/v1/sys/sys_auth_login_captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysAuthLoginCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysAuthLogout(ctx context.Context, in *SysAuthLogoutReq, opts ...http.CallOption) (*SysAuthLogoutReply, error) {
	var out SysAuthLogoutReply
	pattern := "/admin/v1/sys/sys_auth_logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysAuthLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysDeptDel(ctx context.Context, in *SysDeptDelReq, opts ...http.CallOption) (*SysDeptDelReply, error) {
	var out SysDeptDelReply
	pattern := "/admin/v1/sys/sys_dept_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysDeptDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysDeptInfo(ctx context.Context, in *SysDeptInfoReq, opts ...http.CallOption) (*SysDeptInfoReply, error) {
	var out SysDeptInfoReply
	pattern := "/admin/v1/sys/sys_dept_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysDeptInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysDeptList(ctx context.Context, in *SysDeptListReq, opts ...http.CallOption) (*SysDeptListReply, error) {
	var out SysDeptListReply
	pattern := "/admin/v1/sys/sys_dept_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysDeptList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysDeptStore(ctx context.Context, in *SysDeptStoreReq, opts ...http.CallOption) (*SysDeptStoreReply, error) {
	var out SysDeptStoreReply
	pattern := "/admin/v1/sys/sys_dept_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysDeptStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysJobDel(ctx context.Context, in *SysJobDelReq, opts ...http.CallOption) (*SysJobDelReply, error) {
	var out SysJobDelReply
	pattern := "/admin/v1/sys/sys_job_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysJobDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysJobInfo(ctx context.Context, in *SysJobInfoReq, opts ...http.CallOption) (*SysJobInfoReply, error) {
	var out SysJobInfoReply
	pattern := "/admin/v1/sys/sys_job_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysJobInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysJobList(ctx context.Context, in *paginator.PaginatorReq, opts ...http.CallOption) (*SysJobListReply, error) {
	var out SysJobListReply
	pattern := "/admin/v1/sys/sys_job_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysJobList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysJobStore(ctx context.Context, in *SysJobStoreReq, opts ...http.CallOption) (*SysJobStoreReply, error) {
	var out SysJobStoreReply
	pattern := "/admin/v1/sys/sys_job_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysJobStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysLogInfo(ctx context.Context, in *SysLogInfoReq, opts ...http.CallOption) (*SysLogInfoResp, error) {
	var out SysLogInfoResp
	pattern := "/admin/v1/sys/sys_log_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysLogInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysLogList(ctx context.Context, in *paginator.PaginatorReq, opts ...http.CallOption) (*SysLogListResp, error) {
	var out SysLogListResp
	pattern := "/admin/v1/sys/sys_log_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysLogStore(ctx context.Context, in *SysLogStoreReq, opts ...http.CallOption) (*SysLogStoreResp, error) {
	var out SysLogStoreResp
	pattern := "/admin/v1/sys/sys_log_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysLogStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysManageDel(ctx context.Context, in *SysManageDelReq, opts ...http.CallOption) (*SysManageDelReply, error) {
	var out SysManageDelReply
	pattern := "/admin/v1/sys/sys_manage_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysManageDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysManageInfo(ctx context.Context, in *SysManageInfoReq, opts ...http.CallOption) (*SysManageInfoReply, error) {
	var out SysManageInfoReply
	pattern := "/admin/v1/sys/sys_manage_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysManageInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysManageList(ctx context.Context, in *paginator.PaginatorReq, opts ...http.CallOption) (*SysManageListReply, error) {
	var out SysManageListReply
	pattern := "/admin/v1/sys/sys_manage_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysManageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysManageStore(ctx context.Context, in *SysManageStoreReq, opts ...http.CallOption) (*SysManageStoreReply, error) {
	var out SysManageStoreReply
	pattern := "/admin/v1/sys/sys_manage_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysManageStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysPermissionDel(ctx context.Context, in *SysPermissionDelReq, opts ...http.CallOption) (*SysPermissionDelResp, error) {
	var out SysPermissionDelResp
	pattern := "/admin/v1/sys/sys_permission_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysPermissionDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysPermissionInfo(ctx context.Context, in *SysPermissionInfoReq, opts ...http.CallOption) (*SysPermissionInfoResp, error) {
	var out SysPermissionInfoResp
	pattern := "/admin/v1/sys/sys_permission_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysPermissionInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysPermissionList(ctx context.Context, in *SysPermissionListReq, opts ...http.CallOption) (*SysPermissionListResp, error) {
	var out SysPermissionListResp
	pattern := "/admin/v1/sys/sys_permission_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysPermissionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysPermissionStatus(ctx context.Context, in *SysPermissionStatusReq, opts ...http.CallOption) (*SysPermissionStatusResp, error) {
	var out SysPermissionStatusResp
	pattern := "/admin/v1/sys/sys_permission_status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysPermissionStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysPermissionStore(ctx context.Context, in *SysPermissionStoreReq, opts ...http.CallOption) (*SysPermissionStoreResp, error) {
	var out SysPermissionStoreResp
	pattern := "/admin/v1/sys/sys_permission_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysPermissionStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysRoleDel(ctx context.Context, in *SysRoleDelReq, opts ...http.CallOption) (*SysRoleDelResp, error) {
	var out SysRoleDelResp
	pattern := "/admin/v1/sys/sys_role_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysRoleDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysRoleInfo(ctx context.Context, in *SysRoleInfoReq, opts ...http.CallOption) (*SysRoleInfoResp, error) {
	var out SysRoleInfoResp
	pattern := "/admin/v1/sys/sys_role_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysRoleInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysRoleList(ctx context.Context, in *SysRoleListReq, opts ...http.CallOption) (*SysRoleListResp, error) {
	var out SysRoleListResp
	pattern := "/admin/v1/sys/sys_role_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysSysRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysHTTPClientImpl) SysRoleStore(ctx context.Context, in *SysRoleStoreReq, opts ...http.CallOption) (*SysRoleStoreResp, error) {
	var out SysRoleStoreResp
	pattern := "/admin/v1/sys/sys_role_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysSysRoleStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
