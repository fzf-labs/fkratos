// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: bff_admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminCreateAdmin = "/api.Admin.v1.Admin/CreateAdmin"
const OperationAdminDeleteAdmin = "/api.Admin.v1.Admin/DeleteAdmin"
const OperationAdminGetAdmin = "/api.Admin.v1.Admin/GetAdmin"
const OperationAdminListAdmin = "/api.Admin.v1.Admin/ListAdmin"
const OperationAdminUpdateAdmin = "/api.Admin.v1.Admin/UpdateAdmin"

type AdminHTTPServer interface {
	// CreateAdmin创建用户
	CreateAdmin(context.Context, *CreateAdminReq) (*CreateAdminReply, error)
	// DeleteAdmin删除用户
	DeleteAdmin(context.Context, *DeleteAdminReq) (*DeleteAdminReply, error)
	// GetAdmin获取单个用户
	GetAdmin(context.Context, *GetAdminReq) (*GetAdminReply, error)
	// ListAdmin获取用户列表
	ListAdmin(context.Context, *ListAdminReq) (*ListAdminReply, error)
	// UpdateAdmin更新用户
	UpdateAdmin(context.Context, *UpdateAdminReq) (*UpdateAdminReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/v1/createAdmin", _Admin_CreateAdmin0_HTTP_Handler(srv))
	r.PUT("/admin/v1/updateAdmin", _Admin_UpdateAdmin0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/deleteAdmin", _Admin_DeleteAdmin0_HTTP_Handler(srv))
	r.GET("/admin/v1/getAdmin", _Admin_GetAdmin0_HTTP_Handler(srv))
	r.GET("/admin/v1/listAdmin", _Admin_ListAdmin0_HTTP_Handler(srv))
}

func _Admin_CreateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdmin(ctx, req.(*CreateAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdminReq
		if err := ctx.Bind(&in.AdminInfo); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdmin(ctx, req.(*UpdateAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdmin(ctx, req.(*DeleteAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdmin(ctx, req.(*GetAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdmin(ctx, req.(*ListAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateAdmin(ctx context.Context, req *CreateAdminReq, opts ...http.CallOption) (rsp *CreateAdminReply, err error)
	DeleteAdmin(ctx context.Context, req *DeleteAdminReq, opts ...http.CallOption) (rsp *DeleteAdminReply, err error)
	GetAdmin(ctx context.Context, req *GetAdminReq, opts ...http.CallOption) (rsp *GetAdminReply, err error)
	ListAdmin(ctx context.Context, req *ListAdminReq, opts ...http.CallOption) (rsp *ListAdminReply, err error)
	UpdateAdmin(ctx context.Context, req *UpdateAdminReq, opts ...http.CallOption) (rsp *UpdateAdminReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...http.CallOption) (*CreateAdminReply, error) {
	var out CreateAdminReply
	pattern := "/admin/v1/createAdmin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...http.CallOption) (*DeleteAdminReply, error) {
	var out DeleteAdminReply
	pattern := "/admin/v1/deleteAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetAdmin(ctx context.Context, in *GetAdminReq, opts ...http.CallOption) (*GetAdminReply, error) {
	var out GetAdminReply
	pattern := "/admin/v1/getAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...http.CallOption) (*ListAdminReply, error) {
	var out ListAdminReply
	pattern := "/admin/v1/listAdmin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...http.CallOption) (*UpdateAdminReply, error) {
	var out UpdateAdminReply
	pattern := "/admin/v1/updateAdmin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.AdminInfo, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
