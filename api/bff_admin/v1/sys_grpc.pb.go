// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: bff_admin/v1/sys.proto

package v1

import (
	context "context"
	paginator "fkratos/api/paginator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sys_DashboardSpeech_FullMethodName        = "/api.bff_admin.v1.Sys/DashboardSpeech"
	Sys_SysAuthLoginCaptcha_FullMethodName    = "/api.bff_admin.v1.Sys/SysAuthLoginCaptcha"
	Sys_SysAuthLogin_FullMethodName           = "/api.bff_admin.v1.Sys/SysAuthLogin"
	Sys_SysAuthLogout_FullMethodName          = "/api.bff_admin.v1.Sys/SysAuthLogout"
	Sys_SysAdminInfo_FullMethodName           = "/api.bff_admin.v1.Sys/SysAdminInfo"
	Sys_SysAdminInfoUpdate_FullMethodName     = "/api.bff_admin.v1.Sys/SysAdminInfoUpdate"
	Sys_SysAdminGenerateAvatar_FullMethodName = "/api.bff_admin.v1.Sys/SysAdminGenerateAvatar"
	Sys_SysAdminPermission_FullMethodName     = "/api.bff_admin.v1.Sys/SysAdminPermission"
	Sys_SysManageList_FullMethodName          = "/api.bff_admin.v1.Sys/SysManageList"
	Sys_SysManageInfo_FullMethodName          = "/api.bff_admin.v1.Sys/SysManageInfo"
	Sys_SysManageStore_FullMethodName         = "/api.bff_admin.v1.Sys/SysManageStore"
	Sys_SysManageDel_FullMethodName           = "/api.bff_admin.v1.Sys/SysManageDel"
	Sys_SysApiList_FullMethodName             = "/api.bff_admin.v1.Sys/SysApiList"
	Sys_SysApiStore_FullMethodName            = "/api.bff_admin.v1.Sys/SysApiStore"
	Sys_SysApiDel_FullMethodName              = "/api.bff_admin.v1.Sys/SysApiDel"
	Sys_SysDeptList_FullMethodName            = "/api.bff_admin.v1.Sys/SysDeptList"
	Sys_SysDeptInfo_FullMethodName            = "/api.bff_admin.v1.Sys/SysDeptInfo"
	Sys_SysDeptStore_FullMethodName           = "/api.bff_admin.v1.Sys/SysDeptStore"
	Sys_SysDeptDel_FullMethodName             = "/api.bff_admin.v1.Sys/SysDeptDel"
	Sys_SysJobList_FullMethodName             = "/api.bff_admin.v1.Sys/SysJobList"
	Sys_SysJobInfo_FullMethodName             = "/api.bff_admin.v1.Sys/SysJobInfo"
	Sys_SysJobStore_FullMethodName            = "/api.bff_admin.v1.Sys/SysJobStore"
	Sys_SysJobDel_FullMethodName              = "/api.bff_admin.v1.Sys/SysJobDel"
	Sys_SysLogList_FullMethodName             = "/api.bff_admin.v1.Sys/SysLogList"
	Sys_SysLogInfo_FullMethodName             = "/api.bff_admin.v1.Sys/SysLogInfo"
	Sys_SysLogStore_FullMethodName            = "/api.bff_admin.v1.Sys/SysLogStore"
	Sys_SysPermissionList_FullMethodName      = "/api.bff_admin.v1.Sys/SysPermissionList"
	Sys_SysPermissionInfo_FullMethodName      = "/api.bff_admin.v1.Sys/SysPermissionInfo"
	Sys_SysPermissionStore_FullMethodName     = "/api.bff_admin.v1.Sys/SysPermissionStore"
	Sys_SysPermissionDel_FullMethodName       = "/api.bff_admin.v1.Sys/SysPermissionDel"
	Sys_SysPermissionStatus_FullMethodName    = "/api.bff_admin.v1.Sys/SysPermissionStatus"
	Sys_SysRoleList_FullMethodName            = "/api.bff_admin.v1.Sys/SysRoleList"
	Sys_SysRoleInfo_FullMethodName            = "/api.bff_admin.v1.Sys/SysRoleInfo"
	Sys_SysRoleStore_FullMethodName           = "/api.bff_admin.v1.Sys/SysRoleStore"
	Sys_SysRoleDel_FullMethodName             = "/api.bff_admin.v1.Sys/SysRoleDel"
)

// SysClient is the client API for Sys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysClient interface {
	// 仪表盘-一言
	DashboardSpeech(ctx context.Context, in *DashboardSpeechReq, opts ...grpc.CallOption) (*DashboardSpeechReply, error)
	// Auth-验证码
	SysAuthLoginCaptcha(ctx context.Context, in *SysAuthLoginCaptchaReq, opts ...grpc.CallOption) (*SysAuthLoginCaptchaReply, error)
	// Auth-登录
	SysAuthLogin(ctx context.Context, in *SysAuthLoginReq, opts ...grpc.CallOption) (*SysAuthLoginReply, error)
	// Auth-退出
	SysAuthLogout(ctx context.Context, in *SysAuthLogoutReq, opts ...grpc.CallOption) (*SysAuthLogoutReply, error)
	// 管理员-个人信息
	SysAdminInfo(ctx context.Context, in *SysAdminInfoReq, opts ...grpc.CallOption) (*SysAdminInfoReply, error)
	// 管理员-个人信息更新
	SysAdminInfoUpdate(ctx context.Context, in *SysAdminInfoUpdateReq, opts ...grpc.CallOption) (*SysAdminInfoUpdateReply, error)
	// 管理员-生成头像
	SysAdminGenerateAvatar(ctx context.Context, in *SysAdminGenerateAvatarReq, opts ...grpc.CallOption) (*SysAdminGenerateAvatarReply, error)
	// 管理员-查询权限
	SysAdminPermission(ctx context.Context, in *SysAdminPermissionReq, opts ...grpc.CallOption) (*SysAdminPermissionReply, error)
	// 管理员-列表
	SysManageList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysManageListReply, error)
	// 管理员-信息
	SysManageInfo(ctx context.Context, in *SysManageInfoReq, opts ...grpc.CallOption) (*SysManageInfoReply, error)
	// 管理员-保存
	SysManageStore(ctx context.Context, in *SysManageStoreReq, opts ...grpc.CallOption) (*SysManageStoreReply, error)
	// 管理员-删除
	SysManageDel(ctx context.Context, in *SysManageDelReq, opts ...grpc.CallOption) (*SysManageDelReply, error)
	// Api-列表
	SysApiList(ctx context.Context, in *SysApiListReq, opts ...grpc.CallOption) (*SysApiListReply, error)
	// Api-保存
	SysApiStore(ctx context.Context, in *SysApiStoreReq, opts ...grpc.CallOption) (*SysApiStoreReply, error)
	// Api-删除
	SysApiDel(ctx context.Context, in *SysApiDelReq, opts ...grpc.CallOption) (*SysApiDelReply, error)
	// 部门-列表
	SysDeptList(ctx context.Context, in *SysDeptListReq, opts ...grpc.CallOption) (*SysDeptListReply, error)
	// 部门-单个部门信息
	SysDeptInfo(ctx context.Context, in *SysDeptInfoReq, opts ...grpc.CallOption) (*SysDeptInfoReply, error)
	// 部门-保存
	SysDeptStore(ctx context.Context, in *SysDeptStoreReq, opts ...grpc.CallOption) (*SysDeptStoreReply, error)
	// 部门-删除
	SysDeptDel(ctx context.Context, in *SysDeptDelReq, opts ...grpc.CallOption) (*SysDeptDelReply, error)
	// 岗位-列表
	SysJobList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysJobListReply, error)
	// 岗位-单个岗位信息
	SysJobInfo(ctx context.Context, in *SysJobInfoReq, opts ...grpc.CallOption) (*SysJobInfoReply, error)
	// 岗位-保存
	SysJobStore(ctx context.Context, in *SysJobStoreReq, opts ...grpc.CallOption) (*SysJobStoreReply, error)
	// 岗位-删除
	SysJobDel(ctx context.Context, in *SysJobDelReq, opts ...grpc.CallOption) (*SysJobDelReply, error)
	// 日志-列表
	SysLogList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysLogListResp, error)
	// 日志-信息
	SysLogInfo(ctx context.Context, in *SysLogInfoReq, opts ...grpc.CallOption) (*SysLogInfoResp, error)
	// 日志-保存
	SysLogStore(ctx context.Context, in *SysLogStoreReq, opts ...grpc.CallOption) (*SysLogStoreResp, error)
	// 权限-列表
	SysPermissionList(ctx context.Context, in *SysPermissionListReq, opts ...grpc.CallOption) (*SysPermissionListResp, error)
	// 权限-单个权限信息
	SysPermissionInfo(ctx context.Context, in *SysPermissionInfoReq, opts ...grpc.CallOption) (*SysPermissionInfoResp, error)
	// 权限-保存
	SysPermissionStore(ctx context.Context, in *SysPermissionStoreReq, opts ...grpc.CallOption) (*SysPermissionStoreResp, error)
	// 权限-删除
	SysPermissionDel(ctx context.Context, in *SysPermissionDelReq, opts ...grpc.CallOption) (*SysPermissionDelResp, error)
	// 权限-修改状态
	SysPermissionStatus(ctx context.Context, in *SysPermissionStatusReq, opts ...grpc.CallOption) (*SysPermissionStatusResp, error)
	// 角色-列表
	SysRoleList(ctx context.Context, in *SysRoleListReq, opts ...grpc.CallOption) (*SysRoleListResp, error)
	// 角色-信息
	SysRoleInfo(ctx context.Context, in *SysRoleInfoReq, opts ...grpc.CallOption) (*SysRoleInfoResp, error)
	// 角色-保存
	SysRoleStore(ctx context.Context, in *SysRoleStoreReq, opts ...grpc.CallOption) (*SysRoleStoreResp, error)
	// 角色-删除
	SysRoleDel(ctx context.Context, in *SysRoleDelReq, opts ...grpc.CallOption) (*SysRoleDelResp, error)
}

type sysClient struct {
	cc grpc.ClientConnInterface
}

func NewSysClient(cc grpc.ClientConnInterface) SysClient {
	return &sysClient{cc}
}

func (c *sysClient) DashboardSpeech(ctx context.Context, in *DashboardSpeechReq, opts ...grpc.CallOption) (*DashboardSpeechReply, error) {
	out := new(DashboardSpeechReply)
	err := c.cc.Invoke(ctx, Sys_DashboardSpeech_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAuthLoginCaptcha(ctx context.Context, in *SysAuthLoginCaptchaReq, opts ...grpc.CallOption) (*SysAuthLoginCaptchaReply, error) {
	out := new(SysAuthLoginCaptchaReply)
	err := c.cc.Invoke(ctx, Sys_SysAuthLoginCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAuthLogin(ctx context.Context, in *SysAuthLoginReq, opts ...grpc.CallOption) (*SysAuthLoginReply, error) {
	out := new(SysAuthLoginReply)
	err := c.cc.Invoke(ctx, Sys_SysAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAuthLogout(ctx context.Context, in *SysAuthLogoutReq, opts ...grpc.CallOption) (*SysAuthLogoutReply, error) {
	out := new(SysAuthLogoutReply)
	err := c.cc.Invoke(ctx, Sys_SysAuthLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAdminInfo(ctx context.Context, in *SysAdminInfoReq, opts ...grpc.CallOption) (*SysAdminInfoReply, error) {
	out := new(SysAdminInfoReply)
	err := c.cc.Invoke(ctx, Sys_SysAdminInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAdminInfoUpdate(ctx context.Context, in *SysAdminInfoUpdateReq, opts ...grpc.CallOption) (*SysAdminInfoUpdateReply, error) {
	out := new(SysAdminInfoUpdateReply)
	err := c.cc.Invoke(ctx, Sys_SysAdminInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAdminGenerateAvatar(ctx context.Context, in *SysAdminGenerateAvatarReq, opts ...grpc.CallOption) (*SysAdminGenerateAvatarReply, error) {
	out := new(SysAdminGenerateAvatarReply)
	err := c.cc.Invoke(ctx, Sys_SysAdminGenerateAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysAdminPermission(ctx context.Context, in *SysAdminPermissionReq, opts ...grpc.CallOption) (*SysAdminPermissionReply, error) {
	out := new(SysAdminPermissionReply)
	err := c.cc.Invoke(ctx, Sys_SysAdminPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysManageList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysManageListReply, error) {
	out := new(SysManageListReply)
	err := c.cc.Invoke(ctx, Sys_SysManageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysManageInfo(ctx context.Context, in *SysManageInfoReq, opts ...grpc.CallOption) (*SysManageInfoReply, error) {
	out := new(SysManageInfoReply)
	err := c.cc.Invoke(ctx, Sys_SysManageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysManageStore(ctx context.Context, in *SysManageStoreReq, opts ...grpc.CallOption) (*SysManageStoreReply, error) {
	out := new(SysManageStoreReply)
	err := c.cc.Invoke(ctx, Sys_SysManageStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysManageDel(ctx context.Context, in *SysManageDelReq, opts ...grpc.CallOption) (*SysManageDelReply, error) {
	out := new(SysManageDelReply)
	err := c.cc.Invoke(ctx, Sys_SysManageDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysApiList(ctx context.Context, in *SysApiListReq, opts ...grpc.CallOption) (*SysApiListReply, error) {
	out := new(SysApiListReply)
	err := c.cc.Invoke(ctx, Sys_SysApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysApiStore(ctx context.Context, in *SysApiStoreReq, opts ...grpc.CallOption) (*SysApiStoreReply, error) {
	out := new(SysApiStoreReply)
	err := c.cc.Invoke(ctx, Sys_SysApiStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysApiDel(ctx context.Context, in *SysApiDelReq, opts ...grpc.CallOption) (*SysApiDelReply, error) {
	out := new(SysApiDelReply)
	err := c.cc.Invoke(ctx, Sys_SysApiDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysDeptList(ctx context.Context, in *SysDeptListReq, opts ...grpc.CallOption) (*SysDeptListReply, error) {
	out := new(SysDeptListReply)
	err := c.cc.Invoke(ctx, Sys_SysDeptList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysDeptInfo(ctx context.Context, in *SysDeptInfoReq, opts ...grpc.CallOption) (*SysDeptInfoReply, error) {
	out := new(SysDeptInfoReply)
	err := c.cc.Invoke(ctx, Sys_SysDeptInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysDeptStore(ctx context.Context, in *SysDeptStoreReq, opts ...grpc.CallOption) (*SysDeptStoreReply, error) {
	out := new(SysDeptStoreReply)
	err := c.cc.Invoke(ctx, Sys_SysDeptStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysDeptDel(ctx context.Context, in *SysDeptDelReq, opts ...grpc.CallOption) (*SysDeptDelReply, error) {
	out := new(SysDeptDelReply)
	err := c.cc.Invoke(ctx, Sys_SysDeptDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysJobList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysJobListReply, error) {
	out := new(SysJobListReply)
	err := c.cc.Invoke(ctx, Sys_SysJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysJobInfo(ctx context.Context, in *SysJobInfoReq, opts ...grpc.CallOption) (*SysJobInfoReply, error) {
	out := new(SysJobInfoReply)
	err := c.cc.Invoke(ctx, Sys_SysJobInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysJobStore(ctx context.Context, in *SysJobStoreReq, opts ...grpc.CallOption) (*SysJobStoreReply, error) {
	out := new(SysJobStoreReply)
	err := c.cc.Invoke(ctx, Sys_SysJobStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysJobDel(ctx context.Context, in *SysJobDelReq, opts ...grpc.CallOption) (*SysJobDelReply, error) {
	out := new(SysJobDelReply)
	err := c.cc.Invoke(ctx, Sys_SysJobDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysLogList(ctx context.Context, in *paginator.PaginatorReq, opts ...grpc.CallOption) (*SysLogListResp, error) {
	out := new(SysLogListResp)
	err := c.cc.Invoke(ctx, Sys_SysLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysLogInfo(ctx context.Context, in *SysLogInfoReq, opts ...grpc.CallOption) (*SysLogInfoResp, error) {
	out := new(SysLogInfoResp)
	err := c.cc.Invoke(ctx, Sys_SysLogInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysLogStore(ctx context.Context, in *SysLogStoreReq, opts ...grpc.CallOption) (*SysLogStoreResp, error) {
	out := new(SysLogStoreResp)
	err := c.cc.Invoke(ctx, Sys_SysLogStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysPermissionList(ctx context.Context, in *SysPermissionListReq, opts ...grpc.CallOption) (*SysPermissionListResp, error) {
	out := new(SysPermissionListResp)
	err := c.cc.Invoke(ctx, Sys_SysPermissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysPermissionInfo(ctx context.Context, in *SysPermissionInfoReq, opts ...grpc.CallOption) (*SysPermissionInfoResp, error) {
	out := new(SysPermissionInfoResp)
	err := c.cc.Invoke(ctx, Sys_SysPermissionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysPermissionStore(ctx context.Context, in *SysPermissionStoreReq, opts ...grpc.CallOption) (*SysPermissionStoreResp, error) {
	out := new(SysPermissionStoreResp)
	err := c.cc.Invoke(ctx, Sys_SysPermissionStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysPermissionDel(ctx context.Context, in *SysPermissionDelReq, opts ...grpc.CallOption) (*SysPermissionDelResp, error) {
	out := new(SysPermissionDelResp)
	err := c.cc.Invoke(ctx, Sys_SysPermissionDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysPermissionStatus(ctx context.Context, in *SysPermissionStatusReq, opts ...grpc.CallOption) (*SysPermissionStatusResp, error) {
	out := new(SysPermissionStatusResp)
	err := c.cc.Invoke(ctx, Sys_SysPermissionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysRoleList(ctx context.Context, in *SysRoleListReq, opts ...grpc.CallOption) (*SysRoleListResp, error) {
	out := new(SysRoleListResp)
	err := c.cc.Invoke(ctx, Sys_SysRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysRoleInfo(ctx context.Context, in *SysRoleInfoReq, opts ...grpc.CallOption) (*SysRoleInfoResp, error) {
	out := new(SysRoleInfoResp)
	err := c.cc.Invoke(ctx, Sys_SysRoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysRoleStore(ctx context.Context, in *SysRoleStoreReq, opts ...grpc.CallOption) (*SysRoleStoreResp, error) {
	out := new(SysRoleStoreResp)
	err := c.cc.Invoke(ctx, Sys_SysRoleStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysRoleDel(ctx context.Context, in *SysRoleDelReq, opts ...grpc.CallOption) (*SysRoleDelResp, error) {
	out := new(SysRoleDelResp)
	err := c.cc.Invoke(ctx, Sys_SysRoleDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServer is the server API for Sys service.
// All implementations must embed UnimplementedSysServer
// for forward compatibility
type SysServer interface {
	// 仪表盘-一言
	DashboardSpeech(context.Context, *DashboardSpeechReq) (*DashboardSpeechReply, error)
	// Auth-验证码
	SysAuthLoginCaptcha(context.Context, *SysAuthLoginCaptchaReq) (*SysAuthLoginCaptchaReply, error)
	// Auth-登录
	SysAuthLogin(context.Context, *SysAuthLoginReq) (*SysAuthLoginReply, error)
	// Auth-退出
	SysAuthLogout(context.Context, *SysAuthLogoutReq) (*SysAuthLogoutReply, error)
	// 管理员-个人信息
	SysAdminInfo(context.Context, *SysAdminInfoReq) (*SysAdminInfoReply, error)
	// 管理员-个人信息更新
	SysAdminInfoUpdate(context.Context, *SysAdminInfoUpdateReq) (*SysAdminInfoUpdateReply, error)
	// 管理员-生成头像
	SysAdminGenerateAvatar(context.Context, *SysAdminGenerateAvatarReq) (*SysAdminGenerateAvatarReply, error)
	// 管理员-查询权限
	SysAdminPermission(context.Context, *SysAdminPermissionReq) (*SysAdminPermissionReply, error)
	// 管理员-列表
	SysManageList(context.Context, *paginator.PaginatorReq) (*SysManageListReply, error)
	// 管理员-信息
	SysManageInfo(context.Context, *SysManageInfoReq) (*SysManageInfoReply, error)
	// 管理员-保存
	SysManageStore(context.Context, *SysManageStoreReq) (*SysManageStoreReply, error)
	// 管理员-删除
	SysManageDel(context.Context, *SysManageDelReq) (*SysManageDelReply, error)
	// Api-列表
	SysApiList(context.Context, *SysApiListReq) (*SysApiListReply, error)
	// Api-保存
	SysApiStore(context.Context, *SysApiStoreReq) (*SysApiStoreReply, error)
	// Api-删除
	SysApiDel(context.Context, *SysApiDelReq) (*SysApiDelReply, error)
	// 部门-列表
	SysDeptList(context.Context, *SysDeptListReq) (*SysDeptListReply, error)
	// 部门-单个部门信息
	SysDeptInfo(context.Context, *SysDeptInfoReq) (*SysDeptInfoReply, error)
	// 部门-保存
	SysDeptStore(context.Context, *SysDeptStoreReq) (*SysDeptStoreReply, error)
	// 部门-删除
	SysDeptDel(context.Context, *SysDeptDelReq) (*SysDeptDelReply, error)
	// 岗位-列表
	SysJobList(context.Context, *paginator.PaginatorReq) (*SysJobListReply, error)
	// 岗位-单个岗位信息
	SysJobInfo(context.Context, *SysJobInfoReq) (*SysJobInfoReply, error)
	// 岗位-保存
	SysJobStore(context.Context, *SysJobStoreReq) (*SysJobStoreReply, error)
	// 岗位-删除
	SysJobDel(context.Context, *SysJobDelReq) (*SysJobDelReply, error)
	// 日志-列表
	SysLogList(context.Context, *paginator.PaginatorReq) (*SysLogListResp, error)
	// 日志-信息
	SysLogInfo(context.Context, *SysLogInfoReq) (*SysLogInfoResp, error)
	// 日志-保存
	SysLogStore(context.Context, *SysLogStoreReq) (*SysLogStoreResp, error)
	// 权限-列表
	SysPermissionList(context.Context, *SysPermissionListReq) (*SysPermissionListResp, error)
	// 权限-单个权限信息
	SysPermissionInfo(context.Context, *SysPermissionInfoReq) (*SysPermissionInfoResp, error)
	// 权限-保存
	SysPermissionStore(context.Context, *SysPermissionStoreReq) (*SysPermissionStoreResp, error)
	// 权限-删除
	SysPermissionDel(context.Context, *SysPermissionDelReq) (*SysPermissionDelResp, error)
	// 权限-修改状态
	SysPermissionStatus(context.Context, *SysPermissionStatusReq) (*SysPermissionStatusResp, error)
	// 角色-列表
	SysRoleList(context.Context, *SysRoleListReq) (*SysRoleListResp, error)
	// 角色-信息
	SysRoleInfo(context.Context, *SysRoleInfoReq) (*SysRoleInfoResp, error)
	// 角色-保存
	SysRoleStore(context.Context, *SysRoleStoreReq) (*SysRoleStoreResp, error)
	// 角色-删除
	SysRoleDel(context.Context, *SysRoleDelReq) (*SysRoleDelResp, error)
	mustEmbedUnimplementedSysServer()
}

// UnimplementedSysServer must be embedded to have forward compatible implementations.
type UnimplementedSysServer struct {
}

func (UnimplementedSysServer) DashboardSpeech(context.Context, *DashboardSpeechReq) (*DashboardSpeechReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardSpeech not implemented")
}
func (UnimplementedSysServer) SysAuthLoginCaptcha(context.Context, *SysAuthLoginCaptchaReq) (*SysAuthLoginCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLoginCaptcha not implemented")
}
func (UnimplementedSysServer) SysAuthLogin(context.Context, *SysAuthLoginReq) (*SysAuthLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLogin not implemented")
}
func (UnimplementedSysServer) SysAuthLogout(context.Context, *SysAuthLogoutReq) (*SysAuthLogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLogout not implemented")
}
func (UnimplementedSysServer) SysAdminInfo(context.Context, *SysAdminInfoReq) (*SysAdminInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAdminInfo not implemented")
}
func (UnimplementedSysServer) SysAdminInfoUpdate(context.Context, *SysAdminInfoUpdateReq) (*SysAdminInfoUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAdminInfoUpdate not implemented")
}
func (UnimplementedSysServer) SysAdminGenerateAvatar(context.Context, *SysAdminGenerateAvatarReq) (*SysAdminGenerateAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAdminGenerateAvatar not implemented")
}
func (UnimplementedSysServer) SysAdminPermission(context.Context, *SysAdminPermissionReq) (*SysAdminPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAdminPermission not implemented")
}
func (UnimplementedSysServer) SysManageList(context.Context, *paginator.PaginatorReq) (*SysManageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysManageList not implemented")
}
func (UnimplementedSysServer) SysManageInfo(context.Context, *SysManageInfoReq) (*SysManageInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysManageInfo not implemented")
}
func (UnimplementedSysServer) SysManageStore(context.Context, *SysManageStoreReq) (*SysManageStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysManageStore not implemented")
}
func (UnimplementedSysServer) SysManageDel(context.Context, *SysManageDelReq) (*SysManageDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysManageDel not implemented")
}
func (UnimplementedSysServer) SysApiList(context.Context, *SysApiListReq) (*SysApiListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysApiList not implemented")
}
func (UnimplementedSysServer) SysApiStore(context.Context, *SysApiStoreReq) (*SysApiStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysApiStore not implemented")
}
func (UnimplementedSysServer) SysApiDel(context.Context, *SysApiDelReq) (*SysApiDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysApiDel not implemented")
}
func (UnimplementedSysServer) SysDeptList(context.Context, *SysDeptListReq) (*SysDeptListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptList not implemented")
}
func (UnimplementedSysServer) SysDeptInfo(context.Context, *SysDeptInfoReq) (*SysDeptInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptInfo not implemented")
}
func (UnimplementedSysServer) SysDeptStore(context.Context, *SysDeptStoreReq) (*SysDeptStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptStore not implemented")
}
func (UnimplementedSysServer) SysDeptDel(context.Context, *SysDeptDelReq) (*SysDeptDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptDel not implemented")
}
func (UnimplementedSysServer) SysJobList(context.Context, *paginator.PaginatorReq) (*SysJobListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysJobList not implemented")
}
func (UnimplementedSysServer) SysJobInfo(context.Context, *SysJobInfoReq) (*SysJobInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysJobInfo not implemented")
}
func (UnimplementedSysServer) SysJobStore(context.Context, *SysJobStoreReq) (*SysJobStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysJobStore not implemented")
}
func (UnimplementedSysServer) SysJobDel(context.Context, *SysJobDelReq) (*SysJobDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysJobDel not implemented")
}
func (UnimplementedSysServer) SysLogList(context.Context, *paginator.PaginatorReq) (*SysLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogList not implemented")
}
func (UnimplementedSysServer) SysLogInfo(context.Context, *SysLogInfoReq) (*SysLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogInfo not implemented")
}
func (UnimplementedSysServer) SysLogStore(context.Context, *SysLogStoreReq) (*SysLogStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogStore not implemented")
}
func (UnimplementedSysServer) SysPermissionList(context.Context, *SysPermissionListReq) (*SysPermissionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionList not implemented")
}
func (UnimplementedSysServer) SysPermissionInfo(context.Context, *SysPermissionInfoReq) (*SysPermissionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionInfo not implemented")
}
func (UnimplementedSysServer) SysPermissionStore(context.Context, *SysPermissionStoreReq) (*SysPermissionStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionStore not implemented")
}
func (UnimplementedSysServer) SysPermissionDel(context.Context, *SysPermissionDelReq) (*SysPermissionDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionDel not implemented")
}
func (UnimplementedSysServer) SysPermissionStatus(context.Context, *SysPermissionStatusReq) (*SysPermissionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionStatus not implemented")
}
func (UnimplementedSysServer) SysRoleList(context.Context, *SysRoleListReq) (*SysRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleList not implemented")
}
func (UnimplementedSysServer) SysRoleInfo(context.Context, *SysRoleInfoReq) (*SysRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleInfo not implemented")
}
func (UnimplementedSysServer) SysRoleStore(context.Context, *SysRoleStoreReq) (*SysRoleStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleStore not implemented")
}
func (UnimplementedSysServer) SysRoleDel(context.Context, *SysRoleDelReq) (*SysRoleDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleDel not implemented")
}
func (UnimplementedSysServer) mustEmbedUnimplementedSysServer() {}

// UnsafeSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServer will
// result in compilation errors.
type UnsafeSysServer interface {
	mustEmbedUnimplementedSysServer()
}

func RegisterSysServer(s grpc.ServiceRegistrar, srv SysServer) {
	s.RegisterService(&Sys_ServiceDesc, srv)
}

func _Sys_DashboardSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardSpeechReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DashboardSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DashboardSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DashboardSpeech(ctx, req.(*DashboardSpeechReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAuthLoginCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLoginCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAuthLoginCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAuthLoginCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAuthLoginCaptcha(ctx, req.(*SysAuthLoginCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAuthLogin(ctx, req.(*SysAuthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAuthLogout(ctx, req.(*SysAuthLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAdminInfo(ctx, req.(*SysAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAdminInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAdminInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAdminInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAdminInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAdminInfoUpdate(ctx, req.(*SysAdminInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAdminGenerateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAdminGenerateAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAdminGenerateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAdminGenerateAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAdminGenerateAvatar(ctx, req.(*SysAdminGenerateAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysAdminPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAdminPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysAdminPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysAdminPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysAdminPermission(ctx, req.(*SysAdminPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paginator.PaginatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysManageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysManageList(ctx, req.(*paginator.PaginatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysManageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysManageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysManageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysManageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysManageInfo(ctx, req.(*SysManageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysManageStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysManageStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysManageStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysManageStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysManageStore(ctx, req.(*SysManageStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysManageDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysManageDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysManageDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysManageDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysManageDel(ctx, req.(*SysManageDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysApiList(ctx, req.(*SysApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysApiStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysApiStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysApiStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysApiStore(ctx, req.(*SysApiStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysApiDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysApiDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysApiDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysApiDel(ctx, req.(*SysApiDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysDeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysDeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysDeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysDeptList(ctx, req.(*SysDeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysDeptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysDeptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysDeptInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysDeptInfo(ctx, req.(*SysDeptInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysDeptStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysDeptStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysDeptStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysDeptStore(ctx, req.(*SysDeptStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysDeptDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysDeptDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysDeptDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysDeptDel(ctx, req.(*SysDeptDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paginator.PaginatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysJobList(ctx, req.(*paginator.PaginatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysJobInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysJobInfo(ctx, req.(*SysJobInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysJobStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysJobStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysJobStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysJobStore(ctx, req.(*SysJobStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysJobDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysJobDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysJobDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysJobDel(ctx, req.(*SysJobDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paginator.PaginatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysLogList(ctx, req.(*paginator.PaginatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysLogInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysLogInfo(ctx, req.(*SysLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysLogStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysLogStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysLogStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysLogStore(ctx, req.(*SysLogStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysPermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysPermissionList(ctx, req.(*SysPermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysPermissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysPermissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysPermissionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysPermissionInfo(ctx, req.(*SysPermissionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysPermissionStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysPermissionStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysPermissionStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysPermissionStore(ctx, req.(*SysPermissionStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysPermissionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysPermissionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysPermissionDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysPermissionDel(ctx, req.(*SysPermissionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysPermissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysPermissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysPermissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysPermissionStatus(ctx, req.(*SysPermissionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysRoleList(ctx, req.(*SysRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysRoleInfo(ctx, req.(*SysRoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysRoleStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysRoleStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysRoleStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysRoleStore(ctx, req.(*SysRoleStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysRoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysRoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysRoleDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysRoleDel(ctx, req.(*SysRoleDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sys_ServiceDesc is the grpc.ServiceDesc for Sys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bff_admin.v1.Sys",
	HandlerType: (*SysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DashboardSpeech",
			Handler:    _Sys_DashboardSpeech_Handler,
		},
		{
			MethodName: "SysAuthLoginCaptcha",
			Handler:    _Sys_SysAuthLoginCaptcha_Handler,
		},
		{
			MethodName: "SysAuthLogin",
			Handler:    _Sys_SysAuthLogin_Handler,
		},
		{
			MethodName: "SysAuthLogout",
			Handler:    _Sys_SysAuthLogout_Handler,
		},
		{
			MethodName: "SysAdminInfo",
			Handler:    _Sys_SysAdminInfo_Handler,
		},
		{
			MethodName: "SysAdminInfoUpdate",
			Handler:    _Sys_SysAdminInfoUpdate_Handler,
		},
		{
			MethodName: "SysAdminGenerateAvatar",
			Handler:    _Sys_SysAdminGenerateAvatar_Handler,
		},
		{
			MethodName: "SysAdminPermission",
			Handler:    _Sys_SysAdminPermission_Handler,
		},
		{
			MethodName: "SysManageList",
			Handler:    _Sys_SysManageList_Handler,
		},
		{
			MethodName: "SysManageInfo",
			Handler:    _Sys_SysManageInfo_Handler,
		},
		{
			MethodName: "SysManageStore",
			Handler:    _Sys_SysManageStore_Handler,
		},
		{
			MethodName: "SysManageDel",
			Handler:    _Sys_SysManageDel_Handler,
		},
		{
			MethodName: "SysApiList",
			Handler:    _Sys_SysApiList_Handler,
		},
		{
			MethodName: "SysApiStore",
			Handler:    _Sys_SysApiStore_Handler,
		},
		{
			MethodName: "SysApiDel",
			Handler:    _Sys_SysApiDel_Handler,
		},
		{
			MethodName: "SysDeptList",
			Handler:    _Sys_SysDeptList_Handler,
		},
		{
			MethodName: "SysDeptInfo",
			Handler:    _Sys_SysDeptInfo_Handler,
		},
		{
			MethodName: "SysDeptStore",
			Handler:    _Sys_SysDeptStore_Handler,
		},
		{
			MethodName: "SysDeptDel",
			Handler:    _Sys_SysDeptDel_Handler,
		},
		{
			MethodName: "SysJobList",
			Handler:    _Sys_SysJobList_Handler,
		},
		{
			MethodName: "SysJobInfo",
			Handler:    _Sys_SysJobInfo_Handler,
		},
		{
			MethodName: "SysJobStore",
			Handler:    _Sys_SysJobStore_Handler,
		},
		{
			MethodName: "SysJobDel",
			Handler:    _Sys_SysJobDel_Handler,
		},
		{
			MethodName: "SysLogList",
			Handler:    _Sys_SysLogList_Handler,
		},
		{
			MethodName: "SysLogInfo",
			Handler:    _Sys_SysLogInfo_Handler,
		},
		{
			MethodName: "SysLogStore",
			Handler:    _Sys_SysLogStore_Handler,
		},
		{
			MethodName: "SysPermissionList",
			Handler:    _Sys_SysPermissionList_Handler,
		},
		{
			MethodName: "SysPermissionInfo",
			Handler:    _Sys_SysPermissionInfo_Handler,
		},
		{
			MethodName: "SysPermissionStore",
			Handler:    _Sys_SysPermissionStore_Handler,
		},
		{
			MethodName: "SysPermissionDel",
			Handler:    _Sys_SysPermissionDel_Handler,
		},
		{
			MethodName: "SysPermissionStatus",
			Handler:    _Sys_SysPermissionStatus_Handler,
		},
		{
			MethodName: "SysRoleList",
			Handler:    _Sys_SysRoleList_Handler,
		},
		{
			MethodName: "SysRoleInfo",
			Handler:    _Sys_SysRoleInfo_Handler,
		},
		{
			MethodName: "SysRoleStore",
			Handler:    _Sys_SysRoleStore_Handler,
		},
		{
			MethodName: "SysRoleDel",
			Handler:    _Sys_SysRoleDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bff_admin/v1/sys.proto",
}
