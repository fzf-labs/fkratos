// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff_admin/v1/sys.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _sys_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DashboardSpeechReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardSpeechReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardSpeechReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardSpeechReqMultiError, or nil if none found.
func (m *DashboardSpeechReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardSpeechReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DashboardSpeechReqMultiError(errors)
	}

	return nil
}

// DashboardSpeechReqMultiError is an error wrapping multiple validation errors
// returned by DashboardSpeechReq.ValidateAll() if the designated constraints
// aren't met.
type DashboardSpeechReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardSpeechReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardSpeechReqMultiError) AllErrors() []error { return m }

// DashboardSpeechReqValidationError is the validation error returned by
// DashboardSpeechReq.Validate if the designated constraints aren't met.
type DashboardSpeechReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardSpeechReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardSpeechReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardSpeechReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardSpeechReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardSpeechReqValidationError) ErrorName() string {
	return "DashboardSpeechReqValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardSpeechReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardSpeechReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardSpeechReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardSpeechReqValidationError{}

// Validate checks the field values on DashboardSpeechReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardSpeechReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardSpeechReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardSpeechReplyMultiError, or nil if none found.
func (m *DashboardSpeechReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardSpeechReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	if len(errors) > 0 {
		return DashboardSpeechReplyMultiError(errors)
	}

	return nil
}

// DashboardSpeechReplyMultiError is an error wrapping multiple validation
// errors returned by DashboardSpeechReply.ValidateAll() if the designated
// constraints aren't met.
type DashboardSpeechReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardSpeechReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardSpeechReplyMultiError) AllErrors() []error { return m }

// DashboardSpeechReplyValidationError is the validation error returned by
// DashboardSpeechReply.Validate if the designated constraints aren't met.
type DashboardSpeechReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardSpeechReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardSpeechReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardSpeechReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardSpeechReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardSpeechReplyValidationError) ErrorName() string {
	return "DashboardSpeechReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardSpeechReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardSpeechReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardSpeechReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardSpeechReplyValidationError{}

// Validate checks the field values on SysAuthLoginCaptchaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginCaptchaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginCaptchaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginCaptchaReqMultiError, or nil if none found.
func (m *SysAuthLoginCaptchaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginCaptchaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAuthLoginCaptchaReqMultiError(errors)
	}

	return nil
}

// SysAuthLoginCaptchaReqMultiError is an error wrapping multiple validation
// errors returned by SysAuthLoginCaptchaReq.ValidateAll() if the designated
// constraints aren't met.
type SysAuthLoginCaptchaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginCaptchaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginCaptchaReqMultiError) AllErrors() []error { return m }

// SysAuthLoginCaptchaReqValidationError is the validation error returned by
// SysAuthLoginCaptchaReq.Validate if the designated constraints aren't met.
type SysAuthLoginCaptchaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginCaptchaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginCaptchaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginCaptchaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginCaptchaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginCaptchaReqValidationError) ErrorName() string {
	return "SysAuthLoginCaptchaReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginCaptchaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginCaptchaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginCaptchaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginCaptchaReqValidationError{}

// Validate checks the field values on SysAuthLoginCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginCaptchaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginCaptchaReplyMultiError, or nil if none found.
func (m *SysAuthLoginCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for CaptchaImg

	if len(errors) > 0 {
		return SysAuthLoginCaptchaReplyMultiError(errors)
	}

	return nil
}

// SysAuthLoginCaptchaReplyMultiError is an error wrapping multiple validation
// errors returned by SysAuthLoginCaptchaReply.ValidateAll() if the designated
// constraints aren't met.
type SysAuthLoginCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginCaptchaReplyMultiError) AllErrors() []error { return m }

// SysAuthLoginCaptchaReplyValidationError is the validation error returned by
// SysAuthLoginCaptchaReply.Validate if the designated constraints aren't met.
type SysAuthLoginCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginCaptchaReplyValidationError) ErrorName() string {
	return "SysAuthLoginCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginCaptchaReplyValidationError{}

// Validate checks the field values on SysAuthLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginReqMultiError, or nil if none found.
func (m *SysAuthLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for VerifyCode

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return SysAuthLoginReqMultiError(errors)
	}

	return nil
}

// SysAuthLoginReqMultiError is an error wrapping multiple validation errors
// returned by SysAuthLoginReq.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginReqMultiError) AllErrors() []error { return m }

// SysAuthLoginReqValidationError is the validation error returned by
// SysAuthLoginReq.Validate if the designated constraints aren't met.
type SysAuthLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginReqValidationError) ErrorName() string { return "SysAuthLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAuthLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginReqValidationError{}

// Validate checks the field values on SysAuthLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginReplyMultiError, or nil if none found.
func (m *SysAuthLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiredAt

	// no validation rules for RefreshAt

	if len(errors) > 0 {
		return SysAuthLoginReplyMultiError(errors)
	}

	return nil
}

// SysAuthLoginReplyMultiError is an error wrapping multiple validation errors
// returned by SysAuthLoginReply.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginReplyMultiError) AllErrors() []error { return m }

// SysAuthLoginReplyValidationError is the validation error returned by
// SysAuthLoginReply.Validate if the designated constraints aren't met.
type SysAuthLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginReplyValidationError) ErrorName() string {
	return "SysAuthLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginReplyValidationError{}

// Validate checks the field values on SysAuthLogoutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLogoutReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLogoutReqMultiError, or nil if none found.
func (m *SysAuthLogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAuthLogoutReqMultiError(errors)
	}

	return nil
}

// SysAuthLogoutReqMultiError is an error wrapping multiple validation errors
// returned by SysAuthLogoutReq.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLogoutReqMultiError) AllErrors() []error { return m }

// SysAuthLogoutReqValidationError is the validation error returned by
// SysAuthLogoutReq.Validate if the designated constraints aren't met.
type SysAuthLogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLogoutReqValidationError) ErrorName() string { return "SysAuthLogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAuthLogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLogoutReqValidationError{}

// Validate checks the field values on SysAuthLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLogoutReplyMultiError, or nil if none found.
func (m *SysAuthLogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAuthLogoutReplyMultiError(errors)
	}

	return nil
}

// SysAuthLogoutReplyMultiError is an error wrapping multiple validation errors
// returned by SysAuthLogoutReply.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLogoutReplyMultiError) AllErrors() []error { return m }

// SysAuthLogoutReplyValidationError is the validation error returned by
// SysAuthLogoutReply.Validate if the designated constraints aren't met.
type SysAuthLogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLogoutReplyValidationError) ErrorName() string {
	return "SysAuthLogoutReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLogoutReplyValidationError{}

// Validate checks the field values on SysAdminInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAdminInfoMultiError, or
// nil if none found.
func (m *SysAdminInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for JobID

	// no validation rules for DeptID

	// no validation rules for Motto

	if len(errors) > 0 {
		return SysAdminInfoMultiError(errors)
	}

	return nil
}

// SysAdminInfoMultiError is an error wrapping multiple validation errors
// returned by SysAdminInfo.ValidateAll() if the designated constraints aren't met.
type SysAdminInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoMultiError) AllErrors() []error { return m }

// SysAdminInfoValidationError is the validation error returned by
// SysAdminInfo.Validate if the designated constraints aren't met.
type SysAdminInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoValidationError) ErrorName() string { return "SysAdminInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysAdminInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoValidationError{}

// Validate checks the field values on SysAdminInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoReqMultiError, or nil if none found.
func (m *SysAdminInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoReqMultiError(errors)
	}

	return nil
}

// SysAdminInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysAdminInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysAdminInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoReqMultiError) AllErrors() []error { return m }

// SysAdminInfoReqValidationError is the validation error returned by
// SysAdminInfoReq.Validate if the designated constraints aren't met.
type SysAdminInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoReqValidationError) ErrorName() string { return "SysAdminInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAdminInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoReqValidationError{}

// Validate checks the field values on SysAdminInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoReplyMultiError, or nil if none found.
func (m *SysAdminInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysAdminInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysAdminInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysAdminInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysAdminInfoReplyMultiError(errors)
	}

	return nil
}

// SysAdminInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SysAdminInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SysAdminInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoReplyMultiError) AllErrors() []error { return m }

// SysAdminInfoReplyValidationError is the validation error returned by
// SysAdminInfoReply.Validate if the designated constraints aren't met.
type SysAdminInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoReplyValidationError) ErrorName() string {
	return "SysAdminInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoReplyValidationError{}

// Validate checks the field values on SysAdminInfoUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoUpdateReqMultiError, or nil if none found.
func (m *SysAdminInfoUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNickname()); l < 0 || l > 50 {
		err := SysAdminInfoUpdateReqValidationError{
			field:  "Nickname",
			reason: "value length must be between 0 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 0 || l > 50 {
		err := SysAdminInfoUpdateReqValidationError{
			field:  "Email",
			reason: "value length must be between 0 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMobile()); l < 0 || l > 15 {
		err := SysAdminInfoUpdateReqValidationError{
			field:  "Mobile",
			reason: "value length must be between 0 and 15 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMotto()); l < 0 || l > 255 {
		err := SysAdminInfoUpdateReqValidationError{
			field:  "Motto",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 0 || l > 128 {
		err := SysAdminInfoUpdateReqValidationError{
			field:  "Password",
			reason: "value length must be between 0 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysAdminInfoUpdateReqMultiError(errors)
	}

	return nil
}

// SysAdminInfoUpdateReqMultiError is an error wrapping multiple validation
// errors returned by SysAdminInfoUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type SysAdminInfoUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoUpdateReqMultiError) AllErrors() []error { return m }

// SysAdminInfoUpdateReqValidationError is the validation error returned by
// SysAdminInfoUpdateReq.Validate if the designated constraints aren't met.
type SysAdminInfoUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoUpdateReqValidationError) ErrorName() string {
	return "SysAdminInfoUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoUpdateReqValidationError{}

// Validate checks the field values on SysAdminInfoUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoUpdateReplyMultiError, or nil if none found.
func (m *SysAdminInfoUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoUpdateReplyMultiError(errors)
	}

	return nil
}

// SysAdminInfoUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by SysAdminInfoUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type SysAdminInfoUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoUpdateReplyMultiError) AllErrors() []error { return m }

// SysAdminInfoUpdateReplyValidationError is the validation error returned by
// SysAdminInfoUpdateReply.Validate if the designated constraints aren't met.
type SysAdminInfoUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoUpdateReplyValidationError) ErrorName() string {
	return "SysAdminInfoUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoUpdateReplyValidationError{}

// Validate checks the field values on SysAdminGenerateAvatarReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminGenerateAvatarReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminGenerateAvatarReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminGenerateAvatarReqMultiError, or nil if none found.
func (m *SysAdminGenerateAvatarReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminGenerateAvatarReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminGenerateAvatarReqMultiError(errors)
	}

	return nil
}

// SysAdminGenerateAvatarReqMultiError is an error wrapping multiple validation
// errors returned by SysAdminGenerateAvatarReq.ValidateAll() if the
// designated constraints aren't met.
type SysAdminGenerateAvatarReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminGenerateAvatarReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminGenerateAvatarReqMultiError) AllErrors() []error { return m }

// SysAdminGenerateAvatarReqValidationError is the validation error returned by
// SysAdminGenerateAvatarReq.Validate if the designated constraints aren't met.
type SysAdminGenerateAvatarReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminGenerateAvatarReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminGenerateAvatarReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminGenerateAvatarReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminGenerateAvatarReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminGenerateAvatarReqValidationError) ErrorName() string {
	return "SysAdminGenerateAvatarReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminGenerateAvatarReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminGenerateAvatarReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminGenerateAvatarReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminGenerateAvatarReqValidationError{}

// Validate checks the field values on SysAdminGenerateAvatarReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminGenerateAvatarReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminGenerateAvatarReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminGenerateAvatarReplyMultiError, or nil if none found.
func (m *SysAdminGenerateAvatarReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminGenerateAvatarReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return SysAdminGenerateAvatarReplyMultiError(errors)
	}

	return nil
}

// SysAdminGenerateAvatarReplyMultiError is an error wrapping multiple
// validation errors returned by SysAdminGenerateAvatarReply.ValidateAll() if
// the designated constraints aren't met.
type SysAdminGenerateAvatarReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminGenerateAvatarReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminGenerateAvatarReplyMultiError) AllErrors() []error { return m }

// SysAdminGenerateAvatarReplyValidationError is the validation error returned
// by SysAdminGenerateAvatarReply.Validate if the designated constraints
// aren't met.
type SysAdminGenerateAvatarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminGenerateAvatarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminGenerateAvatarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminGenerateAvatarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminGenerateAvatarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminGenerateAvatarReplyValidationError) ErrorName() string {
	return "SysAdminGenerateAvatarReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminGenerateAvatarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminGenerateAvatarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminGenerateAvatarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminGenerateAvatarReplyValidationError{}

// Validate checks the field values on SysManageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysManageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysManageInfoMultiError, or
// nil if none found.
func (m *SysManageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for JobID

	// no validation rules for DeptID

	// no validation rules for JobName

	// no validation rules for DeptName

	// no validation rules for Motto

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysManageInfoMultiError(errors)
	}

	return nil
}

// SysManageInfoMultiError is an error wrapping multiple validation errors
// returned by SysManageInfo.ValidateAll() if the designated constraints
// aren't met.
type SysManageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageInfoMultiError) AllErrors() []error { return m }

// SysManageInfoValidationError is the validation error returned by
// SysManageInfo.Validate if the designated constraints aren't met.
type SysManageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageInfoValidationError) ErrorName() string { return "SysManageInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysManageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageInfoValidationError{}

// Validate checks the field values on SysAdminPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminPermissionMultiError, or nil if none found.
func (m *SysAdminPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Pid

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Icon

	// no validation rules for MenuType

	// no validation rules for URL

	// no validation rules for Component

	// no validation rules for Extend

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysAdminPermissionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysAdminPermissionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysAdminPermissionValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysAdminPermissionMultiError(errors)
	}

	return nil
}

// SysAdminPermissionMultiError is an error wrapping multiple validation errors
// returned by SysAdminPermission.ValidateAll() if the designated constraints
// aren't met.
type SysAdminPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminPermissionMultiError) AllErrors() []error { return m }

// SysAdminPermissionValidationError is the validation error returned by
// SysAdminPermission.Validate if the designated constraints aren't met.
type SysAdminPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminPermissionValidationError) ErrorName() string {
	return "SysAdminPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminPermissionValidationError{}

// Validate checks the field values on SysAdminPermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminPermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminPermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminPermissionReqMultiError, or nil if none found.
func (m *SysAdminPermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminPermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminPermissionReqMultiError(errors)
	}

	return nil
}

// SysAdminPermissionReqMultiError is an error wrapping multiple validation
// errors returned by SysAdminPermissionReq.ValidateAll() if the designated
// constraints aren't met.
type SysAdminPermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminPermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminPermissionReqMultiError) AllErrors() []error { return m }

// SysAdminPermissionReqValidationError is the validation error returned by
// SysAdminPermissionReq.Validate if the designated constraints aren't met.
type SysAdminPermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminPermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminPermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminPermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminPermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminPermissionReqValidationError) ErrorName() string {
	return "SysAdminPermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminPermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminPermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminPermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminPermissionReqValidationError{}

// Validate checks the field values on SysAdminPermissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminPermissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminPermissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminPermissionReplyMultiError, or nil if none found.
func (m *SysAdminPermissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminPermissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysAdminPermissionReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysAdminPermissionReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysAdminPermissionReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysAdminPermissionReplyMultiError(errors)
	}

	return nil
}

// SysAdminPermissionReplyMultiError is an error wrapping multiple validation
// errors returned by SysAdminPermissionReply.ValidateAll() if the designated
// constraints aren't met.
type SysAdminPermissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminPermissionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminPermissionReplyMultiError) AllErrors() []error { return m }

// SysAdminPermissionReplyValidationError is the validation error returned by
// SysAdminPermissionReply.Validate if the designated constraints aren't met.
type SysAdminPermissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminPermissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminPermissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminPermissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminPermissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminPermissionReplyValidationError) ErrorName() string {
	return "SysAdminPermissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminPermissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminPermissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminPermissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminPermissionReplyValidationError{}

// Validate checks the field values on SysManageListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysManageListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageListReqMultiError, or nil if none found.
func (m *SysManageListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysManageListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysManageListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysManageListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysManageListReqMultiError(errors)
	}

	return nil
}

// SysManageListReqMultiError is an error wrapping multiple validation errors
// returned by SysManageListReq.ValidateAll() if the designated constraints
// aren't met.
type SysManageListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageListReqMultiError) AllErrors() []error { return m }

// SysManageListReqValidationError is the validation error returned by
// SysManageListReq.Validate if the designated constraints aren't met.
type SysManageListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageListReqValidationError) ErrorName() string { return "SysManageListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysManageListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageListReqValidationError{}

// Validate checks the field values on SysManageListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysManageListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageListReplyMultiError, or nil if none found.
func (m *SysManageListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysManageListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysManageListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysManageListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysManageListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysManageListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysManageListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysManageListReplyMultiError(errors)
	}

	return nil
}

// SysManageListReplyMultiError is an error wrapping multiple validation errors
// returned by SysManageListReply.ValidateAll() if the designated constraints
// aren't met.
type SysManageListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageListReplyMultiError) AllErrors() []error { return m }

// SysManageListReplyValidationError is the validation error returned by
// SysManageListReply.Validate if the designated constraints aren't met.
type SysManageListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageListReplyValidationError) ErrorName() string {
	return "SysManageListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysManageListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageListReplyValidationError{}

// Validate checks the field values on SysManageInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysManageInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageInfoReqMultiError, or nil if none found.
func (m *SysManageInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAdminId()); err != nil {
		err = SysManageInfoReqValidationError{
			field:  "AdminId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysManageInfoReqMultiError(errors)
	}

	return nil
}

func (m *SysManageInfoReq) _validateUuid(uuid string) error {
	if matched := _sys_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SysManageInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysManageInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysManageInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageInfoReqMultiError) AllErrors() []error { return m }

// SysManageInfoReqValidationError is the validation error returned by
// SysManageInfoReq.Validate if the designated constraints aren't met.
type SysManageInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageInfoReqValidationError) ErrorName() string { return "SysManageInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysManageInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageInfoReqValidationError{}

// Validate checks the field values on SysManageInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysManageInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageInfoReplyMultiError, or nil if none found.
func (m *SysManageInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysManageInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysManageInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysManageInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysManageInfoReplyMultiError(errors)
	}

	return nil
}

// SysManageInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SysManageInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SysManageInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageInfoReplyMultiError) AllErrors() []error { return m }

// SysManageInfoReplyValidationError is the validation error returned by
// SysManageInfoReply.Validate if the designated constraints aren't met.
type SysManageInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageInfoReplyValidationError) ErrorName() string {
	return "SysManageInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysManageInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageInfoReplyValidationError{}

// Validate checks the field values on SysManageStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysManageStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageStoreReqMultiError, or nil if none found.
func (m *SysManageStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for Password

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for JobID

	// no validation rules for DeptID

	// no validation rules for Motto

	// no validation rules for Status

	if len(errors) > 0 {
		return SysManageStoreReqMultiError(errors)
	}

	return nil
}

// SysManageStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysManageStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysManageStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageStoreReqMultiError) AllErrors() []error { return m }

// SysManageStoreReqValidationError is the validation error returned by
// SysManageStoreReq.Validate if the designated constraints aren't met.
type SysManageStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageStoreReqValidationError) ErrorName() string {
	return "SysManageStoreReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysManageStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageStoreReqValidationError{}

// Validate checks the field values on SysManageStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysManageStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageStoreReplyMultiError, or nil if none found.
func (m *SysManageStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysManageStoreReplyMultiError(errors)
	}

	return nil
}

// SysManageStoreReplyMultiError is an error wrapping multiple validation
// errors returned by SysManageStoreReply.ValidateAll() if the designated
// constraints aren't met.
type SysManageStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageStoreReplyMultiError) AllErrors() []error { return m }

// SysManageStoreReplyValidationError is the validation error returned by
// SysManageStoreReply.Validate if the designated constraints aren't met.
type SysManageStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageStoreReplyValidationError) ErrorName() string {
	return "SysManageStoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysManageStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageStoreReplyValidationError{}

// Validate checks the field values on SysManageDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysManageDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageDelReqMultiError, or nil if none found.
func (m *SysManageDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysManageDelReqMultiError(errors)
	}

	return nil
}

// SysManageDelReqMultiError is an error wrapping multiple validation errors
// returned by SysManageDelReq.ValidateAll() if the designated constraints
// aren't met.
type SysManageDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageDelReqMultiError) AllErrors() []error { return m }

// SysManageDelReqValidationError is the validation error returned by
// SysManageDelReq.Validate if the designated constraints aren't met.
type SysManageDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageDelReqValidationError) ErrorName() string { return "SysManageDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysManageDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageDelReqValidationError{}

// Validate checks the field values on SysManageDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysManageDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysManageDelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysManageDelReplyMultiError, or nil if none found.
func (m *SysManageDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysManageDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysManageDelReplyMultiError(errors)
	}

	return nil
}

// SysManageDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysManageDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysManageDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysManageDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysManageDelReplyMultiError) AllErrors() []error { return m }

// SysManageDelReplyValidationError is the validation error returned by
// SysManageDelReply.Validate if the designated constraints aren't met.
type SysManageDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysManageDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysManageDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysManageDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysManageDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysManageDelReplyValidationError) ErrorName() string {
	return "SysManageDelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysManageDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysManageDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysManageDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysManageDelReplyValidationError{}

// Validate checks the field values on SysAPIInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIInfoMultiError, or
// nil if none found.
func (m *SysAPIInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysAPIInfoMultiError(errors)
	}

	return nil
}

// SysAPIInfoMultiError is an error wrapping multiple validation errors
// returned by SysAPIInfo.ValidateAll() if the designated constraints aren't met.
type SysAPIInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIInfoMultiError) AllErrors() []error { return m }

// SysAPIInfoValidationError is the validation error returned by
// SysAPIInfo.Validate if the designated constraints aren't met.
type SysAPIInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIInfoValidationError) ErrorName() string { return "SysAPIInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIInfoValidationError{}

// Validate checks the field values on SysAPIListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIListReqMultiError, or
// nil if none found.
func (m *SysAPIListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionId

	if len(errors) > 0 {
		return SysAPIListReqMultiError(errors)
	}

	return nil
}

// SysAPIListReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIListReq.ValidateAll() if the designated constraints
// aren't met.
type SysAPIListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIListReqMultiError) AllErrors() []error { return m }

// SysAPIListReqValidationError is the validation error returned by
// SysAPIListReq.Validate if the designated constraints aren't met.
type SysAPIListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIListReqValidationError) ErrorName() string { return "SysAPIListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIListReqValidationError{}

// Validate checks the field values on SysAPIListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAPIListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAPIListReplyMultiError, or nil if none found.
func (m *SysAPIListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysAPIListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysAPIListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysAPIListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysAPIListReplyMultiError(errors)
	}

	return nil
}

// SysAPIListReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIListReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIListReplyMultiError) AllErrors() []error { return m }

// SysAPIListReplyValidationError is the validation error returned by
// SysAPIListReply.Validate if the designated constraints aren't met.
type SysAPIListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIListReplyValidationError) ErrorName() string { return "SysAPIListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIListReplyValidationError{}

// Validate checks the field values on SysAPIStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIStoreReqMultiError,
// or nil if none found.
func (m *SysAPIStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	if len(errors) > 0 {
		return SysAPIStoreReqMultiError(errors)
	}

	return nil
}

// SysAPIStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysAPIStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIStoreReqMultiError) AllErrors() []error { return m }

// SysAPIStoreReqValidationError is the validation error returned by
// SysAPIStoreReq.Validate if the designated constraints aren't met.
type SysAPIStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIStoreReqValidationError) ErrorName() string { return "SysAPIStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIStoreReqValidationError{}

// Validate checks the field values on SysAPIStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAPIStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAPIStoreReplyMultiError, or nil if none found.
func (m *SysAPIStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysAPIStoreReplyMultiError(errors)
	}

	return nil
}

// SysAPIStoreReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIStoreReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIStoreReplyMultiError) AllErrors() []error { return m }

// SysAPIStoreReplyValidationError is the validation error returned by
// SysAPIStoreReply.Validate if the designated constraints aren't met.
type SysAPIStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIStoreReplyValidationError) ErrorName() string { return "SysAPIStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIStoreReplyValidationError{}

// Validate checks the field values on SysAPIDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIDelReqMultiError, or
// nil if none found.
func (m *SysAPIDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAPIDelReqMultiError(errors)
	}

	return nil
}

// SysAPIDelReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIDelReq.ValidateAll() if the designated constraints aren't met.
type SysAPIDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIDelReqMultiError) AllErrors() []error { return m }

// SysAPIDelReqValidationError is the validation error returned by
// SysAPIDelReq.Validate if the designated constraints aren't met.
type SysAPIDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIDelReqValidationError) ErrorName() string { return "SysAPIDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIDelReqValidationError{}

// Validate checks the field values on SysAPIDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIDelReplyMultiError,
// or nil if none found.
func (m *SysAPIDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAPIDelReplyMultiError(errors)
	}

	return nil
}

// SysAPIDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIDelReplyMultiError) AllErrors() []error { return m }

// SysAPIDelReplyValidationError is the validation error returned by
// SysAPIDelReply.Validate if the designated constraints aren't met.
type SysAPIDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIDelReplyValidationError) ErrorName() string { return "SysAPIDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIDelReplyValidationError{}

// Validate checks the field values on SysDeptInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDeptInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDeptInfoMultiError, or
// nil if none found.
func (m *SysDeptInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Responsible

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Sort

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysDeptInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysDeptInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysDeptInfoValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysDeptInfoMultiError(errors)
	}

	return nil
}

// SysDeptInfoMultiError is an error wrapping multiple validation errors
// returned by SysDeptInfo.ValidateAll() if the designated constraints aren't met.
type SysDeptInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptInfoMultiError) AllErrors() []error { return m }

// SysDeptInfoValidationError is the validation error returned by
// SysDeptInfo.Validate if the designated constraints aren't met.
type SysDeptInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptInfoValidationError) ErrorName() string { return "SysDeptInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptInfoValidationError{}

// Validate checks the field values on SysDeptListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDeptListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDeptListReqMultiError,
// or nil if none found.
func (m *SysDeptListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysDeptListReqMultiError(errors)
	}

	return nil
}

// SysDeptListReqMultiError is an error wrapping multiple validation errors
// returned by SysDeptListReq.ValidateAll() if the designated constraints
// aren't met.
type SysDeptListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptListReqMultiError) AllErrors() []error { return m }

// SysDeptListReqValidationError is the validation error returned by
// SysDeptListReq.Validate if the designated constraints aren't met.
type SysDeptListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptListReqValidationError) ErrorName() string { return "SysDeptListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptListReqValidationError{}

// Validate checks the field values on SysDeptListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysDeptListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDeptListReplyMultiError, or nil if none found.
func (m *SysDeptListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysDeptListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysDeptListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysDeptListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysDeptListReplyMultiError(errors)
	}

	return nil
}

// SysDeptListReplyMultiError is an error wrapping multiple validation errors
// returned by SysDeptListReply.ValidateAll() if the designated constraints
// aren't met.
type SysDeptListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptListReplyMultiError) AllErrors() []error { return m }

// SysDeptListReplyValidationError is the validation error returned by
// SysDeptListReply.Validate if the designated constraints aren't met.
type SysDeptListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptListReplyValidationError) ErrorName() string { return "SysDeptListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptListReplyValidationError{}

// Validate checks the field values on SysDeptInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDeptInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDeptInfoReqMultiError,
// or nil if none found.
func (m *SysDeptInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysDeptInfoReqMultiError(errors)
	}

	return nil
}

// SysDeptInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysDeptInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysDeptInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptInfoReqMultiError) AllErrors() []error { return m }

// SysDeptInfoReqValidationError is the validation error returned by
// SysDeptInfoReq.Validate if the designated constraints aren't met.
type SysDeptInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptInfoReqValidationError) ErrorName() string { return "SysDeptInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptInfoReqValidationError{}

// Validate checks the field values on SysDeptInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysDeptInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDeptInfoReplyMultiError, or nil if none found.
func (m *SysDeptInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysDeptInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysDeptInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysDeptInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysDeptInfoReplyMultiError(errors)
	}

	return nil
}

// SysDeptInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SysDeptInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SysDeptInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptInfoReplyMultiError) AllErrors() []error { return m }

// SysDeptInfoReplyValidationError is the validation error returned by
// SysDeptInfoReply.Validate if the designated constraints aren't met.
type SysDeptInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptInfoReplyValidationError) ErrorName() string { return "SysDeptInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptInfoReplyValidationError{}

// Validate checks the field values on SysDeptStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysDeptStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDeptStoreReqMultiError, or nil if none found.
func (m *SysDeptStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Responsible

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Sort

	if len(errors) > 0 {
		return SysDeptStoreReqMultiError(errors)
	}

	return nil
}

// SysDeptStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysDeptStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysDeptStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptStoreReqMultiError) AllErrors() []error { return m }

// SysDeptStoreReqValidationError is the validation error returned by
// SysDeptStoreReq.Validate if the designated constraints aren't met.
type SysDeptStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptStoreReqValidationError) ErrorName() string { return "SysDeptStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptStoreReqValidationError{}

// Validate checks the field values on SysDeptStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysDeptStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDeptStoreReplyMultiError, or nil if none found.
func (m *SysDeptStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysDeptStoreReplyMultiError(errors)
	}

	return nil
}

// SysDeptStoreReplyMultiError is an error wrapping multiple validation errors
// returned by SysDeptStoreReply.ValidateAll() if the designated constraints
// aren't met.
type SysDeptStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptStoreReplyMultiError) AllErrors() []error { return m }

// SysDeptStoreReplyValidationError is the validation error returned by
// SysDeptStoreReply.Validate if the designated constraints aren't met.
type SysDeptStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptStoreReplyValidationError) ErrorName() string {
	return "SysDeptStoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysDeptStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptStoreReplyValidationError{}

// Validate checks the field values on SysDeptDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDeptDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDeptDelReqMultiError, or
// nil if none found.
func (m *SysDeptDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysDeptDelReqMultiError(errors)
	}

	return nil
}

// SysDeptDelReqMultiError is an error wrapping multiple validation errors
// returned by SysDeptDelReq.ValidateAll() if the designated constraints
// aren't met.
type SysDeptDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptDelReqMultiError) AllErrors() []error { return m }

// SysDeptDelReqValidationError is the validation error returned by
// SysDeptDelReq.Validate if the designated constraints aren't met.
type SysDeptDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptDelReqValidationError) ErrorName() string { return "SysDeptDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptDelReqValidationError{}

// Validate checks the field values on SysDeptDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysDeptDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptDelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDeptDelReplyMultiError, or nil if none found.
func (m *SysDeptDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysDeptDelReplyMultiError(errors)
	}

	return nil
}

// SysDeptDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysDeptDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysDeptDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptDelReplyMultiError) AllErrors() []error { return m }

// SysDeptDelReplyValidationError is the validation error returned by
// SysDeptDelReply.Validate if the designated constraints aren't met.
type SysDeptDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptDelReplyValidationError) ErrorName() string { return "SysDeptDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptDelReplyValidationError{}

// Validate checks the field values on SysJobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobInfoMultiError, or
// nil if none found.
func (m *SysJobInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for Sort

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysJobInfoMultiError(errors)
	}

	return nil
}

// SysJobInfoMultiError is an error wrapping multiple validation errors
// returned by SysJobInfo.ValidateAll() if the designated constraints aren't met.
type SysJobInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobInfoMultiError) AllErrors() []error { return m }

// SysJobInfoValidationError is the validation error returned by
// SysJobInfo.Validate if the designated constraints aren't met.
type SysJobInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobInfoValidationError) ErrorName() string { return "SysJobInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysJobInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobInfoValidationError{}

// Validate checks the field values on SysJobListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobListReqMultiError, or
// nil if none found.
func (m *SysJobListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysJobListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysJobListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysJobListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysJobListReqMultiError(errors)
	}

	return nil
}

// SysJobListReqMultiError is an error wrapping multiple validation errors
// returned by SysJobListReq.ValidateAll() if the designated constraints
// aren't met.
type SysJobListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobListReqMultiError) AllErrors() []error { return m }

// SysJobListReqValidationError is the validation error returned by
// SysJobListReq.Validate if the designated constraints aren't met.
type SysJobListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobListReqValidationError) ErrorName() string { return "SysJobListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysJobListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobListReqValidationError{}

// Validate checks the field values on SysJobListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysJobListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysJobListReplyMultiError, or nil if none found.
func (m *SysJobListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysJobListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysJobListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysJobListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysJobListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysJobListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysJobListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysJobListReplyMultiError(errors)
	}

	return nil
}

// SysJobListReplyMultiError is an error wrapping multiple validation errors
// returned by SysJobListReply.ValidateAll() if the designated constraints
// aren't met.
type SysJobListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobListReplyMultiError) AllErrors() []error { return m }

// SysJobListReplyValidationError is the validation error returned by
// SysJobListReply.Validate if the designated constraints aren't met.
type SysJobListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobListReplyValidationError) ErrorName() string { return "SysJobListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysJobListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobListReplyValidationError{}

// Validate checks the field values on SysJobInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobInfoReqMultiError, or
// nil if none found.
func (m *SysJobInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysJobInfoReqMultiError(errors)
	}

	return nil
}

// SysJobInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysJobInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysJobInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobInfoReqMultiError) AllErrors() []error { return m }

// SysJobInfoReqValidationError is the validation error returned by
// SysJobInfoReq.Validate if the designated constraints aren't met.
type SysJobInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobInfoReqValidationError) ErrorName() string { return "SysJobInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysJobInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobInfoReqValidationError{}

// Validate checks the field values on SysJobInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysJobInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysJobInfoReplyMultiError, or nil if none found.
func (m *SysJobInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysJobInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysJobInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysJobInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysJobInfoReplyMultiError(errors)
	}

	return nil
}

// SysJobInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SysJobInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SysJobInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobInfoReplyMultiError) AllErrors() []error { return m }

// SysJobInfoReplyValidationError is the validation error returned by
// SysJobInfoReply.Validate if the designated constraints aren't met.
type SysJobInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobInfoReplyValidationError) ErrorName() string { return "SysJobInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysJobInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobInfoReplyValidationError{}

// Validate checks the field values on SysJobStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobStoreReqMultiError,
// or nil if none found.
func (m *SysJobStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for Sort

	if len(errors) > 0 {
		return SysJobStoreReqMultiError(errors)
	}

	return nil
}

// SysJobStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysJobStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysJobStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobStoreReqMultiError) AllErrors() []error { return m }

// SysJobStoreReqValidationError is the validation error returned by
// SysJobStoreReq.Validate if the designated constraints aren't met.
type SysJobStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobStoreReqValidationError) ErrorName() string { return "SysJobStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysJobStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobStoreReqValidationError{}

// Validate checks the field values on SysJobStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysJobStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysJobStoreReplyMultiError, or nil if none found.
func (m *SysJobStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysJobStoreReplyMultiError(errors)
	}

	return nil
}

// SysJobStoreReplyMultiError is an error wrapping multiple validation errors
// returned by SysJobStoreReply.ValidateAll() if the designated constraints
// aren't met.
type SysJobStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobStoreReplyMultiError) AllErrors() []error { return m }

// SysJobStoreReplyValidationError is the validation error returned by
// SysJobStoreReply.Validate if the designated constraints aren't met.
type SysJobStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobStoreReplyValidationError) ErrorName() string { return "SysJobStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysJobStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobStoreReplyValidationError{}

// Validate checks the field values on SysJobDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobDelReqMultiError, or
// nil if none found.
func (m *SysJobDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysJobDelReqMultiError(errors)
	}

	return nil
}

// SysJobDelReqMultiError is an error wrapping multiple validation errors
// returned by SysJobDelReq.ValidateAll() if the designated constraints aren't met.
type SysJobDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobDelReqMultiError) AllErrors() []error { return m }

// SysJobDelReqValidationError is the validation error returned by
// SysJobDelReq.Validate if the designated constraints aren't met.
type SysJobDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobDelReqValidationError) ErrorName() string { return "SysJobDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysJobDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobDelReqValidationError{}

// Validate checks the field values on SysJobDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysJobDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysJobDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysJobDelReplyMultiError,
// or nil if none found.
func (m *SysJobDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysJobDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysJobDelReplyMultiError(errors)
	}

	return nil
}

// SysJobDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysJobDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysJobDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysJobDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysJobDelReplyMultiError) AllErrors() []error { return m }

// SysJobDelReplyValidationError is the validation error returned by
// SysJobDelReply.Validate if the designated constraints aren't met.
type SysJobDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysJobDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysJobDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysJobDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysJobDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysJobDelReplyValidationError) ErrorName() string { return "SysJobDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysJobDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysJobDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysJobDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysJobDelReplyValidationError{}

// Validate checks the field values on SysLogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogInfoMultiError, or
// nil if none found.
func (m *SysLogInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AdminID

	// no validation rules for Username

	// no validation rules for Ip

	// no validation rules for Uri

	// no validation rules for UriDesc

	// no validation rules for Useragent

	// no validation rules for Req

	// no validation rules for Resp

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return SysLogInfoMultiError(errors)
	}

	return nil
}

// SysLogInfoMultiError is an error wrapping multiple validation errors
// returned by SysLogInfo.ValidateAll() if the designated constraints aren't met.
type SysLogInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogInfoMultiError) AllErrors() []error { return m }

// SysLogInfoValidationError is the validation error returned by
// SysLogInfo.Validate if the designated constraints aren't met.
type SysLogInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogInfoValidationError) ErrorName() string { return "SysLogInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysLogInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogInfoValidationError{}

// Validate checks the field values on SysLogListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogListReqMultiError, or
// nil if none found.
func (m *SysLogListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysLogListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysLogListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysLogListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysLogListReqMultiError(errors)
	}

	return nil
}

// SysLogListReqMultiError is an error wrapping multiple validation errors
// returned by SysLogListReq.ValidateAll() if the designated constraints
// aren't met.
type SysLogListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogListReqMultiError) AllErrors() []error { return m }

// SysLogListReqValidationError is the validation error returned by
// SysLogListReq.Validate if the designated constraints aren't met.
type SysLogListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogListReqValidationError) ErrorName() string { return "SysLogListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysLogListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogListReqValidationError{}

// Validate checks the field values on SysLogListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogListRespMultiError,
// or nil if none found.
func (m *SysLogListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysLogListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysLogListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysLogListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysLogListRespValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysLogListRespValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysLogListRespValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysLogListRespMultiError(errors)
	}

	return nil
}

// SysLogListRespMultiError is an error wrapping multiple validation errors
// returned by SysLogListResp.ValidateAll() if the designated constraints
// aren't met.
type SysLogListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogListRespMultiError) AllErrors() []error { return m }

// SysLogListRespValidationError is the validation error returned by
// SysLogListResp.Validate if the designated constraints aren't met.
type SysLogListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogListRespValidationError) ErrorName() string { return "SysLogListRespValidationError" }

// Error satisfies the builtin error interface
func (e SysLogListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogListRespValidationError{}

// Validate checks the field values on SysLogInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogInfoReqMultiError, or
// nil if none found.
func (m *SysLogInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysLogInfoReqMultiError(errors)
	}

	return nil
}

// SysLogInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysLogInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysLogInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogInfoReqMultiError) AllErrors() []error { return m }

// SysLogInfoReqValidationError is the validation error returned by
// SysLogInfoReq.Validate if the designated constraints aren't met.
type SysLogInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogInfoReqValidationError) ErrorName() string { return "SysLogInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysLogInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogInfoReqValidationError{}

// Validate checks the field values on SysLogInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogInfoRespMultiError,
// or nil if none found.
func (m *SysLogInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysLogInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysLogInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysLogInfoRespValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysLogInfoRespMultiError(errors)
	}

	return nil
}

// SysLogInfoRespMultiError is an error wrapping multiple validation errors
// returned by SysLogInfoResp.ValidateAll() if the designated constraints
// aren't met.
type SysLogInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogInfoRespMultiError) AllErrors() []error { return m }

// SysLogInfoRespValidationError is the validation error returned by
// SysLogInfoResp.Validate if the designated constraints aren't met.
type SysLogInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogInfoRespValidationError) ErrorName() string { return "SysLogInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e SysLogInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogInfoRespValidationError{}

// Validate checks the field values on SysLogStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogStoreReqMultiError,
// or nil if none found.
func (m *SysLogStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminID

	// no validation rules for Username

	// no validation rules for Ip

	// no validation rules for Uri

	// no validation rules for UriDesc

	// no validation rules for Useragent

	// no validation rules for Req

	// no validation rules for Resp

	if len(errors) > 0 {
		return SysLogStoreReqMultiError(errors)
	}

	return nil
}

// SysLogStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysLogStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysLogStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogStoreReqMultiError) AllErrors() []error { return m }

// SysLogStoreReqValidationError is the validation error returned by
// SysLogStoreReq.Validate if the designated constraints aren't met.
type SysLogStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogStoreReqValidationError) ErrorName() string { return "SysLogStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysLogStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogStoreReqValidationError{}

// Validate checks the field values on SysLogStoreResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysLogStoreResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogStoreResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysLogStoreRespMultiError, or nil if none found.
func (m *SysLogStoreResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogStoreResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysLogStoreRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysLogStoreRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysLogStoreRespValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysLogStoreRespMultiError(errors)
	}

	return nil
}

// SysLogStoreRespMultiError is an error wrapping multiple validation errors
// returned by SysLogStoreResp.ValidateAll() if the designated constraints
// aren't met.
type SysLogStoreRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogStoreRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogStoreRespMultiError) AllErrors() []error { return m }

// SysLogStoreRespValidationError is the validation error returned by
// SysLogStoreResp.Validate if the designated constraints aren't met.
type SysLogStoreRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogStoreRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogStoreRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogStoreRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogStoreRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogStoreRespValidationError) ErrorName() string { return "SysLogStoreRespValidationError" }

// Error satisfies the builtin error interface
func (e SysLogStoreRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogStoreResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogStoreRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogStoreRespValidationError{}

// Validate checks the field values on SysPermissionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionInfoMultiError, or nil if none found.
func (m *SysPermissionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Icon

	// no validation rules for MenuType

	// no validation rules for Url

	// no validation rules for Component

	// no validation rules for Keepalive

	// no validation rules for Extend

	// no validation rules for Remark

	// no validation rules for Sort

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysPermissionInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysPermissionInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysPermissionInfoValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysPermissionInfoMultiError(errors)
	}

	return nil
}

// SysPermissionInfoMultiError is an error wrapping multiple validation errors
// returned by SysPermissionInfo.ValidateAll() if the designated constraints
// aren't met.
type SysPermissionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionInfoMultiError) AllErrors() []error { return m }

// SysPermissionInfoValidationError is the validation error returned by
// SysPermissionInfo.Validate if the designated constraints aren't met.
type SysPermissionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionInfoValidationError) ErrorName() string {
	return "SysPermissionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionInfoValidationError{}

// Validate checks the field values on SysPermissionListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionListReqMultiError, or nil if none found.
func (m *SysPermissionListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysPermissionListReqMultiError(errors)
	}

	return nil
}

// SysPermissionListReqMultiError is an error wrapping multiple validation
// errors returned by SysPermissionListReq.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionListReqMultiError) AllErrors() []error { return m }

// SysPermissionListReqValidationError is the validation error returned by
// SysPermissionListReq.Validate if the designated constraints aren't met.
type SysPermissionListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionListReqValidationError) ErrorName() string {
	return "SysPermissionListReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionListReqValidationError{}

// Validate checks the field values on SysPermissionListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionListRespMultiError, or nil if none found.
func (m *SysPermissionListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysPermissionListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysPermissionListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysPermissionListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysPermissionListRespMultiError(errors)
	}

	return nil
}

// SysPermissionListRespMultiError is an error wrapping multiple validation
// errors returned by SysPermissionListResp.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionListRespMultiError) AllErrors() []error { return m }

// SysPermissionListRespValidationError is the validation error returned by
// SysPermissionListResp.Validate if the designated constraints aren't met.
type SysPermissionListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionListRespValidationError) ErrorName() string {
	return "SysPermissionListRespValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionListRespValidationError{}

// Validate checks the field values on SysPermissionInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionInfoReqMultiError, or nil if none found.
func (m *SysPermissionInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysPermissionInfoReqMultiError(errors)
	}

	return nil
}

// SysPermissionInfoReqMultiError is an error wrapping multiple validation
// errors returned by SysPermissionInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionInfoReqMultiError) AllErrors() []error { return m }

// SysPermissionInfoReqValidationError is the validation error returned by
// SysPermissionInfoReq.Validate if the designated constraints aren't met.
type SysPermissionInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionInfoReqValidationError) ErrorName() string {
	return "SysPermissionInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionInfoReqValidationError{}

// Validate checks the field values on SysPermissionInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionInfoRespMultiError, or nil if none found.
func (m *SysPermissionInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysPermissionInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysPermissionInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysPermissionInfoRespValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysPermissionInfoRespMultiError(errors)
	}

	return nil
}

// SysPermissionInfoRespMultiError is an error wrapping multiple validation
// errors returned by SysPermissionInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionInfoRespMultiError) AllErrors() []error { return m }

// SysPermissionInfoRespValidationError is the validation error returned by
// SysPermissionInfoResp.Validate if the designated constraints aren't met.
type SysPermissionInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionInfoRespValidationError) ErrorName() string {
	return "SysPermissionInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionInfoRespValidationError{}

// Validate checks the field values on SysPermissionStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionStoreReqMultiError, or nil if none found.
func (m *SysPermissionStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Icon

	// no validation rules for MenuType

	// no validation rules for Url

	// no validation rules for Component

	// no validation rules for Keepalive

	// no validation rules for Extend

	// no validation rules for Remark

	// no validation rules for Sort

	// no validation rules for Status

	if len(errors) > 0 {
		return SysPermissionStoreReqMultiError(errors)
	}

	return nil
}

// SysPermissionStoreReqMultiError is an error wrapping multiple validation
// errors returned by SysPermissionStoreReq.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionStoreReqMultiError) AllErrors() []error { return m }

// SysPermissionStoreReqValidationError is the validation error returned by
// SysPermissionStoreReq.Validate if the designated constraints aren't met.
type SysPermissionStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionStoreReqValidationError) ErrorName() string {
	return "SysPermissionStoreReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionStoreReqValidationError{}

// Validate checks the field values on SysPermissionStoreResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionStoreResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionStoreResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionStoreRespMultiError, or nil if none found.
func (m *SysPermissionStoreResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionStoreResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysPermissionStoreRespMultiError(errors)
	}

	return nil
}

// SysPermissionStoreRespMultiError is an error wrapping multiple validation
// errors returned by SysPermissionStoreResp.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionStoreRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionStoreRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionStoreRespMultiError) AllErrors() []error { return m }

// SysPermissionStoreRespValidationError is the validation error returned by
// SysPermissionStoreResp.Validate if the designated constraints aren't met.
type SysPermissionStoreRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionStoreRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionStoreRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionStoreRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionStoreRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionStoreRespValidationError) ErrorName() string {
	return "SysPermissionStoreRespValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionStoreRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionStoreResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionStoreRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionStoreRespValidationError{}

// Validate checks the field values on SysPermissionDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionDelReqMultiError, or nil if none found.
func (m *SysPermissionDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysPermissionDelReqMultiError(errors)
	}

	return nil
}

// SysPermissionDelReqMultiError is an error wrapping multiple validation
// errors returned by SysPermissionDelReq.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionDelReqMultiError) AllErrors() []error { return m }

// SysPermissionDelReqValidationError is the validation error returned by
// SysPermissionDelReq.Validate if the designated constraints aren't met.
type SysPermissionDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionDelReqValidationError) ErrorName() string {
	return "SysPermissionDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionDelReqValidationError{}

// Validate checks the field values on SysPermissionDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionDelRespMultiError, or nil if none found.
func (m *SysPermissionDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysPermissionDelRespMultiError(errors)
	}

	return nil
}

// SysPermissionDelRespMultiError is an error wrapping multiple validation
// errors returned by SysPermissionDelResp.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionDelRespMultiError) AllErrors() []error { return m }

// SysPermissionDelRespValidationError is the validation error returned by
// SysPermissionDelResp.Validate if the designated constraints aren't met.
type SysPermissionDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionDelRespValidationError) ErrorName() string {
	return "SysPermissionDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionDelRespValidationError{}

// Validate checks the field values on SysPermissionStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionStatusReqMultiError, or nil if none found.
func (m *SysPermissionStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return SysPermissionStatusReqMultiError(errors)
	}

	return nil
}

// SysPermissionStatusReqMultiError is an error wrapping multiple validation
// errors returned by SysPermissionStatusReq.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionStatusReqMultiError) AllErrors() []error { return m }

// SysPermissionStatusReqValidationError is the validation error returned by
// SysPermissionStatusReq.Validate if the designated constraints aren't met.
type SysPermissionStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionStatusReqValidationError) ErrorName() string {
	return "SysPermissionStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionStatusReqValidationError{}

// Validate checks the field values on SysPermissionStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysPermissionStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysPermissionStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysPermissionStatusRespMultiError, or nil if none found.
func (m *SysPermissionStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysPermissionStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysPermissionStatusRespMultiError(errors)
	}

	return nil
}

// SysPermissionStatusRespMultiError is an error wrapping multiple validation
// errors returned by SysPermissionStatusResp.ValidateAll() if the designated
// constraints aren't met.
type SysPermissionStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysPermissionStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysPermissionStatusRespMultiError) AllErrors() []error { return m }

// SysPermissionStatusRespValidationError is the validation error returned by
// SysPermissionStatusResp.Validate if the designated constraints aren't met.
type SysPermissionStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysPermissionStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysPermissionStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysPermissionStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysPermissionStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysPermissionStatusRespValidationError) ErrorName() string {
	return "SysPermissionStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SysPermissionStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysPermissionStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysPermissionStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysPermissionStatusRespValidationError{}

// Validate checks the field values on SysRoleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleInfoMultiError, or
// nil if none found.
func (m *SysRoleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for Sort

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysRoleInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysRoleInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysRoleInfoValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysRoleInfoMultiError(errors)
	}

	return nil
}

// SysRoleInfoMultiError is an error wrapping multiple validation errors
// returned by SysRoleInfo.ValidateAll() if the designated constraints aren't met.
type SysRoleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleInfoMultiError) AllErrors() []error { return m }

// SysRoleInfoValidationError is the validation error returned by
// SysRoleInfo.Validate if the designated constraints aren't met.
type SysRoleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleInfoValidationError) ErrorName() string { return "SysRoleInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleInfoValidationError{}

// Validate checks the field values on SysRoleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleListReqMultiError,
// or nil if none found.
func (m *SysRoleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleListReqMultiError(errors)
	}

	return nil
}

// SysRoleListReqMultiError is an error wrapping multiple validation errors
// returned by SysRoleListReq.ValidateAll() if the designated constraints
// aren't met.
type SysRoleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleListReqMultiError) AllErrors() []error { return m }

// SysRoleListReqValidationError is the validation error returned by
// SysRoleListReq.Validate if the designated constraints aren't met.
type SysRoleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleListReqValidationError) ErrorName() string { return "SysRoleListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleListReqValidationError{}

// Validate checks the field values on SysRoleListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysRoleListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleListRespMultiError, or nil if none found.
func (m *SysRoleListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysRoleListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysRoleListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysRoleListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysRoleListRespMultiError(errors)
	}

	return nil
}

// SysRoleListRespMultiError is an error wrapping multiple validation errors
// returned by SysRoleListResp.ValidateAll() if the designated constraints
// aren't met.
type SysRoleListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleListRespMultiError) AllErrors() []error { return m }

// SysRoleListRespValidationError is the validation error returned by
// SysRoleListResp.Validate if the designated constraints aren't met.
type SysRoleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleListRespValidationError) ErrorName() string { return "SysRoleListRespValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleListRespValidationError{}

// Validate checks the field values on SysRoleInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleInfoReqMultiError,
// or nil if none found.
func (m *SysRoleInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysRoleInfoReqMultiError(errors)
	}

	return nil
}

// SysRoleInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysRoleInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysRoleInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleInfoReqMultiError) AllErrors() []error { return m }

// SysRoleInfoReqValidationError is the validation error returned by
// SysRoleInfoReq.Validate if the designated constraints aren't met.
type SysRoleInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleInfoReqValidationError) ErrorName() string { return "SysRoleInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleInfoReqValidationError{}

// Validate checks the field values on SysRoleInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysRoleInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleInfoRespMultiError, or nil if none found.
func (m *SysRoleInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysRoleInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysRoleInfoRespValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysRoleInfoRespValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SysRoleInfoRespMultiError(errors)
	}

	return nil
}

// SysRoleInfoRespMultiError is an error wrapping multiple validation errors
// returned by SysRoleInfoResp.ValidateAll() if the designated constraints
// aren't met.
type SysRoleInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleInfoRespMultiError) AllErrors() []error { return m }

// SysRoleInfoRespValidationError is the validation error returned by
// SysRoleInfoResp.Validate if the designated constraints aren't met.
type SysRoleInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleInfoRespValidationError) ErrorName() string { return "SysRoleInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleInfoRespValidationError{}

// Validate checks the field values on SysRoleStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysRoleStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleStoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleStoreReqMultiError, or nil if none found.
func (m *SysRoleStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for Status

	if len(errors) > 0 {
		return SysRoleStoreReqMultiError(errors)
	}

	return nil
}

// SysRoleStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysRoleStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysRoleStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleStoreReqMultiError) AllErrors() []error { return m }

// SysRoleStoreReqValidationError is the validation error returned by
// SysRoleStoreReq.Validate if the designated constraints aren't met.
type SysRoleStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleStoreReqValidationError) ErrorName() string { return "SysRoleStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleStoreReqValidationError{}

// Validate checks the field values on SysRoleStoreResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysRoleStoreResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleStoreResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysRoleStoreRespMultiError, or nil if none found.
func (m *SysRoleStoreResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleStoreResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleStoreRespMultiError(errors)
	}

	return nil
}

// SysRoleStoreRespMultiError is an error wrapping multiple validation errors
// returned by SysRoleStoreResp.ValidateAll() if the designated constraints
// aren't met.
type SysRoleStoreRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleStoreRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleStoreRespMultiError) AllErrors() []error { return m }

// SysRoleStoreRespValidationError is the validation error returned by
// SysRoleStoreResp.Validate if the designated constraints aren't met.
type SysRoleStoreRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleStoreRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleStoreRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleStoreRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleStoreRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleStoreRespValidationError) ErrorName() string { return "SysRoleStoreRespValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleStoreRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleStoreResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleStoreRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleStoreRespValidationError{}

// Validate checks the field values on SysRoleDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleDelReqMultiError, or
// nil if none found.
func (m *SysRoleDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleDelReqMultiError(errors)
	}

	return nil
}

// SysRoleDelReqMultiError is an error wrapping multiple validation errors
// returned by SysRoleDelReq.ValidateAll() if the designated constraints
// aren't met.
type SysRoleDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleDelReqMultiError) AllErrors() []error { return m }

// SysRoleDelReqValidationError is the validation error returned by
// SysRoleDelReq.Validate if the designated constraints aren't met.
type SysRoleDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleDelReqValidationError) ErrorName() string { return "SysRoleDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleDelReqValidationError{}

// Validate checks the field values on SysRoleDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRoleDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRoleDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysRoleDelRespMultiError,
// or nil if none found.
func (m *SysRoleDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRoleDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysRoleDelRespMultiError(errors)
	}

	return nil
}

// SysRoleDelRespMultiError is an error wrapping multiple validation errors
// returned by SysRoleDelResp.ValidateAll() if the designated constraints
// aren't met.
type SysRoleDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleDelRespMultiError) AllErrors() []error { return m }

// SysRoleDelRespValidationError is the validation error returned by
// SysRoleDelResp.Validate if the designated constraints aren't met.
type SysRoleDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleDelRespValidationError) ErrorName() string { return "SysRoleDelRespValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRoleDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleDelRespValidationError{}
