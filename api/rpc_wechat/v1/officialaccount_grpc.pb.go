// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_wechat/v1/officialaccount.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OfficialAccount_MenuConfigInfo_FullMethodName  = "/api.rpc_wechat.v1.OfficialAccount/MenuConfigInfo"
	OfficialAccount_MenuConfigStore_FullMethodName = "/api.rpc_wechat.v1.OfficialAccount/MenuConfigStore"
	OfficialAccount_MenuList_FullMethodName        = "/api.rpc_wechat.v1.OfficialAccount/MenuList"
	OfficialAccount_MenuStore_FullMethodName       = "/api.rpc_wechat.v1.OfficialAccount/MenuStore"
	OfficialAccount_MenuDel_FullMethodName         = "/api.rpc_wechat.v1.OfficialAccount/MenuDel"
)

// OfficialAccountClient is the client API for OfficialAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficialAccountClient interface {
	// 公众号-配置查看
	MenuConfigInfo(ctx context.Context, in *MenuConfigInfoReq, opts ...grpc.CallOption) (*MenuConfigInfoReply, error)
	// 公众号-配置保存
	MenuConfigStore(ctx context.Context, in *MenuConfigStoreReq, opts ...grpc.CallOption) (*MenuConfigStoreReply, error)
	// 公众号-菜单查看
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListReply, error)
	// 公众号-菜单保存
	MenuStore(ctx context.Context, in *MenuStoreReq, opts ...grpc.CallOption) (*MenuStoreReply, error)
	// 公众号-菜单删除
	MenuDel(ctx context.Context, in *MenuDelReq, opts ...grpc.CallOption) (*MenuDelReply, error)
}

type officialAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficialAccountClient(cc grpc.ClientConnInterface) OfficialAccountClient {
	return &officialAccountClient{cc}
}

func (c *officialAccountClient) MenuConfigInfo(ctx context.Context, in *MenuConfigInfoReq, opts ...grpc.CallOption) (*MenuConfigInfoReply, error) {
	out := new(MenuConfigInfoReply)
	err := c.cc.Invoke(ctx, OfficialAccount_MenuConfigInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) MenuConfigStore(ctx context.Context, in *MenuConfigStoreReq, opts ...grpc.CallOption) (*MenuConfigStoreReply, error) {
	out := new(MenuConfigStoreReply)
	err := c.cc.Invoke(ctx, OfficialAccount_MenuConfigStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListReply, error) {
	out := new(MenuListReply)
	err := c.cc.Invoke(ctx, OfficialAccount_MenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) MenuStore(ctx context.Context, in *MenuStoreReq, opts ...grpc.CallOption) (*MenuStoreReply, error) {
	out := new(MenuStoreReply)
	err := c.cc.Invoke(ctx, OfficialAccount_MenuStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) MenuDel(ctx context.Context, in *MenuDelReq, opts ...grpc.CallOption) (*MenuDelReply, error) {
	out := new(MenuDelReply)
	err := c.cc.Invoke(ctx, OfficialAccount_MenuDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficialAccountServer is the server API for OfficialAccount service.
// All implementations must embed UnimplementedOfficialAccountServer
// for forward compatibility
type OfficialAccountServer interface {
	// 公众号-配置查看
	MenuConfigInfo(context.Context, *MenuConfigInfoReq) (*MenuConfigInfoReply, error)
	// 公众号-配置保存
	MenuConfigStore(context.Context, *MenuConfigStoreReq) (*MenuConfigStoreReply, error)
	// 公众号-菜单查看
	MenuList(context.Context, *MenuListReq) (*MenuListReply, error)
	// 公众号-菜单保存
	MenuStore(context.Context, *MenuStoreReq) (*MenuStoreReply, error)
	// 公众号-菜单删除
	MenuDel(context.Context, *MenuDelReq) (*MenuDelReply, error)
	mustEmbedUnimplementedOfficialAccountServer()
}

// UnimplementedOfficialAccountServer must be embedded to have forward compatible implementations.
type UnimplementedOfficialAccountServer struct {
}

func (UnimplementedOfficialAccountServer) MenuConfigInfo(context.Context, *MenuConfigInfoReq) (*MenuConfigInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuConfigInfo not implemented")
}
func (UnimplementedOfficialAccountServer) MenuConfigStore(context.Context, *MenuConfigStoreReq) (*MenuConfigStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuConfigStore not implemented")
}
func (UnimplementedOfficialAccountServer) MenuList(context.Context, *MenuListReq) (*MenuListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedOfficialAccountServer) MenuStore(context.Context, *MenuStoreReq) (*MenuStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuStore not implemented")
}
func (UnimplementedOfficialAccountServer) MenuDel(context.Context, *MenuDelReq) (*MenuDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDel not implemented")
}
func (UnimplementedOfficialAccountServer) mustEmbedUnimplementedOfficialAccountServer() {}

// UnsafeOfficialAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficialAccountServer will
// result in compilation errors.
type UnsafeOfficialAccountServer interface {
	mustEmbedUnimplementedOfficialAccountServer()
}

func RegisterOfficialAccountServer(s grpc.ServiceRegistrar, srv OfficialAccountServer) {
	s.RegisterService(&OfficialAccount_ServiceDesc, srv)
}

func _OfficialAccount_MenuConfigInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuConfigInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).MenuConfigInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_MenuConfigInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).MenuConfigInfo(ctx, req.(*MenuConfigInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_MenuConfigStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuConfigStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).MenuConfigStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_MenuConfigStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).MenuConfigStore(ctx, req.(*MenuConfigStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_MenuStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).MenuStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_MenuStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).MenuStore(ctx, req.(*MenuStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_MenuDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).MenuDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_MenuDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).MenuDel(ctx, req.(*MenuDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficialAccount_ServiceDesc is the grpc.ServiceDesc for OfficialAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficialAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_wechat.v1.OfficialAccount",
	HandlerType: (*OfficialAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MenuConfigInfo",
			Handler:    _OfficialAccount_MenuConfigInfo_Handler,
		},
		{
			MethodName: "MenuConfigStore",
			Handler:    _OfficialAccount_MenuConfigStore_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _OfficialAccount_MenuList_Handler,
		},
		{
			MethodName: "MenuStore",
			Handler:    _OfficialAccount_MenuStore_Handler,
		},
		{
			MethodName: "MenuDel",
			Handler:    _OfficialAccount_MenuDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_wechat/v1/officialaccount.proto",
}
