// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_wechat/v1/officialaccount.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OfficialAccount_OfficialAccountMenu_FullMethodName = "/api.rpc_wechat.v1.OfficialAccount/OfficialAccountMenu"
)

// OfficialAccountClient is the client API for OfficialAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficialAccountClient interface {
	// 公众号-菜单
	OfficialAccountMenu(ctx context.Context, in *OfficialAccountMenuReq, opts ...grpc.CallOption) (*OfficialAccountMenuReply, error)
}

type officialAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficialAccountClient(cc grpc.ClientConnInterface) OfficialAccountClient {
	return &officialAccountClient{cc}
}

func (c *officialAccountClient) OfficialAccountMenu(ctx context.Context, in *OfficialAccountMenuReq, opts ...grpc.CallOption) (*OfficialAccountMenuReply, error) {
	out := new(OfficialAccountMenuReply)
	err := c.cc.Invoke(ctx, OfficialAccount_OfficialAccountMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficialAccountServer is the server API for OfficialAccount service.
// All implementations must embed UnimplementedOfficialAccountServer
// for forward compatibility
type OfficialAccountServer interface {
	// 公众号-菜单
	OfficialAccountMenu(context.Context, *OfficialAccountMenuReq) (*OfficialAccountMenuReply, error)
	mustEmbedUnimplementedOfficialAccountServer()
}

// UnimplementedOfficialAccountServer must be embedded to have forward compatible implementations.
type UnimplementedOfficialAccountServer struct {
}

func (UnimplementedOfficialAccountServer) OfficialAccountMenu(context.Context, *OfficialAccountMenuReq) (*OfficialAccountMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialAccountMenu not implemented")
}
func (UnimplementedOfficialAccountServer) mustEmbedUnimplementedOfficialAccountServer() {}

// UnsafeOfficialAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficialAccountServer will
// result in compilation errors.
type UnsafeOfficialAccountServer interface {
	mustEmbedUnimplementedOfficialAccountServer()
}

func RegisterOfficialAccountServer(s grpc.ServiceRegistrar, srv OfficialAccountServer) {
	s.RegisterService(&OfficialAccount_ServiceDesc, srv)
}

func _OfficialAccount_OfficialAccountMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialAccountMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).OfficialAccountMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_OfficialAccountMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).OfficialAccountMenu(ctx, req.(*OfficialAccountMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficialAccount_ServiceDesc is the grpc.ServiceDesc for OfficialAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficialAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_wechat.v1.OfficialAccount",
	HandlerType: (*OfficialAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OfficialAccountMenu",
			Handler:    _OfficialAccount_OfficialAccountMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_wechat/v1/officialaccount.proto",
}
