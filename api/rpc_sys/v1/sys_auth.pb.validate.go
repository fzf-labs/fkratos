// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_sys/v1/sys_auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _sys_auth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SysAuthLoginCaptchaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginCaptchaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginCaptchaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginCaptchaReqMultiError, or nil if none found.
func (m *SysAuthLoginCaptchaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginCaptchaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAuthLoginCaptchaReqMultiError(errors)
	}

	return nil
}

// SysAuthLoginCaptchaReqMultiError is an error wrapping multiple validation
// errors returned by SysAuthLoginCaptchaReq.ValidateAll() if the designated
// constraints aren't met.
type SysAuthLoginCaptchaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginCaptchaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginCaptchaReqMultiError) AllErrors() []error { return m }

// SysAuthLoginCaptchaReqValidationError is the validation error returned by
// SysAuthLoginCaptchaReq.Validate if the designated constraints aren't met.
type SysAuthLoginCaptchaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginCaptchaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginCaptchaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginCaptchaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginCaptchaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginCaptchaReqValidationError) ErrorName() string {
	return "SysAuthLoginCaptchaReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginCaptchaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginCaptchaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginCaptchaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginCaptchaReqValidationError{}

// Validate checks the field values on SysAuthLoginCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginCaptchaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginCaptchaReplyMultiError, or nil if none found.
func (m *SysAuthLoginCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for CaptchaImg

	if len(errors) > 0 {
		return SysAuthLoginCaptchaReplyMultiError(errors)
	}

	return nil
}

// SysAuthLoginCaptchaReplyMultiError is an error wrapping multiple validation
// errors returned by SysAuthLoginCaptchaReply.ValidateAll() if the designated
// constraints aren't met.
type SysAuthLoginCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginCaptchaReplyMultiError) AllErrors() []error { return m }

// SysAuthLoginCaptchaReplyValidationError is the validation error returned by
// SysAuthLoginCaptchaReply.Validate if the designated constraints aren't met.
type SysAuthLoginCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginCaptchaReplyValidationError) ErrorName() string {
	return "SysAuthLoginCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginCaptchaReplyValidationError{}

// Validate checks the field values on SysAuthLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginReqMultiError, or nil if none found.
func (m *SysAuthLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for VerifyCode

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return SysAuthLoginReqMultiError(errors)
	}

	return nil
}

// SysAuthLoginReqMultiError is an error wrapping multiple validation errors
// returned by SysAuthLoginReq.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginReqMultiError) AllErrors() []error { return m }

// SysAuthLoginReqValidationError is the validation error returned by
// SysAuthLoginReq.Validate if the designated constraints aren't met.
type SysAuthLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginReqValidationError) ErrorName() string { return "SysAuthLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAuthLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginReqValidationError{}

// Validate checks the field values on SysAuthLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLoginReplyMultiError, or nil if none found.
func (m *SysAuthLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiredAt

	// no validation rules for RefreshAt

	if len(errors) > 0 {
		return SysAuthLoginReplyMultiError(errors)
	}

	return nil
}

// SysAuthLoginReplyMultiError is an error wrapping multiple validation errors
// returned by SysAuthLoginReply.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLoginReplyMultiError) AllErrors() []error { return m }

// SysAuthLoginReplyValidationError is the validation error returned by
// SysAuthLoginReply.Validate if the designated constraints aren't met.
type SysAuthLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLoginReplyValidationError) ErrorName() string {
	return "SysAuthLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLoginReplyValidationError{}

// Validate checks the field values on SysAuthLogoutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLogoutReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLogoutReqMultiError, or nil if none found.
func (m *SysAuthLogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAdminId()); err != nil {
		err = SysAuthLogoutReqValidationError{
			field:  "AdminId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SysAuthLogoutReqMultiError(errors)
	}

	return nil
}

func (m *SysAuthLogoutReq) _validateUuid(uuid string) error {
	if matched := _sys_auth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SysAuthLogoutReqMultiError is an error wrapping multiple validation errors
// returned by SysAuthLogoutReq.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLogoutReqMultiError) AllErrors() []error { return m }

// SysAuthLogoutReqValidationError is the validation error returned by
// SysAuthLogoutReq.Validate if the designated constraints aren't met.
type SysAuthLogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLogoutReqValidationError) ErrorName() string { return "SysAuthLogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAuthLogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLogoutReqValidationError{}

// Validate checks the field values on SysAuthLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthLogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthLogoutReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthLogoutReplyMultiError, or nil if none found.
func (m *SysAuthLogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthLogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAuthLogoutReplyMultiError(errors)
	}

	return nil
}

// SysAuthLogoutReplyMultiError is an error wrapping multiple validation errors
// returned by SysAuthLogoutReply.ValidateAll() if the designated constraints
// aren't met.
type SysAuthLogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthLogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthLogoutReplyMultiError) AllErrors() []error { return m }

// SysAuthLogoutReplyValidationError is the validation error returned by
// SysAuthLogoutReply.Validate if the designated constraints aren't met.
type SysAuthLogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthLogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthLogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthLogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthLogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthLogoutReplyValidationError) ErrorName() string {
	return "SysAuthLogoutReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthLogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthLogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthLogoutReplyValidationError{}

// Validate checks the field values on SysAuthJwtTokenCheckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthJwtTokenCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthJwtTokenCheckReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthJwtTokenCheckReqMultiError, or nil if none found.
func (m *SysAuthJwtTokenCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthJwtTokenCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return SysAuthJwtTokenCheckReqMultiError(errors)
	}

	return nil
}

// SysAuthJwtTokenCheckReqMultiError is an error wrapping multiple validation
// errors returned by SysAuthJwtTokenCheckReq.ValidateAll() if the designated
// constraints aren't met.
type SysAuthJwtTokenCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthJwtTokenCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthJwtTokenCheckReqMultiError) AllErrors() []error { return m }

// SysAuthJwtTokenCheckReqValidationError is the validation error returned by
// SysAuthJwtTokenCheckReq.Validate if the designated constraints aren't met.
type SysAuthJwtTokenCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthJwtTokenCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthJwtTokenCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthJwtTokenCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthJwtTokenCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthJwtTokenCheckReqValidationError) ErrorName() string {
	return "SysAuthJwtTokenCheckReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthJwtTokenCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthJwtTokenCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthJwtTokenCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthJwtTokenCheckReqValidationError{}

// Validate checks the field values on SysAuthJwtTokenCheckReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAuthJwtTokenCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAuthJwtTokenCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAuthJwtTokenCheckReplyMultiError, or nil if none found.
func (m *SysAuthJwtTokenCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAuthJwtTokenCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminId

	if len(errors) > 0 {
		return SysAuthJwtTokenCheckReplyMultiError(errors)
	}

	return nil
}

// SysAuthJwtTokenCheckReplyMultiError is an error wrapping multiple validation
// errors returned by SysAuthJwtTokenCheckReply.ValidateAll() if the
// designated constraints aren't met.
type SysAuthJwtTokenCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAuthJwtTokenCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAuthJwtTokenCheckReplyMultiError) AllErrors() []error { return m }

// SysAuthJwtTokenCheckReplyValidationError is the validation error returned by
// SysAuthJwtTokenCheckReply.Validate if the designated constraints aren't met.
type SysAuthJwtTokenCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAuthJwtTokenCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAuthJwtTokenCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAuthJwtTokenCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAuthJwtTokenCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAuthJwtTokenCheckReplyValidationError) ErrorName() string {
	return "SysAuthJwtTokenCheckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAuthJwtTokenCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAuthJwtTokenCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAuthJwtTokenCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAuthJwtTokenCheckReplyValidationError{}
