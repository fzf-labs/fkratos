// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_sys/v1/sys_admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysAdminInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoReqMultiError, or nil if none found.
func (m *SysAdminInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoReqMultiError(errors)
	}

	return nil
}

// SysAdminInfoReqMultiError is an error wrapping multiple validation errors
// returned by SysAdminInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SysAdminInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoReqMultiError) AllErrors() []error { return m }

// SysAdminInfoReqValidationError is the validation error returned by
// SysAdminInfoReq.Validate if the designated constraints aren't met.
type SysAdminInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoReqValidationError) ErrorName() string { return "SysAdminInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAdminInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoReqValidationError{}

// Validate checks the field values on SysAdminInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoReplyMultiError, or nil if none found.
func (m *SysAdminInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoReplyMultiError(errors)
	}

	return nil
}

// SysAdminInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SysAdminInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SysAdminInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoReplyMultiError) AllErrors() []error { return m }

// SysAdminInfoReplyValidationError is the validation error returned by
// SysAdminInfoReply.Validate if the designated constraints aren't met.
type SysAdminInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoReplyValidationError) ErrorName() string {
	return "SysAdminInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoReplyValidationError{}

// Validate checks the field values on SysAdminInfoUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoUpdateReqMultiError, or nil if none found.
func (m *SysAdminInfoUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoUpdateReqMultiError(errors)
	}

	return nil
}

// SysAdminInfoUpdateReqMultiError is an error wrapping multiple validation
// errors returned by SysAdminInfoUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type SysAdminInfoUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoUpdateReqMultiError) AllErrors() []error { return m }

// SysAdminInfoUpdateReqValidationError is the validation error returned by
// SysAdminInfoUpdateReq.Validate if the designated constraints aren't met.
type SysAdminInfoUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoUpdateReqValidationError) ErrorName() string {
	return "SysAdminInfoUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoUpdateReqValidationError{}

// Validate checks the field values on SysAdminInfoUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminInfoUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminInfoUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminInfoUpdateReplyMultiError, or nil if none found.
func (m *SysAdminInfoUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminInfoUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminInfoUpdateReplyMultiError(errors)
	}

	return nil
}

// SysAdminInfoUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by SysAdminInfoUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type SysAdminInfoUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminInfoUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminInfoUpdateReplyMultiError) AllErrors() []error { return m }

// SysAdminInfoUpdateReplyValidationError is the validation error returned by
// SysAdminInfoUpdateReply.Validate if the designated constraints aren't met.
type SysAdminInfoUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminInfoUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminInfoUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminInfoUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminInfoUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminInfoUpdateReplyValidationError) ErrorName() string {
	return "SysAdminInfoUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminInfoUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminInfoUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminInfoUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminInfoUpdateReplyValidationError{}

// Validate checks the field values on SysAdminGenerateAvatarReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminGenerateAvatarReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminGenerateAvatarReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminGenerateAvatarReqMultiError, or nil if none found.
func (m *SysAdminGenerateAvatarReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminGenerateAvatarReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminGenerateAvatarReqMultiError(errors)
	}

	return nil
}

// SysAdminGenerateAvatarReqMultiError is an error wrapping multiple validation
// errors returned by SysAdminGenerateAvatarReq.ValidateAll() if the
// designated constraints aren't met.
type SysAdminGenerateAvatarReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminGenerateAvatarReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminGenerateAvatarReqMultiError) AllErrors() []error { return m }

// SysAdminGenerateAvatarReqValidationError is the validation error returned by
// SysAdminGenerateAvatarReq.Validate if the designated constraints aren't met.
type SysAdminGenerateAvatarReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminGenerateAvatarReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminGenerateAvatarReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminGenerateAvatarReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminGenerateAvatarReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminGenerateAvatarReqValidationError) ErrorName() string {
	return "SysAdminGenerateAvatarReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminGenerateAvatarReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminGenerateAvatarReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminGenerateAvatarReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminGenerateAvatarReqValidationError{}

// Validate checks the field values on SysAdminGenerateAvatarReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysAdminGenerateAvatarReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAdminGenerateAvatarReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAdminGenerateAvatarReplyMultiError, or nil if none found.
func (m *SysAdminGenerateAvatarReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAdminGenerateAvatarReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAdminGenerateAvatarReplyMultiError(errors)
	}

	return nil
}

// SysAdminGenerateAvatarReplyMultiError is an error wrapping multiple
// validation errors returned by SysAdminGenerateAvatarReply.ValidateAll() if
// the designated constraints aren't met.
type SysAdminGenerateAvatarReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAdminGenerateAvatarReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAdminGenerateAvatarReplyMultiError) AllErrors() []error { return m }

// SysAdminGenerateAvatarReplyValidationError is the validation error returned
// by SysAdminGenerateAvatarReply.Validate if the designated constraints
// aren't met.
type SysAdminGenerateAvatarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAdminGenerateAvatarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAdminGenerateAvatarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAdminGenerateAvatarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAdminGenerateAvatarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAdminGenerateAvatarReplyValidationError) ErrorName() string {
	return "SysAdminGenerateAvatarReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysAdminGenerateAvatarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAdminGenerateAvatarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAdminGenerateAvatarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAdminGenerateAvatarReplyValidationError{}
