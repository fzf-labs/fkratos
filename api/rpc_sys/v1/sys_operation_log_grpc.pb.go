// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_operation_log.proto

package v1

import (
	context "context"
	common "fkratos/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OperationLog_SysOperationLogList_FullMethodName  = "/api.rpc_sys.v1.OperationLog/SysOperationLogList"
	OperationLog_SysOperationLogInfo_FullMethodName  = "/api.rpc_sys.v1.OperationLog/SysOperationLogInfo"
	OperationLog_SysOperationLogStore_FullMethodName = "/api.rpc_sys.v1.OperationLog/SysOperationLogStore"
)

// OperationLogClient is the client API for OperationLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationLogClient interface {
	// 操作日志列表
	SysOperationLogList(ctx context.Context, in *common.SearchListReq, opts ...grpc.CallOption) (*SysOperationLogListResp, error)
	// 单条操作日志
	SysOperationLogInfo(ctx context.Context, in *SysOperationLogInfoReq, opts ...grpc.CallOption) (*SysOperationLogInfoResp, error)
	// 操作日志记录
	SysOperationLogStore(ctx context.Context, in *SysOperationLogStoreReq, opts ...grpc.CallOption) (*SysOperationLogStoreResp, error)
}

type operationLogClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationLogClient(cc grpc.ClientConnInterface) OperationLogClient {
	return &operationLogClient{cc}
}

func (c *operationLogClient) SysOperationLogList(ctx context.Context, in *common.SearchListReq, opts ...grpc.CallOption) (*SysOperationLogListResp, error) {
	out := new(SysOperationLogListResp)
	err := c.cc.Invoke(ctx, OperationLog_SysOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogClient) SysOperationLogInfo(ctx context.Context, in *SysOperationLogInfoReq, opts ...grpc.CallOption) (*SysOperationLogInfoResp, error) {
	out := new(SysOperationLogInfoResp)
	err := c.cc.Invoke(ctx, OperationLog_SysOperationLogInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogClient) SysOperationLogStore(ctx context.Context, in *SysOperationLogStoreReq, opts ...grpc.CallOption) (*SysOperationLogStoreResp, error) {
	out := new(SysOperationLogStoreResp)
	err := c.cc.Invoke(ctx, OperationLog_SysOperationLogStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationLogServer is the server API for OperationLog service.
// All implementations must embed UnimplementedOperationLogServer
// for forward compatibility
type OperationLogServer interface {
	// 操作日志列表
	SysOperationLogList(context.Context, *common.SearchListReq) (*SysOperationLogListResp, error)
	// 单条操作日志
	SysOperationLogInfo(context.Context, *SysOperationLogInfoReq) (*SysOperationLogInfoResp, error)
	// 操作日志记录
	SysOperationLogStore(context.Context, *SysOperationLogStoreReq) (*SysOperationLogStoreResp, error)
	mustEmbedUnimplementedOperationLogServer()
}

// UnimplementedOperationLogServer must be embedded to have forward compatible implementations.
type UnimplementedOperationLogServer struct {
}

func (UnimplementedOperationLogServer) SysOperationLogList(context.Context, *common.SearchListReq) (*SysOperationLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysOperationLogList not implemented")
}
func (UnimplementedOperationLogServer) SysOperationLogInfo(context.Context, *SysOperationLogInfoReq) (*SysOperationLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysOperationLogInfo not implemented")
}
func (UnimplementedOperationLogServer) SysOperationLogStore(context.Context, *SysOperationLogStoreReq) (*SysOperationLogStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysOperationLogStore not implemented")
}
func (UnimplementedOperationLogServer) mustEmbedUnimplementedOperationLogServer() {}

// UnsafeOperationLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationLogServer will
// result in compilation errors.
type UnsafeOperationLogServer interface {
	mustEmbedUnimplementedOperationLogServer()
}

func RegisterOperationLogServer(s grpc.ServiceRegistrar, srv OperationLogServer) {
	s.RegisterService(&OperationLog_ServiceDesc, srv)
}

func _OperationLog_SysOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServer).SysOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLog_SysOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServer).SysOperationLogList(ctx, req.(*common.SearchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLog_SysOperationLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysOperationLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServer).SysOperationLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLog_SysOperationLogInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServer).SysOperationLogInfo(ctx, req.(*SysOperationLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLog_SysOperationLogStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysOperationLogStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServer).SysOperationLogStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLog_SysOperationLogStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServer).SysOperationLogStore(ctx, req.(*SysOperationLogStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationLog_ServiceDesc is the grpc.ServiceDesc for OperationLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.OperationLog",
	HandlerType: (*OperationLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysOperationLogList",
			Handler:    _OperationLog_SysOperationLogList_Handler,
		},
		{
			MethodName: "SysOperationLogInfo",
			Handler:    _OperationLog_SysOperationLogInfo_Handler,
		},
		{
			MethodName: "SysOperationLogStore",
			Handler:    _OperationLog_SysOperationLogStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_operation_log.proto",
}
