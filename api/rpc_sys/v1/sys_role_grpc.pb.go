// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysRole_SysRoleList_FullMethodName  = "/api.rpc_sys.v1.SysRole/SysRoleList"
	SysRole_SysRoleInfo_FullMethodName  = "/api.rpc_sys.v1.SysRole/SysRoleInfo"
	SysRole_SysRoleStore_FullMethodName = "/api.rpc_sys.v1.SysRole/SysRoleStore"
	SysRole_SysRoleDel_FullMethodName   = "/api.rpc_sys.v1.SysRole/SysRoleDel"
)

// SysRoleClient is the client API for SysRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysRoleClient interface {
	// 角色-列表
	SysRoleList(ctx context.Context, in *SysRoleListReq, opts ...grpc.CallOption) (*SysRoleListResp, error)
	// 角色-信息
	SysRoleInfo(ctx context.Context, in *SysRoleInfoReq, opts ...grpc.CallOption) (*SysRoleInfoResp, error)
	// 角色-保存
	SysRoleStore(ctx context.Context, in *SysRoleStoreReq, opts ...grpc.CallOption) (*SysRoleStoreResp, error)
	// 角色-删除
	SysRoleDel(ctx context.Context, in *SysRoleDelReq, opts ...grpc.CallOption) (*SysRoleDelResp, error)
}

type sysRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleClient(cc grpc.ClientConnInterface) SysRoleClient {
	return &sysRoleClient{cc}
}

func (c *sysRoleClient) SysRoleList(ctx context.Context, in *SysRoleListReq, opts ...grpc.CallOption) (*SysRoleListResp, error) {
	out := new(SysRoleListResp)
	err := c.cc.Invoke(ctx, SysRole_SysRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) SysRoleInfo(ctx context.Context, in *SysRoleInfoReq, opts ...grpc.CallOption) (*SysRoleInfoResp, error) {
	out := new(SysRoleInfoResp)
	err := c.cc.Invoke(ctx, SysRole_SysRoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) SysRoleStore(ctx context.Context, in *SysRoleStoreReq, opts ...grpc.CallOption) (*SysRoleStoreResp, error) {
	out := new(SysRoleStoreResp)
	err := c.cc.Invoke(ctx, SysRole_SysRoleStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) SysRoleDel(ctx context.Context, in *SysRoleDelReq, opts ...grpc.CallOption) (*SysRoleDelResp, error) {
	out := new(SysRoleDelResp)
	err := c.cc.Invoke(ctx, SysRole_SysRoleDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleServer is the server API for SysRole service.
// All implementations must embed UnimplementedSysRoleServer
// for forward compatibility
type SysRoleServer interface {
	// 角色-列表
	SysRoleList(context.Context, *SysRoleListReq) (*SysRoleListResp, error)
	// 角色-信息
	SysRoleInfo(context.Context, *SysRoleInfoReq) (*SysRoleInfoResp, error)
	// 角色-保存
	SysRoleStore(context.Context, *SysRoleStoreReq) (*SysRoleStoreResp, error)
	// 角色-删除
	SysRoleDel(context.Context, *SysRoleDelReq) (*SysRoleDelResp, error)
	mustEmbedUnimplementedSysRoleServer()
}

// UnimplementedSysRoleServer must be embedded to have forward compatible implementations.
type UnimplementedSysRoleServer struct {
}

func (UnimplementedSysRoleServer) SysRoleList(context.Context, *SysRoleListReq) (*SysRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleList not implemented")
}
func (UnimplementedSysRoleServer) SysRoleInfo(context.Context, *SysRoleInfoReq) (*SysRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleInfo not implemented")
}
func (UnimplementedSysRoleServer) SysRoleStore(context.Context, *SysRoleStoreReq) (*SysRoleStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleStore not implemented")
}
func (UnimplementedSysRoleServer) SysRoleDel(context.Context, *SysRoleDelReq) (*SysRoleDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleDel not implemented")
}
func (UnimplementedSysRoleServer) mustEmbedUnimplementedSysRoleServer() {}

// UnsafeSysRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleServer will
// result in compilation errors.
type UnsafeSysRoleServer interface {
	mustEmbedUnimplementedSysRoleServer()
}

func RegisterSysRoleServer(s grpc.ServiceRegistrar, srv SysRoleServer) {
	s.RegisterService(&SysRole_ServiceDesc, srv)
}

func _SysRole_SysRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).SysRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_SysRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).SysRoleList(ctx, req.(*SysRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_SysRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).SysRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_SysRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).SysRoleInfo(ctx, req.(*SysRoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_SysRoleStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).SysRoleStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_SysRoleStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).SysRoleStore(ctx, req.(*SysRoleStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_SysRoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).SysRoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_SysRoleDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).SysRoleDel(ctx, req.(*SysRoleDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRole_ServiceDesc is the grpc.ServiceDesc for SysRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.SysRole",
	HandlerType: (*SysRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysRoleList",
			Handler:    _SysRole_SysRoleList_Handler,
		},
		{
			MethodName: "SysRoleInfo",
			Handler:    _SysRole_SysRoleInfo_Handler,
		},
		{
			MethodName: "SysRoleStore",
			Handler:    _SysRole_SysRoleStore_Handler,
		},
		{
			MethodName: "SysRoleDel",
			Handler:    _SysRole_SysRoleDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_role.proto",
}
