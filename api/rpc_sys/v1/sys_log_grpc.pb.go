// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysLog_SysLogList_FullMethodName  = "/api.rpc_sys.v1.SysLog/SysLogList"
	SysLog_SysLogInfo_FullMethodName  = "/api.rpc_sys.v1.SysLog/SysLogInfo"
	SysLog_SysLogStore_FullMethodName = "/api.rpc_sys.v1.SysLog/SysLogStore"
)

// SysLogClient is the client API for SysLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysLogClient interface {
	// 日志-列表
	SysLogList(ctx context.Context, in *SysLogListReq, opts ...grpc.CallOption) (*SysLogListResp, error)
	// 日志-信息
	SysLogInfo(ctx context.Context, in *SysLogInfoReq, opts ...grpc.CallOption) (*SysLogInfoResp, error)
	// 日志-保存
	SysLogStore(ctx context.Context, in *SysLogStoreReq, opts ...grpc.CallOption) (*SysLogStoreResp, error)
}

type sysLogClient struct {
	cc grpc.ClientConnInterface
}

func NewSysLogClient(cc grpc.ClientConnInterface) SysLogClient {
	return &sysLogClient{cc}
}

func (c *sysLogClient) SysLogList(ctx context.Context, in *SysLogListReq, opts ...grpc.CallOption) (*SysLogListResp, error) {
	out := new(SysLogListResp)
	err := c.cc.Invoke(ctx, SysLog_SysLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLogClient) SysLogInfo(ctx context.Context, in *SysLogInfoReq, opts ...grpc.CallOption) (*SysLogInfoResp, error) {
	out := new(SysLogInfoResp)
	err := c.cc.Invoke(ctx, SysLog_SysLogInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLogClient) SysLogStore(ctx context.Context, in *SysLogStoreReq, opts ...grpc.CallOption) (*SysLogStoreResp, error) {
	out := new(SysLogStoreResp)
	err := c.cc.Invoke(ctx, SysLog_SysLogStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysLogServer is the server API for SysLog service.
// All implementations must embed UnimplementedSysLogServer
// for forward compatibility
type SysLogServer interface {
	// 日志-列表
	SysLogList(context.Context, *SysLogListReq) (*SysLogListResp, error)
	// 日志-信息
	SysLogInfo(context.Context, *SysLogInfoReq) (*SysLogInfoResp, error)
	// 日志-保存
	SysLogStore(context.Context, *SysLogStoreReq) (*SysLogStoreResp, error)
	mustEmbedUnimplementedSysLogServer()
}

// UnimplementedSysLogServer must be embedded to have forward compatible implementations.
type UnimplementedSysLogServer struct {
}

func (UnimplementedSysLogServer) SysLogList(context.Context, *SysLogListReq) (*SysLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogList not implemented")
}
func (UnimplementedSysLogServer) SysLogInfo(context.Context, *SysLogInfoReq) (*SysLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogInfo not implemented")
}
func (UnimplementedSysLogServer) SysLogStore(context.Context, *SysLogStoreReq) (*SysLogStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogStore not implemented")
}
func (UnimplementedSysLogServer) mustEmbedUnimplementedSysLogServer() {}

// UnsafeSysLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysLogServer will
// result in compilation errors.
type UnsafeSysLogServer interface {
	mustEmbedUnimplementedSysLogServer()
}

func RegisterSysLogServer(s grpc.ServiceRegistrar, srv SysLogServer) {
	s.RegisterService(&SysLog_ServiceDesc, srv)
}

func _SysLog_SysLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLogServer).SysLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLog_SysLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLogServer).SysLogList(ctx, req.(*SysLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLog_SysLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLogServer).SysLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLog_SysLogInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLogServer).SysLogInfo(ctx, req.(*SysLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLog_SysLogStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLogServer).SysLogStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLog_SysLogStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLogServer).SysLogStore(ctx, req.(*SysLogStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysLog_ServiceDesc is the grpc.ServiceDesc for SysLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.SysLog",
	HandlerType: (*SysLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLogList",
			Handler:    _SysLog_SysLogList_Handler,
		},
		{
			MethodName: "SysLogInfo",
			Handler:    _SysLog_SysLogInfo_Handler,
		},
		{
			MethodName: "SysLogStore",
			Handler:    _SysLog_SysLogStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_log.proto",
}
