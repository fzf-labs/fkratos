// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_permission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysPermission_SysPermissionList_FullMethodName   = "/api.rpc_sys.v1.SysPermission/SysPermissionList"
	SysPermission_SysPermissionInfo_FullMethodName   = "/api.rpc_sys.v1.SysPermission/SysPermissionInfo"
	SysPermission_SysPermissionStore_FullMethodName  = "/api.rpc_sys.v1.SysPermission/SysPermissionStore"
	SysPermission_SysPermissionDel_FullMethodName    = "/api.rpc_sys.v1.SysPermission/SysPermissionDel"
	SysPermission_SysPermissionStatus_FullMethodName = "/api.rpc_sys.v1.SysPermission/SysPermissionStatus"
)

// SysPermissionClient is the client API for SysPermission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysPermissionClient interface {
	// 权限-列表
	SysPermissionList(ctx context.Context, in *SysPermissionListReq, opts ...grpc.CallOption) (*SysPermissionListResp, error)
	// 权限-单个权限信息
	SysPermissionInfo(ctx context.Context, in *SysPermissionInfoReq, opts ...grpc.CallOption) (*SysPermissionInfoResp, error)
	// 权限-保存
	SysPermissionStore(ctx context.Context, in *SysPermissionStoreReq, opts ...grpc.CallOption) (*SysPermissionStoreResp, error)
	// 权限-删除
	SysPermissionDel(ctx context.Context, in *SysPermissionDelReq, opts ...grpc.CallOption) (*SysPermissionDelResp, error)
	// 权限-修改状态
	SysPermissionStatus(ctx context.Context, in *SysPermissionStatusReq, opts ...grpc.CallOption) (*SysPermissionStatusResp, error)
}

type sysPermissionClient struct {
	cc grpc.ClientConnInterface
}

func NewSysPermissionClient(cc grpc.ClientConnInterface) SysPermissionClient {
	return &sysPermissionClient{cc}
}

func (c *sysPermissionClient) SysPermissionList(ctx context.Context, in *SysPermissionListReq, opts ...grpc.CallOption) (*SysPermissionListResp, error) {
	out := new(SysPermissionListResp)
	err := c.cc.Invoke(ctx, SysPermission_SysPermissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionClient) SysPermissionInfo(ctx context.Context, in *SysPermissionInfoReq, opts ...grpc.CallOption) (*SysPermissionInfoResp, error) {
	out := new(SysPermissionInfoResp)
	err := c.cc.Invoke(ctx, SysPermission_SysPermissionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionClient) SysPermissionStore(ctx context.Context, in *SysPermissionStoreReq, opts ...grpc.CallOption) (*SysPermissionStoreResp, error) {
	out := new(SysPermissionStoreResp)
	err := c.cc.Invoke(ctx, SysPermission_SysPermissionStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionClient) SysPermissionDel(ctx context.Context, in *SysPermissionDelReq, opts ...grpc.CallOption) (*SysPermissionDelResp, error) {
	out := new(SysPermissionDelResp)
	err := c.cc.Invoke(ctx, SysPermission_SysPermissionDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionClient) SysPermissionStatus(ctx context.Context, in *SysPermissionStatusReq, opts ...grpc.CallOption) (*SysPermissionStatusResp, error) {
	out := new(SysPermissionStatusResp)
	err := c.cc.Invoke(ctx, SysPermission_SysPermissionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysPermissionServer is the server API for SysPermission service.
// All implementations must embed UnimplementedSysPermissionServer
// for forward compatibility
type SysPermissionServer interface {
	// 权限-列表
	SysPermissionList(context.Context, *SysPermissionListReq) (*SysPermissionListResp, error)
	// 权限-单个权限信息
	SysPermissionInfo(context.Context, *SysPermissionInfoReq) (*SysPermissionInfoResp, error)
	// 权限-保存
	SysPermissionStore(context.Context, *SysPermissionStoreReq) (*SysPermissionStoreResp, error)
	// 权限-删除
	SysPermissionDel(context.Context, *SysPermissionDelReq) (*SysPermissionDelResp, error)
	// 权限-修改状态
	SysPermissionStatus(context.Context, *SysPermissionStatusReq) (*SysPermissionStatusResp, error)
	mustEmbedUnimplementedSysPermissionServer()
}

// UnimplementedSysPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedSysPermissionServer struct {
}

func (UnimplementedSysPermissionServer) SysPermissionList(context.Context, *SysPermissionListReq) (*SysPermissionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionList not implemented")
}
func (UnimplementedSysPermissionServer) SysPermissionInfo(context.Context, *SysPermissionInfoReq) (*SysPermissionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionInfo not implemented")
}
func (UnimplementedSysPermissionServer) SysPermissionStore(context.Context, *SysPermissionStoreReq) (*SysPermissionStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionStore not implemented")
}
func (UnimplementedSysPermissionServer) SysPermissionDel(context.Context, *SysPermissionDelReq) (*SysPermissionDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionDel not implemented")
}
func (UnimplementedSysPermissionServer) SysPermissionStatus(context.Context, *SysPermissionStatusReq) (*SysPermissionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPermissionStatus not implemented")
}
func (UnimplementedSysPermissionServer) mustEmbedUnimplementedSysPermissionServer() {}

// UnsafeSysPermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysPermissionServer will
// result in compilation errors.
type UnsafeSysPermissionServer interface {
	mustEmbedUnimplementedSysPermissionServer()
}

func RegisterSysPermissionServer(s grpc.ServiceRegistrar, srv SysPermissionServer) {
	s.RegisterService(&SysPermission_ServiceDesc, srv)
}

func _SysPermission_SysPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServer).SysPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermission_SysPermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServer).SysPermissionList(ctx, req.(*SysPermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermission_SysPermissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServer).SysPermissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermission_SysPermissionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServer).SysPermissionInfo(ctx, req.(*SysPermissionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermission_SysPermissionStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServer).SysPermissionStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermission_SysPermissionStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServer).SysPermissionStore(ctx, req.(*SysPermissionStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermission_SysPermissionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServer).SysPermissionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermission_SysPermissionDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServer).SysPermissionDel(ctx, req.(*SysPermissionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermission_SysPermissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPermissionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServer).SysPermissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermission_SysPermissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServer).SysPermissionStatus(ctx, req.(*SysPermissionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysPermission_ServiceDesc is the grpc.ServiceDesc for SysPermission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysPermission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.SysPermission",
	HandlerType: (*SysPermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysPermissionList",
			Handler:    _SysPermission_SysPermissionList_Handler,
		},
		{
			MethodName: "SysPermissionInfo",
			Handler:    _SysPermission_SysPermissionInfo_Handler,
		},
		{
			MethodName: "SysPermissionStore",
			Handler:    _SysPermission_SysPermissionStore_Handler,
		},
		{
			MethodName: "SysPermissionDel",
			Handler:    _SysPermission_SysPermissionDel_Handler,
		},
		{
			MethodName: "SysPermissionStatus",
			Handler:    _SysPermission_SysPermissionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_permission.proto",
}
