// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_sys/v1/sys_api.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysAPIInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIInfoMultiError, or
// nil if none found.
func (m *SysAPIInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysAPIInfoMultiError(errors)
	}

	return nil
}

// SysAPIInfoMultiError is an error wrapping multiple validation errors
// returned by SysAPIInfo.ValidateAll() if the designated constraints aren't met.
type SysAPIInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIInfoMultiError) AllErrors() []error { return m }

// SysAPIInfoValidationError is the validation error returned by
// SysAPIInfo.Validate if the designated constraints aren't met.
type SysAPIInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIInfoValidationError) ErrorName() string { return "SysAPIInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIInfoValidationError{}

// Validate checks the field values on SysAPIListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIListReqMultiError, or
// nil if none found.
func (m *SysAPIListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionId

	if len(errors) > 0 {
		return SysAPIListReqMultiError(errors)
	}

	return nil
}

// SysAPIListReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIListReq.ValidateAll() if the designated constraints
// aren't met.
type SysAPIListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIListReqMultiError) AllErrors() []error { return m }

// SysAPIListReqValidationError is the validation error returned by
// SysAPIListReq.Validate if the designated constraints aren't met.
type SysAPIListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIListReqValidationError) ErrorName() string { return "SysAPIListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIListReqValidationError{}

// Validate checks the field values on SysAPIListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAPIListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAPIListReplyMultiError, or nil if none found.
func (m *SysAPIListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysAPIListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysAPIListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysAPIListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysAPIListReplyMultiError(errors)
	}

	return nil
}

// SysAPIListReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIListReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIListReplyMultiError) AllErrors() []error { return m }

// SysAPIListReplyValidationError is the validation error returned by
// SysAPIListReply.Validate if the designated constraints aren't met.
type SysAPIListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIListReplyValidationError) ErrorName() string { return "SysAPIListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIListReplyValidationError{}

// Validate checks the field values on SysAPIStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIStoreReqMultiError,
// or nil if none found.
func (m *SysAPIStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	if len(errors) > 0 {
		return SysAPIStoreReqMultiError(errors)
	}

	return nil
}

// SysAPIStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysAPIStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIStoreReqMultiError) AllErrors() []error { return m }

// SysAPIStoreReqValidationError is the validation error returned by
// SysAPIStoreReq.Validate if the designated constraints aren't met.
type SysAPIStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIStoreReqValidationError) ErrorName() string { return "SysAPIStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIStoreReqValidationError{}

// Validate checks the field values on SysAPIStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysAPIStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysAPIStoreReplyMultiError, or nil if none found.
func (m *SysAPIStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysAPIStoreReplyMultiError(errors)
	}

	return nil
}

// SysAPIStoreReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIStoreReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIStoreReplyMultiError) AllErrors() []error { return m }

// SysAPIStoreReplyValidationError is the validation error returned by
// SysAPIStoreReply.Validate if the designated constraints aren't met.
type SysAPIStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIStoreReplyValidationError) ErrorName() string { return "SysAPIStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIStoreReplyValidationError{}

// Validate checks the field values on SysAPIDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIDelReqMultiError, or
// nil if none found.
func (m *SysAPIDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAPIDelReqMultiError(errors)
	}

	return nil
}

// SysAPIDelReqMultiError is an error wrapping multiple validation errors
// returned by SysAPIDelReq.ValidateAll() if the designated constraints aren't met.
type SysAPIDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIDelReqMultiError) AllErrors() []error { return m }

// SysAPIDelReqValidationError is the validation error returned by
// SysAPIDelReq.Validate if the designated constraints aren't met.
type SysAPIDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIDelReqValidationError) ErrorName() string { return "SysAPIDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIDelReqValidationError{}

// Validate checks the field values on SysAPIDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysAPIDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysAPIDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysAPIDelReplyMultiError,
// or nil if none found.
func (m *SysAPIDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysAPIDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysAPIDelReplyMultiError(errors)
	}

	return nil
}

// SysAPIDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysAPIDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysAPIDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysAPIDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysAPIDelReplyMultiError) AllErrors() []error { return m }

// SysAPIDelReplyValidationError is the validation error returned by
// SysAPIDelReply.Validate if the designated constraints aren't met.
type SysAPIDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysAPIDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysAPIDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysAPIDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysAPIDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysAPIDelReplyValidationError) ErrorName() string { return "SysAPIDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysAPIDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysAPIDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysAPIDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysAPIDelReplyValidationError{}
