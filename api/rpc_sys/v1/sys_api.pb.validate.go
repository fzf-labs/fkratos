// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_sys/v1/sys_api.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysApiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysApiInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysApiInfoMultiError, or
// nil if none found.
func (m *SysApiInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysApiInfoMultiError(errors)
	}

	return nil
}

// SysApiInfoMultiError is an error wrapping multiple validation errors
// returned by SysApiInfo.ValidateAll() if the designated constraints aren't met.
type SysApiInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiInfoMultiError) AllErrors() []error { return m }

// SysApiInfoValidationError is the validation error returned by
// SysApiInfo.Validate if the designated constraints aren't met.
type SysApiInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiInfoValidationError) ErrorName() string { return "SysApiInfoValidationError" }

// Error satisfies the builtin error interface
func (e SysApiInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiInfoValidationError{}

// Validate checks the field values on SysApiListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysApiListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysApiListReqMultiError, or
// nil if none found.
func (m *SysApiListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionId

	if len(errors) > 0 {
		return SysApiListReqMultiError(errors)
	}

	return nil
}

// SysApiListReqMultiError is an error wrapping multiple validation errors
// returned by SysApiListReq.ValidateAll() if the designated constraints
// aren't met.
type SysApiListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiListReqMultiError) AllErrors() []error { return m }

// SysApiListReqValidationError is the validation error returned by
// SysApiListReq.Validate if the designated constraints aren't met.
type SysApiListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiListReqValidationError) ErrorName() string { return "SysApiListReqValidationError" }

// Error satisfies the builtin error interface
func (e SysApiListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiListReqValidationError{}

// Validate checks the field values on SysApiListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysApiListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysApiListReplyMultiError, or nil if none found.
func (m *SysApiListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysApiListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysApiListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysApiListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysApiListReplyMultiError(errors)
	}

	return nil
}

// SysApiListReplyMultiError is an error wrapping multiple validation errors
// returned by SysApiListReply.ValidateAll() if the designated constraints
// aren't met.
type SysApiListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiListReplyMultiError) AllErrors() []error { return m }

// SysApiListReplyValidationError is the validation error returned by
// SysApiListReply.Validate if the designated constraints aren't met.
type SysApiListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiListReplyValidationError) ErrorName() string { return "SysApiListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysApiListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiListReplyValidationError{}

// Validate checks the field values on SysApiStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysApiStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysApiStoreReqMultiError,
// or nil if none found.
func (m *SysApiStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionID

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Desc

	if len(errors) > 0 {
		return SysApiStoreReqMultiError(errors)
	}

	return nil
}

// SysApiStoreReqMultiError is an error wrapping multiple validation errors
// returned by SysApiStoreReq.ValidateAll() if the designated constraints
// aren't met.
type SysApiStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiStoreReqMultiError) AllErrors() []error { return m }

// SysApiStoreReqValidationError is the validation error returned by
// SysApiStoreReq.Validate if the designated constraints aren't met.
type SysApiStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiStoreReqValidationError) ErrorName() string { return "SysApiStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e SysApiStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiStoreReqValidationError{}

// Validate checks the field values on SysApiStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SysApiStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysApiStoreReplyMultiError, or nil if none found.
func (m *SysApiStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SysApiStoreReplyMultiError(errors)
	}

	return nil
}

// SysApiStoreReplyMultiError is an error wrapping multiple validation errors
// returned by SysApiStoreReply.ValidateAll() if the designated constraints
// aren't met.
type SysApiStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiStoreReplyMultiError) AllErrors() []error { return m }

// SysApiStoreReplyValidationError is the validation error returned by
// SysApiStoreReply.Validate if the designated constraints aren't met.
type SysApiStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiStoreReplyValidationError) ErrorName() string { return "SysApiStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysApiStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiStoreReplyValidationError{}

// Validate checks the field values on SysApiDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysApiDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysApiDelReqMultiError, or
// nil if none found.
func (m *SysApiDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysApiDelReqMultiError(errors)
	}

	return nil
}

// SysApiDelReqMultiError is an error wrapping multiple validation errors
// returned by SysApiDelReq.ValidateAll() if the designated constraints aren't met.
type SysApiDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiDelReqMultiError) AllErrors() []error { return m }

// SysApiDelReqValidationError is the validation error returned by
// SysApiDelReq.Validate if the designated constraints aren't met.
type SysApiDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiDelReqValidationError) ErrorName() string { return "SysApiDelReqValidationError" }

// Error satisfies the builtin error interface
func (e SysApiDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiDelReqValidationError{}

// Validate checks the field values on SysApiDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysApiDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysApiDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysApiDelReplyMultiError,
// or nil if none found.
func (m *SysApiDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysApiDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SysApiDelReplyMultiError(errors)
	}

	return nil
}

// SysApiDelReplyMultiError is an error wrapping multiple validation errors
// returned by SysApiDelReply.ValidateAll() if the designated constraints
// aren't met.
type SysApiDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysApiDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysApiDelReplyMultiError) AllErrors() []error { return m }

// SysApiDelReplyValidationError is the validation error returned by
// SysApiDelReply.Validate if the designated constraints aren't met.
type SysApiDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysApiDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysApiDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysApiDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysApiDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysApiDelReplyValidationError) ErrorName() string { return "SysApiDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e SysApiDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysApiDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysApiDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysApiDelReplyValidationError{}
