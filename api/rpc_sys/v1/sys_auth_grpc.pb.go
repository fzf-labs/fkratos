// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysAuth_SysAuthLoginCaptcha_FullMethodName  = "/api.rpc_sys.v1.SysAuth/SysAuthLoginCaptcha"
	SysAuth_SysAuthLogin_FullMethodName         = "/api.rpc_sys.v1.SysAuth/SysAuthLogin"
	SysAuth_SysAuthLogout_FullMethodName        = "/api.rpc_sys.v1.SysAuth/SysAuthLogout"
	SysAuth_SysAuthJwtTokenCheck_FullMethodName = "/api.rpc_sys.v1.SysAuth/SysAuthJwtTokenCheck"
)

// SysAuthClient is the client API for SysAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysAuthClient interface {
	// Auth-验证码
	SysAuthLoginCaptcha(ctx context.Context, in *SysAuthLoginCaptchaReq, opts ...grpc.CallOption) (*SysAuthLoginCaptchaReply, error)
	// Auth-登录
	SysAuthLogin(ctx context.Context, in *SysAuthLoginReq, opts ...grpc.CallOption) (*SysAuthLoginReply, error)
	// Auth-退出
	SysAuthLogout(ctx context.Context, in *SysAuthLogoutReq, opts ...grpc.CallOption) (*SysAuthLogoutReply, error)
	// Auth-Token校验
	SysAuthJwtTokenCheck(ctx context.Context, in *SysAuthJwtTokenCheckReq, opts ...grpc.CallOption) (*SysAuthJwtTokenCheckReply, error)
}

type sysAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewSysAuthClient(cc grpc.ClientConnInterface) SysAuthClient {
	return &sysAuthClient{cc}
}

func (c *sysAuthClient) SysAuthLoginCaptcha(ctx context.Context, in *SysAuthLoginCaptchaReq, opts ...grpc.CallOption) (*SysAuthLoginCaptchaReply, error) {
	out := new(SysAuthLoginCaptchaReply)
	err := c.cc.Invoke(ctx, SysAuth_SysAuthLoginCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthClient) SysAuthLogin(ctx context.Context, in *SysAuthLoginReq, opts ...grpc.CallOption) (*SysAuthLoginReply, error) {
	out := new(SysAuthLoginReply)
	err := c.cc.Invoke(ctx, SysAuth_SysAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthClient) SysAuthLogout(ctx context.Context, in *SysAuthLogoutReq, opts ...grpc.CallOption) (*SysAuthLogoutReply, error) {
	out := new(SysAuthLogoutReply)
	err := c.cc.Invoke(ctx, SysAuth_SysAuthLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthClient) SysAuthJwtTokenCheck(ctx context.Context, in *SysAuthJwtTokenCheckReq, opts ...grpc.CallOption) (*SysAuthJwtTokenCheckReply, error) {
	out := new(SysAuthJwtTokenCheckReply)
	err := c.cc.Invoke(ctx, SysAuth_SysAuthJwtTokenCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysAuthServer is the server API for SysAuth service.
// All implementations must embed UnimplementedSysAuthServer
// for forward compatibility
type SysAuthServer interface {
	// Auth-验证码
	SysAuthLoginCaptcha(context.Context, *SysAuthLoginCaptchaReq) (*SysAuthLoginCaptchaReply, error)
	// Auth-登录
	SysAuthLogin(context.Context, *SysAuthLoginReq) (*SysAuthLoginReply, error)
	// Auth-退出
	SysAuthLogout(context.Context, *SysAuthLogoutReq) (*SysAuthLogoutReply, error)
	// Auth-Token校验
	SysAuthJwtTokenCheck(context.Context, *SysAuthJwtTokenCheckReq) (*SysAuthJwtTokenCheckReply, error)
	mustEmbedUnimplementedSysAuthServer()
}

// UnimplementedSysAuthServer must be embedded to have forward compatible implementations.
type UnimplementedSysAuthServer struct {
}

func (UnimplementedSysAuthServer) SysAuthLoginCaptcha(context.Context, *SysAuthLoginCaptchaReq) (*SysAuthLoginCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLoginCaptcha not implemented")
}
func (UnimplementedSysAuthServer) SysAuthLogin(context.Context, *SysAuthLoginReq) (*SysAuthLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLogin not implemented")
}
func (UnimplementedSysAuthServer) SysAuthLogout(context.Context, *SysAuthLogoutReq) (*SysAuthLogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthLogout not implemented")
}
func (UnimplementedSysAuthServer) SysAuthJwtTokenCheck(context.Context, *SysAuthJwtTokenCheckReq) (*SysAuthJwtTokenCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAuthJwtTokenCheck not implemented")
}
func (UnimplementedSysAuthServer) mustEmbedUnimplementedSysAuthServer() {}

// UnsafeSysAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysAuthServer will
// result in compilation errors.
type UnsafeSysAuthServer interface {
	mustEmbedUnimplementedSysAuthServer()
}

func RegisterSysAuthServer(s grpc.ServiceRegistrar, srv SysAuthServer) {
	s.RegisterService(&SysAuth_ServiceDesc, srv)
}

func _SysAuth_SysAuthLoginCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLoginCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServer).SysAuthLoginCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuth_SysAuthLoginCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServer).SysAuthLoginCaptcha(ctx, req.(*SysAuthLoginCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuth_SysAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServer).SysAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuth_SysAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServer).SysAuthLogin(ctx, req.(*SysAuthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuth_SysAuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServer).SysAuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuth_SysAuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServer).SysAuthLogout(ctx, req.(*SysAuthLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuth_SysAuthJwtTokenCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAuthJwtTokenCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServer).SysAuthJwtTokenCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuth_SysAuthJwtTokenCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServer).SysAuthJwtTokenCheck(ctx, req.(*SysAuthJwtTokenCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysAuth_ServiceDesc is the grpc.ServiceDesc for SysAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.SysAuth",
	HandlerType: (*SysAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysAuthLoginCaptcha",
			Handler:    _SysAuth_SysAuthLoginCaptcha_Handler,
		},
		{
			MethodName: "SysAuthLogin",
			Handler:    _SysAuth_SysAuthLogin_Handler,
		},
		{
			MethodName: "SysAuthLogout",
			Handler:    _SysAuth_SysAuthLogout_Handler,
		},
		{
			MethodName: "SysAuthJwtTokenCheck",
			Handler:    _SysAuth_SysAuthJwtTokenCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_auth.proto",
}
