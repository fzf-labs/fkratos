// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysAPI_SysAPIList_FullMethodName  = "/api.rpc_sys.v1.SysAPI/SysAPIList"
	SysAPI_SysAPIStore_FullMethodName = "/api.rpc_sys.v1.SysAPI/SysAPIStore"
	SysAPI_SysAPIDel_FullMethodName   = "/api.rpc_sys.v1.SysAPI/SysAPIDel"
)

// SysAPIClient is the client API for SysAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysAPIClient interface {
	// API-列表
	SysAPIList(ctx context.Context, in *SysAPIListReq, opts ...grpc.CallOption) (*SysAPIListReply, error)
	// API-保存
	SysAPIStore(ctx context.Context, in *SysAPIStoreReq, opts ...grpc.CallOption) (*SysAPIStoreReply, error)
	// API-删除
	SysAPIDel(ctx context.Context, in *SysAPIDelReq, opts ...grpc.CallOption) (*SysAPIDelReply, error)
}

type sysAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSysAPIClient(cc grpc.ClientConnInterface) SysAPIClient {
	return &sysAPIClient{cc}
}

func (c *sysAPIClient) SysAPIList(ctx context.Context, in *SysAPIListReq, opts ...grpc.CallOption) (*SysAPIListReply, error) {
	out := new(SysAPIListReply)
	err := c.cc.Invoke(ctx, SysAPI_SysAPIList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAPIClient) SysAPIStore(ctx context.Context, in *SysAPIStoreReq, opts ...grpc.CallOption) (*SysAPIStoreReply, error) {
	out := new(SysAPIStoreReply)
	err := c.cc.Invoke(ctx, SysAPI_SysAPIStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAPIClient) SysAPIDel(ctx context.Context, in *SysAPIDelReq, opts ...grpc.CallOption) (*SysAPIDelReply, error) {
	out := new(SysAPIDelReply)
	err := c.cc.Invoke(ctx, SysAPI_SysAPIDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysAPIServer is the server API for SysAPI service.
// All implementations must embed UnimplementedSysAPIServer
// for forward compatibility
type SysAPIServer interface {
	// API-列表
	SysAPIList(context.Context, *SysAPIListReq) (*SysAPIListReply, error)
	// API-保存
	SysAPIStore(context.Context, *SysAPIStoreReq) (*SysAPIStoreReply, error)
	// API-删除
	SysAPIDel(context.Context, *SysAPIDelReq) (*SysAPIDelReply, error)
	mustEmbedUnimplementedSysAPIServer()
}

// UnimplementedSysAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSysAPIServer struct {
}

func (UnimplementedSysAPIServer) SysAPIList(context.Context, *SysAPIListReq) (*SysAPIListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAPIList not implemented")
}
func (UnimplementedSysAPIServer) SysAPIStore(context.Context, *SysAPIStoreReq) (*SysAPIStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAPIStore not implemented")
}
func (UnimplementedSysAPIServer) SysAPIDel(context.Context, *SysAPIDelReq) (*SysAPIDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysAPIDel not implemented")
}
func (UnimplementedSysAPIServer) mustEmbedUnimplementedSysAPIServer() {}

// UnsafeSysAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysAPIServer will
// result in compilation errors.
type UnsafeSysAPIServer interface {
	mustEmbedUnimplementedSysAPIServer()
}

func RegisterSysAPIServer(s grpc.ServiceRegistrar, srv SysAPIServer) {
	s.RegisterService(&SysAPI_ServiceDesc, srv)
}

func _SysAPI_SysAPIList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAPIListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAPIServer).SysAPIList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAPI_SysAPIList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAPIServer).SysAPIList(ctx, req.(*SysAPIListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAPI_SysAPIStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAPIStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAPIServer).SysAPIStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAPI_SysAPIStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAPIServer).SysAPIStore(ctx, req.(*SysAPIStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAPI_SysAPIDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAPIDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAPIServer).SysAPIDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAPI_SysAPIDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAPIServer).SysAPIDel(ctx, req.(*SysAPIDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysAPI_ServiceDesc is the grpc.ServiceDesc for SysAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.SysAPI",
	HandlerType: (*SysAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysAPIList",
			Handler:    _SysAPI_SysAPIList_Handler,
		},
		{
			MethodName: "SysAPIStore",
			Handler:    _SysAPI_SysAPIStore_Handler,
		},
		{
			MethodName: "SysAPIDel",
			Handler:    _SysAPI_SysAPIDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_api.proto",
}
