// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_sys/v1/sys_login_log.proto

package v1

import (
	context "context"
	common "fkratos/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoginLog_SysLoginLogList_FullMethodName  = "/api.rpc_sys.v1.LoginLog/SysLoginLogList"
	LoginLog_SysLoginLogInfo_FullMethodName  = "/api.rpc_sys.v1.LoginLog/SysLoginLogInfo"
	LoginLog_SysLoginLogStore_FullMethodName = "/api.rpc_sys.v1.LoginLog/SysLoginLogStore"
)

// LoginLogClient is the client API for LoginLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginLogClient interface {
	// 登录日志列表
	SysLoginLogList(ctx context.Context, in *common.SearchListReq, opts ...grpc.CallOption) (*SysLoginLogListResp, error)
	// 单条登录日志
	SysLoginLogInfo(ctx context.Context, in *SysLoginLogInfoReq, opts ...grpc.CallOption) (*SysLoginLogInfoResp, error)
	// 登录日志记录
	SysLoginLogStore(ctx context.Context, in *SysLoginLogStoreReq, opts ...grpc.CallOption) (*SysLoginLogStoreResp, error)
}

type loginLogClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginLogClient(cc grpc.ClientConnInterface) LoginLogClient {
	return &loginLogClient{cc}
}

func (c *loginLogClient) SysLoginLogList(ctx context.Context, in *common.SearchListReq, opts ...grpc.CallOption) (*SysLoginLogListResp, error) {
	out := new(SysLoginLogListResp)
	err := c.cc.Invoke(ctx, LoginLog_SysLoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginLogClient) SysLoginLogInfo(ctx context.Context, in *SysLoginLogInfoReq, opts ...grpc.CallOption) (*SysLoginLogInfoResp, error) {
	out := new(SysLoginLogInfoResp)
	err := c.cc.Invoke(ctx, LoginLog_SysLoginLogInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginLogClient) SysLoginLogStore(ctx context.Context, in *SysLoginLogStoreReq, opts ...grpc.CallOption) (*SysLoginLogStoreResp, error) {
	out := new(SysLoginLogStoreResp)
	err := c.cc.Invoke(ctx, LoginLog_SysLoginLogStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginLogServer is the server API for LoginLog service.
// All implementations must embed UnimplementedLoginLogServer
// for forward compatibility
type LoginLogServer interface {
	// 登录日志列表
	SysLoginLogList(context.Context, *common.SearchListReq) (*SysLoginLogListResp, error)
	// 单条登录日志
	SysLoginLogInfo(context.Context, *SysLoginLogInfoReq) (*SysLoginLogInfoResp, error)
	// 登录日志记录
	SysLoginLogStore(context.Context, *SysLoginLogStoreReq) (*SysLoginLogStoreResp, error)
	mustEmbedUnimplementedLoginLogServer()
}

// UnimplementedLoginLogServer must be embedded to have forward compatible implementations.
type UnimplementedLoginLogServer struct {
}

func (UnimplementedLoginLogServer) SysLoginLogList(context.Context, *common.SearchListReq) (*SysLoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoginLogList not implemented")
}
func (UnimplementedLoginLogServer) SysLoginLogInfo(context.Context, *SysLoginLogInfoReq) (*SysLoginLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoginLogInfo not implemented")
}
func (UnimplementedLoginLogServer) SysLoginLogStore(context.Context, *SysLoginLogStoreReq) (*SysLoginLogStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoginLogStore not implemented")
}
func (UnimplementedLoginLogServer) mustEmbedUnimplementedLoginLogServer() {}

// UnsafeLoginLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginLogServer will
// result in compilation errors.
type UnsafeLoginLogServer interface {
	mustEmbedUnimplementedLoginLogServer()
}

func RegisterLoginLogServer(s grpc.ServiceRegistrar, srv LoginLogServer) {
	s.RegisterService(&LoginLog_ServiceDesc, srv)
}

func _LoginLog_SysLoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServer).SysLoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLog_SysLoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServer).SysLoginLogList(ctx, req.(*common.SearchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginLog_SysLoginLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServer).SysLoginLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLog_SysLoginLogInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServer).SysLoginLogInfo(ctx, req.(*SysLoginLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginLog_SysLoginLogStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServer).SysLoginLogStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLog_SysLoginLogStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServer).SysLoginLogStore(ctx, req.(*SysLoginLogStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginLog_ServiceDesc is the grpc.ServiceDesc for LoginLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_sys.v1.LoginLog",
	HandlerType: (*LoginLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLoginLogList",
			Handler:    _LoginLog_SysLoginLogList_Handler,
		},
		{
			MethodName: "SysLoginLogInfo",
			Handler:    _LoginLog_SysLoginLogInfo_Handler,
		},
		{
			MethodName: "SysLoginLogStore",
			Handler:    _LoginLog_SysLoginLogStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_sys/v1/sys_login_log.proto",
}
