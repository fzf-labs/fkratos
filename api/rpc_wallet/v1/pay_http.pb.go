// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: rpc_wallet/v1/pay.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPayPayDel = "/api.rpc_wallet.v1.Pay/PayDel"
const OperationPayPayList = "/api.rpc_wallet.v1.Pay/PayList"
const OperationPayPayOne = "/api.rpc_wallet.v1.Pay/PayOne"
const OperationPayPayStore = "/api.rpc_wallet.v1.Pay/PayStore"

type PayHTTPServer interface {
	// PayDel支付-删除多条数据
	PayDel(context.Context, *PayDelReq) (*PayDelReply, error)
	// PayList支付-列表数据查询
	PayList(context.Context, *PayListReq) (*PayListReply, error)
	// PayOne支付-单条数据查询
	PayOne(context.Context, *PayOneReq) (*PayOneReply, error)
	// PayStore支付-创建一条数据
	PayStore(context.Context, *PayStoreReq) (*PayStoreReply, error)
}

func RegisterPayHTTPServer(s *http.Server, srv PayHTTPServer) {
	r := s.Route("/")
	r.POST("/pay/v1/pay_store", _Pay_PayStore0_HTTP_Handler(srv))
	r.POST("/pay/v1/pay_del", _Pay_PayDel0_HTTP_Handler(srv))
	r.GET("/pay/v1/pay_info", _Pay_PayOne0_HTTP_Handler(srv))
	r.POST("/pay/v1/pay_list", _Pay_PayList0_HTTP_Handler(srv))
}

func _Pay_PayStore0_HTTP_Handler(srv PayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayPayStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayStore(ctx, req.(*PayStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Pay_PayDel0_HTTP_Handler(srv PayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayPayDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayDel(ctx, req.(*PayDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayDelReply)
		return ctx.Result(200, reply)
	}
}

func _Pay_PayOne0_HTTP_Handler(srv PayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOneReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayPayOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayOne(ctx, req.(*PayOneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOneReply)
		return ctx.Result(200, reply)
	}
}

func _Pay_PayList0_HTTP_Handler(srv PayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPayPayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayList(ctx, req.(*PayListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayListReply)
		return ctx.Result(200, reply)
	}
}

type PayHTTPClient interface {
	PayDel(ctx context.Context, req *PayDelReq, opts ...http.CallOption) (rsp *PayDelReply, err error)
	PayList(ctx context.Context, req *PayListReq, opts ...http.CallOption) (rsp *PayListReply, err error)
	PayOne(ctx context.Context, req *PayOneReq, opts ...http.CallOption) (rsp *PayOneReply, err error)
	PayStore(ctx context.Context, req *PayStoreReq, opts ...http.CallOption) (rsp *PayStoreReply, err error)
}

type PayHTTPClientImpl struct {
	cc *http.Client
}

func NewPayHTTPClient(client *http.Client) PayHTTPClient {
	return &PayHTTPClientImpl{client}
}

func (c *PayHTTPClientImpl) PayDel(ctx context.Context, in *PayDelReq, opts ...http.CallOption) (*PayDelReply, error) {
	var out PayDelReply
	pattern := "/pay/v1/pay_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPayPayDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayHTTPClientImpl) PayList(ctx context.Context, in *PayListReq, opts ...http.CallOption) (*PayListReply, error) {
	var out PayListReply
	pattern := "/pay/v1/pay_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPayPayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayHTTPClientImpl) PayOne(ctx context.Context, in *PayOneReq, opts ...http.CallOption) (*PayOneReply, error) {
	var out PayOneReply
	pattern := "/pay/v1/pay_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPayPayOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayHTTPClientImpl) PayStore(ctx context.Context, in *PayStoreReq, opts ...http.CallOption) (*PayStoreReply, error) {
	var out PayStoreReply
	pattern := "/pay/v1/pay_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPayPayStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
