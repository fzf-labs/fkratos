// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_wallet/v1/wallet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WalletInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletInfoMultiError, or
// nil if none found.
func (m *WalletInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WalletInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WalletInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WalletInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WalletInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WalletInfoMultiError(errors)
	}

	return nil
}

// WalletInfoMultiError is an error wrapping multiple validation errors
// returned by WalletInfo.ValidateAll() if the designated constraints aren't met.
type WalletInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletInfoMultiError) AllErrors() []error { return m }

// WalletInfoValidationError is the validation error returned by
// WalletInfo.Validate if the designated constraints aren't met.
type WalletInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletInfoValidationError) ErrorName() string { return "WalletInfoValidationError" }

// Error satisfies the builtin error interface
func (e WalletInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletInfoValidationError{}

// Validate checks the field values on WalletStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletStoreReqMultiError,
// or nil if none found.
func (m *WalletStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for Status

	if len(errors) > 0 {
		return WalletStoreReqMultiError(errors)
	}

	return nil
}

// WalletStoreReqMultiError is an error wrapping multiple validation errors
// returned by WalletStoreReq.ValidateAll() if the designated constraints
// aren't met.
type WalletStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletStoreReqMultiError) AllErrors() []error { return m }

// WalletStoreReqValidationError is the validation error returned by
// WalletStoreReq.Validate if the designated constraints aren't met.
type WalletStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletStoreReqValidationError) ErrorName() string { return "WalletStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e WalletStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletStoreReqValidationError{}

// Validate checks the field values on WalletStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WalletStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WalletStoreReplyMultiError, or nil if none found.
func (m *WalletStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return WalletStoreReplyMultiError(errors)
	}

	return nil
}

// WalletStoreReplyMultiError is an error wrapping multiple validation errors
// returned by WalletStoreReply.ValidateAll() if the designated constraints
// aren't met.
type WalletStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletStoreReplyMultiError) AllErrors() []error { return m }

// WalletStoreReplyValidationError is the validation error returned by
// WalletStoreReply.Validate if the designated constraints aren't met.
type WalletStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletStoreReplyValidationError) ErrorName() string { return "WalletStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e WalletStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletStoreReplyValidationError{}

// Validate checks the field values on WalletDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletDelReqMultiError, or
// nil if none found.
func (m *WalletDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return WalletDelReqMultiError(errors)
	}

	return nil
}

// WalletDelReqMultiError is an error wrapping multiple validation errors
// returned by WalletDelReq.ValidateAll() if the designated constraints aren't met.
type WalletDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletDelReqMultiError) AllErrors() []error { return m }

// WalletDelReqValidationError is the validation error returned by
// WalletDelReq.Validate if the designated constraints aren't met.
type WalletDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletDelReqValidationError) ErrorName() string { return "WalletDelReqValidationError" }

// Error satisfies the builtin error interface
func (e WalletDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletDelReqValidationError{}

// Validate checks the field values on WalletDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletDelReplyMultiError,
// or nil if none found.
func (m *WalletDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WalletDelReplyMultiError(errors)
	}

	return nil
}

// WalletDelReplyMultiError is an error wrapping multiple validation errors
// returned by WalletDelReply.ValidateAll() if the designated constraints
// aren't met.
type WalletDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletDelReplyMultiError) AllErrors() []error { return m }

// WalletDelReplyValidationError is the validation error returned by
// WalletDelReply.Validate if the designated constraints aren't met.
type WalletDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletDelReplyValidationError) ErrorName() string { return "WalletDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e WalletDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletDelReplyValidationError{}

// Validate checks the field values on WalletOneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletOneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletOneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletOneReqMultiError, or
// nil if none found.
func (m *WalletOneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletOneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return WalletOneReqMultiError(errors)
	}

	return nil
}

// WalletOneReqMultiError is an error wrapping multiple validation errors
// returned by WalletOneReq.ValidateAll() if the designated constraints aren't met.
type WalletOneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletOneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletOneReqMultiError) AllErrors() []error { return m }

// WalletOneReqValidationError is the validation error returned by
// WalletOneReq.Validate if the designated constraints aren't met.
type WalletOneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletOneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletOneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletOneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletOneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletOneReqValidationError) ErrorName() string { return "WalletOneReqValidationError" }

// Error satisfies the builtin error interface
func (e WalletOneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletOneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletOneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletOneReqValidationError{}

// Validate checks the field values on WalletOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletOneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletOneReplyMultiError,
// or nil if none found.
func (m *WalletOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WalletOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WalletOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletOneReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WalletOneReplyMultiError(errors)
	}

	return nil
}

// WalletOneReplyMultiError is an error wrapping multiple validation errors
// returned by WalletOneReply.ValidateAll() if the designated constraints
// aren't met.
type WalletOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletOneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletOneReplyMultiError) AllErrors() []error { return m }

// WalletOneReplyValidationError is the validation error returned by
// WalletOneReply.Validate if the designated constraints aren't met.
type WalletOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletOneReplyValidationError) ErrorName() string { return "WalletOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e WalletOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletOneReplyValidationError{}

// Validate checks the field values on WalletListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WalletListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WalletListReqMultiError, or
// nil if none found.
func (m *WalletListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WalletListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WalletListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WalletListReqMultiError(errors)
	}

	return nil
}

// WalletListReqMultiError is an error wrapping multiple validation errors
// returned by WalletListReq.ValidateAll() if the designated constraints
// aren't met.
type WalletListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletListReqMultiError) AllErrors() []error { return m }

// WalletListReqValidationError is the validation error returned by
// WalletListReq.Validate if the designated constraints aren't met.
type WalletListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletListReqValidationError) ErrorName() string { return "WalletListReqValidationError" }

// Error satisfies the builtin error interface
func (e WalletListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletListReqValidationError{}

// Validate checks the field values on WalletListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WalletListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WalletListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WalletListReplyMultiError, or nil if none found.
func (m *WalletListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WalletListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WalletListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WalletListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WalletListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WalletListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WalletListReplyMultiError(errors)
	}

	return nil
}

// WalletListReplyMultiError is an error wrapping multiple validation errors
// returned by WalletListReply.ValidateAll() if the designated constraints
// aren't met.
type WalletListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletListReplyMultiError) AllErrors() []error { return m }

// WalletListReplyValidationError is the validation error returned by
// WalletListReply.Validate if the designated constraints aren't met.
type WalletListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletListReplyValidationError) ErrorName() string { return "WalletListReplyValidationError" }

// Error satisfies the builtin error interface
func (e WalletListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletListReplyValidationError{}
