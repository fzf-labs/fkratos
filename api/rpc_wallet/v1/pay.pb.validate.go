// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_wallet/v1/pay.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PayInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PayInfoMultiError, or nil if none found.
func (m *PayInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PayInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PayInfoMultiError(errors)
	}

	return nil
}

// PayInfoMultiError is an error wrapping multiple validation errors returned
// by PayInfo.ValidateAll() if the designated constraints aren't met.
type PayInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayInfoMultiError) AllErrors() []error { return m }

// PayInfoValidationError is the validation error returned by PayInfo.Validate
// if the designated constraints aren't met.
type PayInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayInfoValidationError) ErrorName() string { return "PayInfoValidationError" }

// Error satisfies the builtin error interface
func (e PayInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayInfoValidationError{}

// Validate checks the field values on PayStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayStoreReqMultiError, or
// nil if none found.
func (m *PayStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for Status

	if len(errors) > 0 {
		return PayStoreReqMultiError(errors)
	}

	return nil
}

// PayStoreReqMultiError is an error wrapping multiple validation errors
// returned by PayStoreReq.ValidateAll() if the designated constraints aren't met.
type PayStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayStoreReqMultiError) AllErrors() []error { return m }

// PayStoreReqValidationError is the validation error returned by
// PayStoreReq.Validate if the designated constraints aren't met.
type PayStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayStoreReqValidationError) ErrorName() string { return "PayStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e PayStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayStoreReqValidationError{}

// Validate checks the field values on PayStoreReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayStoreReplyMultiError, or
// nil if none found.
func (m *PayStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PayStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return PayStoreReplyMultiError(errors)
	}

	return nil
}

// PayStoreReplyMultiError is an error wrapping multiple validation errors
// returned by PayStoreReply.ValidateAll() if the designated constraints
// aren't met.
type PayStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayStoreReplyMultiError) AllErrors() []error { return m }

// PayStoreReplyValidationError is the validation error returned by
// PayStoreReply.Validate if the designated constraints aren't met.
type PayStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayStoreReplyValidationError) ErrorName() string { return "PayStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e PayStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayStoreReplyValidationError{}

// Validate checks the field values on PayDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayDelReqMultiError, or nil
// if none found.
func (m *PayDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return PayDelReqMultiError(errors)
	}

	return nil
}

// PayDelReqMultiError is an error wrapping multiple validation errors returned
// by PayDelReq.ValidateAll() if the designated constraints aren't met.
type PayDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayDelReqMultiError) AllErrors() []error { return m }

// PayDelReqValidationError is the validation error returned by
// PayDelReq.Validate if the designated constraints aren't met.
type PayDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayDelReqValidationError) ErrorName() string { return "PayDelReqValidationError" }

// Error satisfies the builtin error interface
func (e PayDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayDelReqValidationError{}

// Validate checks the field values on PayDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayDelReplyMultiError, or
// nil if none found.
func (m *PayDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PayDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PayDelReplyMultiError(errors)
	}

	return nil
}

// PayDelReplyMultiError is an error wrapping multiple validation errors
// returned by PayDelReply.ValidateAll() if the designated constraints aren't met.
type PayDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayDelReplyMultiError) AllErrors() []error { return m }

// PayDelReplyValidationError is the validation error returned by
// PayDelReply.Validate if the designated constraints aren't met.
type PayDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayDelReplyValidationError) ErrorName() string { return "PayDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e PayDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayDelReplyValidationError{}

// Validate checks the field values on PayOneReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayOneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayOneReqMultiError, or nil
// if none found.
func (m *PayOneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return PayOneReqMultiError(errors)
	}

	return nil
}

// PayOneReqMultiError is an error wrapping multiple validation errors returned
// by PayOneReq.ValidateAll() if the designated constraints aren't met.
type PayOneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOneReqMultiError) AllErrors() []error { return m }

// PayOneReqValidationError is the validation error returned by
// PayOneReq.Validate if the designated constraints aren't met.
type PayOneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOneReqValidationError) ErrorName() string { return "PayOneReqValidationError" }

// Error satisfies the builtin error interface
func (e PayOneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOneReqValidationError{}

// Validate checks the field values on PayOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayOneReplyMultiError, or
// nil if none found.
func (m *PayOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayOneReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PayOneReplyMultiError(errors)
	}

	return nil
}

// PayOneReplyMultiError is an error wrapping multiple validation errors
// returned by PayOneReply.ValidateAll() if the designated constraints aren't met.
type PayOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOneReplyMultiError) AllErrors() []error { return m }

// PayOneReplyValidationError is the validation error returned by
// PayOneReply.Validate if the designated constraints aren't met.
type PayOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOneReplyValidationError) ErrorName() string { return "PayOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e PayOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOneReplyValidationError{}

// Validate checks the field values on PayListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayListReqMultiError, or
// nil if none found.
func (m *PayListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PayListReqMultiError(errors)
	}

	return nil
}

// PayListReqMultiError is an error wrapping multiple validation errors
// returned by PayListReq.ValidateAll() if the designated constraints aren't met.
type PayListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayListReqMultiError) AllErrors() []error { return m }

// PayListReqValidationError is the validation error returned by
// PayListReq.Validate if the designated constraints aren't met.
type PayListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayListReqValidationError) ErrorName() string { return "PayListReqValidationError" }

// Error satisfies the builtin error interface
func (e PayListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayListReqValidationError{}

// Validate checks the field values on PayListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayListReplyMultiError, or
// nil if none found.
func (m *PayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PayListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PayListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PayListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PayListReplyMultiError(errors)
	}

	return nil
}

// PayListReplyMultiError is an error wrapping multiple validation errors
// returned by PayListReply.ValidateAll() if the designated constraints aren't met.
type PayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayListReplyMultiError) AllErrors() []error { return m }

// PayListReplyValidationError is the validation error returned by
// PayListReply.Validate if the designated constraints aren't met.
type PayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayListReplyValidationError) ErrorName() string { return "PayListReplyValidationError" }

// Error satisfies the builtin error interface
func (e PayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayListReplyValidationError{}
