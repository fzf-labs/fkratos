// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: rpc_device/v1/device.proto

package v1

import (
	paginator "fkratos/api/paginator"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 设备表信息
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                            // 记录ID
	Sn              string                 `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`                            // 设备的唯一标识序列号
	DeviceName      string                 `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`            // 设备名称
	DeviceType      string                 `protobuf:"bytes,4,opt,name=deviceType,proto3" json:"deviceType,omitempty"`            // 设备类型
	DeviceModel     string                 `protobuf:"bytes,5,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`          // 设备型号
	Desc            string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                        // 描述
	Certificate     string                 `protobuf:"bytes,7,opt,name=certificate,proto3" json:"certificate,omitempty"`          // 设备证书
	SecureKey       string                 `protobuf:"bytes,8,opt,name=secureKey,proto3" json:"secureKey,omitempty"`              // 设备密钥
	FirmwareVersion string                 `protobuf:"bytes,9,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`  // 固件版本号
	SoftwareVersion string                 `protobuf:"bytes,10,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"` // 软件版本号
	RegistryTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=registryTime,proto3" json:"registryTime,omitempty"`       // 激活时间
	Status          int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                  // 状态
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`             // 创建时间
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`             // 更新时间
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeviceInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceInfo) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *DeviceInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DeviceInfo) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *DeviceInfo) GetSecureKey() string {
	if x != nil {
		return x.SecureKey
	}
	return ""
}

func (x *DeviceInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *DeviceInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceInfo) GetRegistryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistryTime
	}
	return nil
}

func (x *DeviceInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeviceInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 请求-设备表-创建一条数据
type DeviceStoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                            // 记录ID
	Sn              string                 `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`                            // 设备的唯一标识序列号
	DeviceName      string                 `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`            // 设备名称
	DeviceType      string                 `protobuf:"bytes,4,opt,name=deviceType,proto3" json:"deviceType,omitempty"`            // 设备类型
	DeviceModel     string                 `protobuf:"bytes,5,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`          // 设备型号
	Desc            string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                        // 描述
	Certificate     string                 `protobuf:"bytes,7,opt,name=certificate,proto3" json:"certificate,omitempty"`          // 设备证书
	SecureKey       string                 `protobuf:"bytes,8,opt,name=secureKey,proto3" json:"secureKey,omitempty"`              // 设备密钥
	FirmwareVersion string                 `protobuf:"bytes,9,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`  // 固件版本号
	SoftwareVersion string                 `protobuf:"bytes,10,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"` // 软件版本号
	RegistryTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=registryTime,proto3" json:"registryTime,omitempty"`       // 激活时间
	Status          int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                  // 状态
}

func (x *DeviceStoreReq) Reset() {
	*x = DeviceStoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStoreReq) ProtoMessage() {}

func (x *DeviceStoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStoreReq.ProtoReflect.Descriptor instead.
func (*DeviceStoreReq) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceStoreReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeviceStoreReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DeviceStoreReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceStoreReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceStoreReq) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *DeviceStoreReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DeviceStoreReq) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *DeviceStoreReq) GetSecureKey() string {
	if x != nil {
		return x.SecureKey
	}
	return ""
}

func (x *DeviceStoreReq) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *DeviceStoreReq) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *DeviceStoreReq) GetRegistryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistryTime
	}
	return nil
}

func (x *DeviceStoreReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 响应-设备表-创建一条数据
type DeviceStoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 记录ID
}

func (x *DeviceStoreReply) Reset() {
	*x = DeviceStoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStoreReply) ProtoMessage() {}

func (x *DeviceStoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStoreReply.ProtoReflect.Descriptor instead.
func (*DeviceStoreReply) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceStoreReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// 请求-设备表-删除多条数据
type DeviceDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDS []string `protobuf:"bytes,1,rep,name=IDS,proto3" json:"IDS,omitempty"` // 记录ID集合
}

func (x *DeviceDelReq) Reset() {
	*x = DeviceDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDelReq) ProtoMessage() {}

func (x *DeviceDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDelReq.ProtoReflect.Descriptor instead.
func (*DeviceDelReq) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceDelReq) GetIDS() []string {
	if x != nil {
		return x.IDS
	}
	return nil
}

// 响应-设备表-删除多条数据
type DeviceDelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceDelReply) Reset() {
	*x = DeviceDelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDelReply) ProtoMessage() {}

func (x *DeviceDelReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDelReply.ProtoReflect.Descriptor instead.
func (*DeviceDelReply) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{4}
}

// 请求-设备表-单条数据查询
type DeviceOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 记录ID
}

func (x *DeviceOneReq) Reset() {
	*x = DeviceOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOneReq) ProtoMessage() {}

func (x *DeviceOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOneReq.ProtoReflect.Descriptor instead.
func (*DeviceOneReq) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceOneReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// 响应-设备表-单条数据查询
type DeviceOneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DeviceOneReply) Reset() {
	*x = DeviceOneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOneReply) ProtoMessage() {}

func (x *DeviceOneReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOneReply.ProtoReflect.Descriptor instead.
func (*DeviceOneReply) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceOneReply) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// 请求-设备表-列表数据查询
type DeviceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator *paginator.PaginatorReq `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"` //分页
}

func (x *DeviceListReq) Reset() {
	*x = DeviceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListReq) ProtoMessage() {}

func (x *DeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListReq.ProtoReflect.Descriptor instead.
func (*DeviceListReq) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceListReq) GetPaginator() *paginator.PaginatorReq {
	if x != nil {
		return x.Paginator
	}
	return nil
}

// 响应-设备表-列表数据查询
type DeviceListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginator *paginator.PaginatorReply `protobuf:"bytes,1,opt,name=paginator,proto3" json:"paginator,omitempty"` // 分页
	List      []*DeviceInfo             `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`           // 列表数据
}

func (x *DeviceListReply) Reset() {
	*x = DeviceListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_device_v1_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListReply) ProtoMessage() {}

func (x *DeviceListReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_device_v1_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListReply.ProtoReflect.Descriptor instead.
func (*DeviceListReply) Descriptor() ([]byte, []int) {
	return file_rpc_device_v1_device_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceListReply) GetPaginator() *paginator.PaginatorReply {
	if x != nil {
		return x.Paginator
	}
	return nil
}

func (x *DeviceListReply) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_rpc_device_v1_device_proto protoreflect.FileDescriptor

var file_rpc_device_v1_device_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x20, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x53, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49,
	0x44, 0x53, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xde, 0x03, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x71, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x12, 0x6f, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e, 0x65, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x75, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a,
	0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1e, 0x5a, 0x1c, 0x66, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rpc_device_v1_device_proto_rawDescOnce sync.Once
	file_rpc_device_v1_device_proto_rawDescData = file_rpc_device_v1_device_proto_rawDesc
)

func file_rpc_device_v1_device_proto_rawDescGZIP() []byte {
	file_rpc_device_v1_device_proto_rawDescOnce.Do(func() {
		file_rpc_device_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_device_v1_device_proto_rawDescData)
	})
	return file_rpc_device_v1_device_proto_rawDescData
}

var file_rpc_device_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rpc_device_v1_device_proto_goTypes = []interface{}{
	(*DeviceInfo)(nil),               // 0: api.rpc_device.v1.DeviceInfo
	(*DeviceStoreReq)(nil),           // 1: api.rpc_device.v1.DeviceStoreReq
	(*DeviceStoreReply)(nil),         // 2: api.rpc_device.v1.DeviceStoreReply
	(*DeviceDelReq)(nil),             // 3: api.rpc_device.v1.DeviceDelReq
	(*DeviceDelReply)(nil),           // 4: api.rpc_device.v1.DeviceDelReply
	(*DeviceOneReq)(nil),             // 5: api.rpc_device.v1.DeviceOneReq
	(*DeviceOneReply)(nil),           // 6: api.rpc_device.v1.DeviceOneReply
	(*DeviceListReq)(nil),            // 7: api.rpc_device.v1.DeviceListReq
	(*DeviceListReply)(nil),          // 8: api.rpc_device.v1.DeviceListReply
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*paginator.PaginatorReq)(nil),   // 10: api.paginator.PaginatorReq
	(*paginator.PaginatorReply)(nil), // 11: api.paginator.PaginatorReply
}
var file_rpc_device_v1_device_proto_depIdxs = []int32{
	9,  // 0: api.rpc_device.v1.DeviceInfo.registryTime:type_name -> google.protobuf.Timestamp
	9,  // 1: api.rpc_device.v1.DeviceInfo.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 2: api.rpc_device.v1.DeviceInfo.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 3: api.rpc_device.v1.DeviceStoreReq.registryTime:type_name -> google.protobuf.Timestamp
	0,  // 4: api.rpc_device.v1.DeviceOneReply.info:type_name -> api.rpc_device.v1.DeviceInfo
	10, // 5: api.rpc_device.v1.DeviceListReq.paginator:type_name -> api.paginator.PaginatorReq
	11, // 6: api.rpc_device.v1.DeviceListReply.paginator:type_name -> api.paginator.PaginatorReply
	0,  // 7: api.rpc_device.v1.DeviceListReply.list:type_name -> api.rpc_device.v1.DeviceInfo
	1,  // 8: api.rpc_device.v1.Device.DeviceStore:input_type -> api.rpc_device.v1.DeviceStoreReq
	3,  // 9: api.rpc_device.v1.Device.DeviceDel:input_type -> api.rpc_device.v1.DeviceDelReq
	5,  // 10: api.rpc_device.v1.Device.DeviceOne:input_type -> api.rpc_device.v1.DeviceOneReq
	7,  // 11: api.rpc_device.v1.Device.DeviceList:input_type -> api.rpc_device.v1.DeviceListReq
	2,  // 12: api.rpc_device.v1.Device.DeviceStore:output_type -> api.rpc_device.v1.DeviceStoreReply
	4,  // 13: api.rpc_device.v1.Device.DeviceDel:output_type -> api.rpc_device.v1.DeviceDelReply
	6,  // 14: api.rpc_device.v1.Device.DeviceOne:output_type -> api.rpc_device.v1.DeviceOneReply
	8,  // 15: api.rpc_device.v1.Device.DeviceList:output_type -> api.rpc_device.v1.DeviceListReply
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_rpc_device_v1_device_proto_init() }
func file_rpc_device_v1_device_proto_init() {
	if File_rpc_device_v1_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_device_v1_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_device_v1_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_device_v1_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_device_v1_device_proto_goTypes,
		DependencyIndexes: file_rpc_device_v1_device_proto_depIdxs,
		MessageInfos:      file_rpc_device_v1_device_proto_msgTypes,
	}.Build()
	File_rpc_device_v1_device_proto = out.File
	file_rpc_device_v1_device_proto_rawDesc = nil
	file_rpc_device_v1_device_proto_goTypes = nil
	file_rpc_device_v1_device_proto_depIdxs = nil
}
