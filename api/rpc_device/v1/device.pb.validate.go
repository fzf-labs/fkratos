// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_device/v1/device.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeviceInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceInfoMultiError, or
// nil if none found.
func (m *DeviceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Sn

	// no validation rules for DeviceName

	// no validation rules for DeviceType

	// no validation rules for DeviceModel

	// no validation rules for Desc

	// no validation rules for Certificate

	// no validation rules for SecureKey

	// no validation rules for FirmwareVersion

	// no validation rules for SoftwareVersion

	if all {
		switch v := interface{}(m.GetRegistryTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "RegistryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "RegistryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistryTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "RegistryTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceInfoMultiError(errors)
	}

	return nil
}

// DeviceInfoMultiError is an error wrapping multiple validation errors
// returned by DeviceInfo.ValidateAll() if the designated constraints aren't met.
type DeviceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceInfoMultiError) AllErrors() []error { return m }

// DeviceInfoValidationError is the validation error returned by
// DeviceInfo.Validate if the designated constraints aren't met.
type DeviceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceInfoValidationError) ErrorName() string { return "DeviceInfoValidationError" }

// Error satisfies the builtin error interface
func (e DeviceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceInfoValidationError{}

// Validate checks the field values on DeviceStoreReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceStoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStoreReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceStoreReqMultiError,
// or nil if none found.
func (m *DeviceStoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Sn

	// no validation rules for DeviceName

	// no validation rules for DeviceType

	// no validation rules for DeviceModel

	// no validation rules for Desc

	// no validation rules for Certificate

	// no validation rules for SecureKey

	// no validation rules for FirmwareVersion

	// no validation rules for SoftwareVersion

	if all {
		switch v := interface{}(m.GetRegistryTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceStoreReqValidationError{
					field:  "RegistryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceStoreReqValidationError{
					field:  "RegistryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistryTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStoreReqValidationError{
				field:  "RegistryTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return DeviceStoreReqMultiError(errors)
	}

	return nil
}

// DeviceStoreReqMultiError is an error wrapping multiple validation errors
// returned by DeviceStoreReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceStoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStoreReqMultiError) AllErrors() []error { return m }

// DeviceStoreReqValidationError is the validation error returned by
// DeviceStoreReq.Validate if the designated constraints aren't met.
type DeviceStoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStoreReqValidationError) ErrorName() string { return "DeviceStoreReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceStoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStoreReqValidationError{}

// Validate checks the field values on DeviceStoreReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceStoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceStoreReplyMultiError, or nil if none found.
func (m *DeviceStoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return DeviceStoreReplyMultiError(errors)
	}

	return nil
}

// DeviceStoreReplyMultiError is an error wrapping multiple validation errors
// returned by DeviceStoreReply.ValidateAll() if the designated constraints
// aren't met.
type DeviceStoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStoreReplyMultiError) AllErrors() []error { return m }

// DeviceStoreReplyValidationError is the validation error returned by
// DeviceStoreReply.Validate if the designated constraints aren't met.
type DeviceStoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStoreReplyValidationError) ErrorName() string { return "DeviceStoreReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeviceStoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStoreReplyValidationError{}

// Validate checks the field values on DeviceDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceDelReqMultiError, or
// nil if none found.
func (m *DeviceDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceDelReqMultiError(errors)
	}

	return nil
}

// DeviceDelReqMultiError is an error wrapping multiple validation errors
// returned by DeviceDelReq.ValidateAll() if the designated constraints aren't met.
type DeviceDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDelReqMultiError) AllErrors() []error { return m }

// DeviceDelReqValidationError is the validation error returned by
// DeviceDelReq.Validate if the designated constraints aren't met.
type DeviceDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDelReqValidationError) ErrorName() string { return "DeviceDelReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDelReqValidationError{}

// Validate checks the field values on DeviceDelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceDelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceDelReplyMultiError,
// or nil if none found.
func (m *DeviceDelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceDelReplyMultiError(errors)
	}

	return nil
}

// DeviceDelReplyMultiError is an error wrapping multiple validation errors
// returned by DeviceDelReply.ValidateAll() if the designated constraints
// aren't met.
type DeviceDelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDelReplyMultiError) AllErrors() []error { return m }

// DeviceDelReplyValidationError is the validation error returned by
// DeviceDelReply.Validate if the designated constraints aren't met.
type DeviceDelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDelReplyValidationError) ErrorName() string { return "DeviceDelReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDelReplyValidationError{}

// Validate checks the field values on DeviceOneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceOneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceOneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceOneReqMultiError, or
// nil if none found.
func (m *DeviceOneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceOneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return DeviceOneReqMultiError(errors)
	}

	return nil
}

// DeviceOneReqMultiError is an error wrapping multiple validation errors
// returned by DeviceOneReq.ValidateAll() if the designated constraints aren't met.
type DeviceOneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceOneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceOneReqMultiError) AllErrors() []error { return m }

// DeviceOneReqValidationError is the validation error returned by
// DeviceOneReq.Validate if the designated constraints aren't met.
type DeviceOneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceOneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceOneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceOneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceOneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceOneReqValidationError) ErrorName() string { return "DeviceOneReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceOneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceOneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceOneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceOneReqValidationError{}

// Validate checks the field values on DeviceOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceOneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceOneReplyMultiError,
// or nil if none found.
func (m *DeviceOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceOneReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceOneReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceOneReplyMultiError(errors)
	}

	return nil
}

// DeviceOneReplyMultiError is an error wrapping multiple validation errors
// returned by DeviceOneReply.ValidateAll() if the designated constraints
// aren't met.
type DeviceOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceOneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceOneReplyMultiError) AllErrors() []error { return m }

// DeviceOneReplyValidationError is the validation error returned by
// DeviceOneReply.Validate if the designated constraints aren't met.
type DeviceOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceOneReplyValidationError) ErrorName() string { return "DeviceOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeviceOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceOneReplyValidationError{}

// Validate checks the field values on DeviceListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceListReqMultiError, or
// nil if none found.
func (m *DeviceListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceListReqValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceListReqValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceListReqMultiError(errors)
	}

	return nil
}

// DeviceListReqMultiError is an error wrapping multiple validation errors
// returned by DeviceListReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListReqMultiError) AllErrors() []error { return m }

// DeviceListReqValidationError is the validation error returned by
// DeviceListReq.Validate if the designated constraints aren't met.
type DeviceListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListReqValidationError) ErrorName() string { return "DeviceListReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListReqValidationError{}

// Validate checks the field values on DeviceListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceListReplyMultiError, or nil if none found.
func (m *DeviceListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceListReplyValidationError{
					field:  "Paginator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceListReplyValidationError{
				field:  "Paginator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceListReplyMultiError(errors)
	}

	return nil
}

// DeviceListReplyMultiError is an error wrapping multiple validation errors
// returned by DeviceListReply.ValidateAll() if the designated constraints
// aren't met.
type DeviceListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListReplyMultiError) AllErrors() []error { return m }

// DeviceListReplyValidationError is the validation error returned by
// DeviceListReply.Validate if the designated constraints aren't met.
type DeviceListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListReplyValidationError) ErrorName() string { return "DeviceListReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeviceListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListReplyValidationError{}
