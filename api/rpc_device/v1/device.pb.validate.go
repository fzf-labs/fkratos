// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc_device/v1/device.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceReqMultiError, or nil if none found.
func (m *CreateDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeviceReqMultiError(errors)
	}

	return nil
}

// CreateDeviceReqMultiError is an error wrapping multiple validation errors
// returned by CreateDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceReqMultiError) AllErrors() []error { return m }

// CreateDeviceReqValidationError is the validation error returned by
// CreateDeviceReq.Validate if the designated constraints aren't met.
type CreateDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceReqValidationError) ErrorName() string { return "CreateDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceReqValidationError{}

// Validate checks the field values on CreateDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceReplyMultiError, or nil if none found.
func (m *CreateDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeviceReplyMultiError(errors)
	}

	return nil
}

// CreateDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceReplyMultiError) AllErrors() []error { return m }

// CreateDeviceReplyValidationError is the validation error returned by
// CreateDeviceReply.Validate if the designated constraints aren't met.
type CreateDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceReplyValidationError) ErrorName() string {
	return "CreateDeviceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceReplyValidationError{}

// Validate checks the field values on UpdateDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceReqMultiError, or nil if none found.
func (m *UpdateDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeviceReqMultiError(errors)
	}

	return nil
}

// UpdateDeviceReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceReqMultiError) AllErrors() []error { return m }

// UpdateDeviceReqValidationError is the validation error returned by
// UpdateDeviceReq.Validate if the designated constraints aren't met.
type UpdateDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceReqValidationError) ErrorName() string { return "UpdateDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceReqValidationError{}

// Validate checks the field values on UpdateDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceReplyMultiError, or nil if none found.
func (m *UpdateDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeviceReplyMultiError(errors)
	}

	return nil
}

// UpdateDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceReplyMultiError) AllErrors() []error { return m }

// UpdateDeviceReplyValidationError is the validation error returned by
// UpdateDeviceReply.Validate if the designated constraints aren't met.
type UpdateDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceReplyValidationError) ErrorName() string {
	return "UpdateDeviceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceReplyValidationError{}

// Validate checks the field values on DeleteDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceReqMultiError, or nil if none found.
func (m *DeleteDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeviceReqMultiError(errors)
	}

	return nil
}

// DeleteDeviceReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceReqMultiError) AllErrors() []error { return m }

// DeleteDeviceReqValidationError is the validation error returned by
// DeleteDeviceReq.Validate if the designated constraints aren't met.
type DeleteDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceReqValidationError) ErrorName() string { return "DeleteDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceReqValidationError{}

// Validate checks the field values on DeleteDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceReplyMultiError, or nil if none found.
func (m *DeleteDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeviceReplyMultiError(errors)
	}

	return nil
}

// DeleteDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceReplyMultiError) AllErrors() []error { return m }

// DeleteDeviceReplyValidationError is the validation error returned by
// DeleteDeviceReply.Validate if the designated constraints aren't met.
type DeleteDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceReplyValidationError) ErrorName() string {
	return "DeleteDeviceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceReplyValidationError{}

// Validate checks the field values on GetDeviceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeviceReqMultiError, or
// nil if none found.
func (m *GetDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDeviceReqMultiError(errors)
	}

	return nil
}

// GetDeviceReqMultiError is an error wrapping multiple validation errors
// returned by GetDeviceReq.ValidateAll() if the designated constraints aren't met.
type GetDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceReqMultiError) AllErrors() []error { return m }

// GetDeviceReqValidationError is the validation error returned by
// GetDeviceReq.Validate if the designated constraints aren't met.
type GetDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceReqValidationError) ErrorName() string { return "GetDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceReqValidationError{}

// Validate checks the field values on GetDeviceReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeviceReplyMultiError,
// or nil if none found.
func (m *GetDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDeviceReplyMultiError(errors)
	}

	return nil
}

// GetDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by GetDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceReplyMultiError) AllErrors() []error { return m }

// GetDeviceReplyValidationError is the validation error returned by
// GetDeviceReply.Validate if the designated constraints aren't met.
type GetDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceReplyValidationError) ErrorName() string { return "GetDeviceReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceReplyValidationError{}

// Validate checks the field values on ListDeviceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDeviceReqMultiError, or
// nil if none found.
func (m *ListDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDeviceReqMultiError(errors)
	}

	return nil
}

// ListDeviceReqMultiError is an error wrapping multiple validation errors
// returned by ListDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceReqMultiError) AllErrors() []error { return m }

// ListDeviceReqValidationError is the validation error returned by
// ListDeviceReq.Validate if the designated constraints aren't met.
type ListDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceReqValidationError) ErrorName() string { return "ListDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceReqValidationError{}

// Validate checks the field values on ListDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceReplyMultiError, or nil if none found.
func (m *ListDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDeviceReplyMultiError(errors)
	}

	return nil
}

// ListDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceReplyMultiError) AllErrors() []error { return m }

// ListDeviceReplyValidationError is the validation error returned by
// ListDeviceReply.Validate if the designated constraints aren't met.
type ListDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceReplyValidationError) ErrorName() string { return "ListDeviceReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceReplyValidationError{}
