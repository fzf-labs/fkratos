// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: rpc_device/v1/device.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeviceDeviceDel = "/api.rpc_device.v1.Device/DeviceDel"
const OperationDeviceDeviceList = "/api.rpc_device.v1.Device/DeviceList"
const OperationDeviceDeviceOne = "/api.rpc_device.v1.Device/DeviceOne"
const OperationDeviceDeviceStore = "/api.rpc_device.v1.Device/DeviceStore"

type DeviceHTTPServer interface {
	// DeviceDel设备表-删除多条数据
	DeviceDel(context.Context, *DeviceDelReq) (*DeviceDelReply, error)
	// DeviceList设备表-列表数据查询
	DeviceList(context.Context, *DeviceListReq) (*DeviceListReply, error)
	// DeviceOne设备表-单条数据查询
	DeviceOne(context.Context, *DeviceOneReq) (*DeviceOneReply, error)
	// DeviceStore设备表-创建一条数据
	DeviceStore(context.Context, *DeviceStoreReq) (*DeviceStoreReply, error)
}

func RegisterDeviceHTTPServer(s *http.Server, srv DeviceHTTPServer) {
	r := s.Route("/")
	r.POST("/device/v1/device_store", _Device_DeviceStore0_HTTP_Handler(srv))
	r.POST("/device/v1/device_del", _Device_DeviceDel0_HTTP_Handler(srv))
	r.GET("/device/v1/device_info", _Device_DeviceOne0_HTTP_Handler(srv))
	r.POST("/device/v1/device_list", _Device_DeviceList0_HTTP_Handler(srv))
}

func _Device_DeviceStore0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceStoreReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceDeviceStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeviceStore(ctx, req.(*DeviceStoreReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceStoreReply)
		return ctx.Result(200, reply)
	}
}

func _Device_DeviceDel0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceDelReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceDeviceDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeviceDel(ctx, req.(*DeviceDelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceDelReply)
		return ctx.Result(200, reply)
	}
}

func _Device_DeviceOne0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceOneReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceDeviceOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeviceOne(ctx, req.(*DeviceOneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceOneReply)
		return ctx.Result(200, reply)
	}
}

func _Device_DeviceList0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceDeviceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeviceList(ctx, req.(*DeviceListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceListReply)
		return ctx.Result(200, reply)
	}
}

type DeviceHTTPClient interface {
	DeviceDel(ctx context.Context, req *DeviceDelReq, opts ...http.CallOption) (rsp *DeviceDelReply, err error)
	DeviceList(ctx context.Context, req *DeviceListReq, opts ...http.CallOption) (rsp *DeviceListReply, err error)
	DeviceOne(ctx context.Context, req *DeviceOneReq, opts ...http.CallOption) (rsp *DeviceOneReply, err error)
	DeviceStore(ctx context.Context, req *DeviceStoreReq, opts ...http.CallOption) (rsp *DeviceStoreReply, err error)
}

type DeviceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeviceHTTPClient(client *http.Client) DeviceHTTPClient {
	return &DeviceHTTPClientImpl{client}
}

func (c *DeviceHTTPClientImpl) DeviceDel(ctx context.Context, in *DeviceDelReq, opts ...http.CallOption) (*DeviceDelReply, error) {
	var out DeviceDelReply
	pattern := "/device/v1/device_del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceDeviceDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) DeviceList(ctx context.Context, in *DeviceListReq, opts ...http.CallOption) (*DeviceListReply, error) {
	var out DeviceListReply
	pattern := "/device/v1/device_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceDeviceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) DeviceOne(ctx context.Context, in *DeviceOneReq, opts ...http.CallOption) (*DeviceOneReply, error) {
	var out DeviceOneReply
	pattern := "/device/v1/device_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceDeviceOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) DeviceStore(ctx context.Context, in *DeviceStoreReq, opts ...http.CallOption) (*DeviceStoreReply, error) {
	var out DeviceStoreReply
	pattern := "/device/v1/device_store"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceDeviceStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
