// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc_device/v1/device.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Device_DeviceStore_FullMethodName = "/api.rpc_device.v1.Device/DeviceStore"
	Device_DeviceDel_FullMethodName   = "/api.rpc_device.v1.Device/DeviceDel"
	Device_DeviceOne_FullMethodName   = "/api.rpc_device.v1.Device/DeviceOne"
	Device_DeviceList_FullMethodName  = "/api.rpc_device.v1.Device/DeviceList"
)

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceClient interface {
	// 设备表-创建一条数据
	DeviceStore(ctx context.Context, in *DeviceStoreReq, opts ...grpc.CallOption) (*DeviceStoreReply, error)
	// 设备表-删除多条数据
	DeviceDel(ctx context.Context, in *DeviceDelReq, opts ...grpc.CallOption) (*DeviceDelReply, error)
	// 设备表-单条数据查询
	DeviceOne(ctx context.Context, in *DeviceOneReq, opts ...grpc.CallOption) (*DeviceOneReply, error)
	// 设备表-列表数据查询
	DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListReply, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) DeviceStore(ctx context.Context, in *DeviceStoreReq, opts ...grpc.CallOption) (*DeviceStoreReply, error) {
	out := new(DeviceStoreReply)
	err := c.cc.Invoke(ctx, Device_DeviceStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) DeviceDel(ctx context.Context, in *DeviceDelReq, opts ...grpc.CallOption) (*DeviceDelReply, error) {
	out := new(DeviceDelReply)
	err := c.cc.Invoke(ctx, Device_DeviceDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) DeviceOne(ctx context.Context, in *DeviceOneReq, opts ...grpc.CallOption) (*DeviceOneReply, error) {
	out := new(DeviceOneReply)
	err := c.cc.Invoke(ctx, Device_DeviceOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListReply, error) {
	out := new(DeviceListReply)
	err := c.cc.Invoke(ctx, Device_DeviceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
// All implementations must embed UnimplementedDeviceServer
// for forward compatibility
type DeviceServer interface {
	// 设备表-创建一条数据
	DeviceStore(context.Context, *DeviceStoreReq) (*DeviceStoreReply, error)
	// 设备表-删除多条数据
	DeviceDel(context.Context, *DeviceDelReq) (*DeviceDelReply, error)
	// 设备表-单条数据查询
	DeviceOne(context.Context, *DeviceOneReq) (*DeviceOneReply, error)
	// 设备表-列表数据查询
	DeviceList(context.Context, *DeviceListReq) (*DeviceListReply, error)
	mustEmbedUnimplementedDeviceServer()
}

// UnimplementedDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (UnimplementedDeviceServer) DeviceStore(context.Context, *DeviceStoreReq) (*DeviceStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceStore not implemented")
}
func (UnimplementedDeviceServer) DeviceDel(context.Context, *DeviceDelReq) (*DeviceDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDel not implemented")
}
func (UnimplementedDeviceServer) DeviceOne(context.Context, *DeviceOneReq) (*DeviceOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceOne not implemented")
}
func (UnimplementedDeviceServer) DeviceList(context.Context, *DeviceListReq) (*DeviceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedDeviceServer) mustEmbedUnimplementedDeviceServer() {}

// UnsafeDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServer will
// result in compilation errors.
type UnsafeDeviceServer interface {
	mustEmbedUnimplementedDeviceServer()
}

func RegisterDeviceServer(s grpc.ServiceRegistrar, srv DeviceServer) {
	s.RegisterService(&Device_ServiceDesc, srv)
}

func _Device_DeviceStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).DeviceStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_DeviceStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).DeviceStore(ctx, req.(*DeviceStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_DeviceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).DeviceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_DeviceDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).DeviceDel(ctx, req.(*DeviceDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_DeviceOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).DeviceOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_DeviceOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).DeviceOne(ctx, req.(*DeviceOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_DeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).DeviceList(ctx, req.(*DeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Device_ServiceDesc is the grpc.ServiceDesc for Device service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Device_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpc_device.v1.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceStore",
			Handler:    _Device_DeviceStore_Handler,
		},
		{
			MethodName: "DeviceDel",
			Handler:    _Device_DeviceDel_Handler,
		},
		{
			MethodName: "DeviceOne",
			Handler:    _Device_DeviceOne_Handler,
		},
		{
			MethodName: "DeviceList",
			Handler:    _Device_DeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_device/v1/device.proto",
}
