// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff_api/v1/api.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiInfoMultiError, or nil if none found.
func (m *ApiInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiInfoMultiError(errors)
	}

	return nil
}

// ApiInfoMultiError is an error wrapping multiple validation errors returned
// by ApiInfo.ValidateAll() if the designated constraints aren't met.
type ApiInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiInfoMultiError) AllErrors() []error { return m }

// ApiInfoValidationError is the validation error returned by ApiInfo.Validate
// if the designated constraints aren't met.
type ApiInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiInfoValidationError) ErrorName() string { return "ApiInfoValidationError" }

// Error satisfies the builtin error interface
func (e ApiInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiInfoValidationError{}

// Validate checks the field values on CreateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReqMultiError, or
// nil if none found.
func (m *CreateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateApiReqMultiError(errors)
	}

	return nil
}

// CreateApiReqMultiError is an error wrapping multiple validation errors
// returned by CreateApiReq.ValidateAll() if the designated constraints aren't met.
type CreateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReqMultiError) AllErrors() []error { return m }

// CreateApiReqValidationError is the validation error returned by
// CreateApiReq.Validate if the designated constraints aren't met.
type CreateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReqValidationError) ErrorName() string { return "CreateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReqValidationError{}

// Validate checks the field values on CreateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReplyMultiError,
// or nil if none found.
func (m *CreateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateApiReplyMultiError(errors)
	}

	return nil
}

// CreateApiReplyMultiError is an error wrapping multiple validation errors
// returned by CreateApiReply.ValidateAll() if the designated constraints
// aren't met.
type CreateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReplyMultiError) AllErrors() []error { return m }

// CreateApiReplyValidationError is the validation error returned by
// CreateApiReply.Validate if the designated constraints aren't met.
type CreateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReplyValidationError) ErrorName() string { return "CreateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReplyValidationError{}

// Validate checks the field values on UpdateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReqMultiError, or
// nil if none found.
func (m *UpdateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApiInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApiReqValidationError{
					field:  "ApiInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApiReqValidationError{
					field:  "ApiInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApiReqValidationError{
				field:  "ApiInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateApiReqMultiError(errors)
	}

	return nil
}

// UpdateApiReqMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReq.ValidateAll() if the designated constraints aren't met.
type UpdateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReqMultiError) AllErrors() []error { return m }

// UpdateApiReqValidationError is the validation error returned by
// UpdateApiReq.Validate if the designated constraints aren't met.
type UpdateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReqValidationError) ErrorName() string { return "UpdateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReqValidationError{}

// Validate checks the field values on UpdateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReplyMultiError,
// or nil if none found.
func (m *UpdateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateApiReplyMultiError(errors)
	}

	return nil
}

// UpdateApiReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReplyMultiError) AllErrors() []error { return m }

// UpdateApiReplyValidationError is the validation error returned by
// UpdateApiReply.Validate if the designated constraints aren't met.
type UpdateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReplyValidationError) ErrorName() string { return "UpdateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReplyValidationError{}

// Validate checks the field values on DeleteApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReqMultiError, or
// nil if none found.
func (m *DeleteApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApiReqMultiError(errors)
	}

	return nil
}

// DeleteApiReqMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReq.ValidateAll() if the designated constraints aren't met.
type DeleteApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReqMultiError) AllErrors() []error { return m }

// DeleteApiReqValidationError is the validation error returned by
// DeleteApiReq.Validate if the designated constraints aren't met.
type DeleteApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReqValidationError) ErrorName() string { return "DeleteApiReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReqValidationError{}

// Validate checks the field values on DeleteApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReplyMultiError,
// or nil if none found.
func (m *DeleteApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApiReplyMultiError(errors)
	}

	return nil
}

// DeleteApiReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReplyMultiError) AllErrors() []error { return m }

// DeleteApiReplyValidationError is the validation error returned by
// DeleteApiReply.Validate if the designated constraints aren't met.
type DeleteApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReplyValidationError) ErrorName() string { return "DeleteApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReplyValidationError{}

// Validate checks the field values on GetApiReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiReqMultiError, or nil
// if none found.
func (m *GetApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetApiReqMultiError(errors)
	}

	return nil
}

// GetApiReqMultiError is an error wrapping multiple validation errors returned
// by GetApiReq.ValidateAll() if the designated constraints aren't met.
type GetApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiReqMultiError) AllErrors() []error { return m }

// GetApiReqValidationError is the validation error returned by
// GetApiReq.Validate if the designated constraints aren't met.
type GetApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiReqValidationError) ErrorName() string { return "GetApiReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiReqValidationError{}

// Validate checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiReplyMultiError, or
// nil if none found.
func (m *GetApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetApiReplyMultiError(errors)
	}

	return nil
}

// GetApiReplyMultiError is an error wrapping multiple validation errors
// returned by GetApiReply.ValidateAll() if the designated constraints aren't met.
type GetApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiReplyMultiError) AllErrors() []error { return m }

// GetApiReplyValidationError is the validation error returned by
// GetApiReply.Validate if the designated constraints aren't met.
type GetApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiReplyValidationError) ErrorName() string { return "GetApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiReplyValidationError{}

// Validate checks the field values on ListApiReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiReqMultiError, or
// nil if none found.
func (m *ListApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListApiReqMultiError(errors)
	}

	return nil
}

// ListApiReqMultiError is an error wrapping multiple validation errors
// returned by ListApiReq.ValidateAll() if the designated constraints aren't met.
type ListApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiReqMultiError) AllErrors() []error { return m }

// ListApiReqValidationError is the validation error returned by
// ListApiReq.Validate if the designated constraints aren't met.
type ListApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiReqValidationError) ErrorName() string { return "ListApiReqValidationError" }

// Error satisfies the builtin error interface
func (e ListApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiReqValidationError{}

// Validate checks the field values on ListApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiReplyMultiError, or
// nil if none found.
func (m *ListApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListApiReplyMultiError(errors)
	}

	return nil
}

// ListApiReplyMultiError is an error wrapping multiple validation errors
// returned by ListApiReply.ValidateAll() if the designated constraints aren't met.
type ListApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiReplyMultiError) AllErrors() []error { return m }

// ListApiReplyValidationError is the validation error returned by
// ListApiReply.Validate if the designated constraints aren't met.
type ListApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiReplyValidationError) ErrorName() string { return "ListApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiReplyValidationError{}
